
Testing_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008914  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08008ae8  08008ae8  00018ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe4  08008fe4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fec  08008fec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000070  08009064  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08009064  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001313a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e6  00000000  00000000  000331da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00035bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00036bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023abb  00000000  00000000  00037a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d17  00000000  00000000  0005b533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df768  00000000  00000000  0006e24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0014d9b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  0014da78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000ed9  00000000  00000000  001526fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008acc 	.word	0x08008acc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008acc 	.word	0x08008acc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <My_TIM2_Init>:
static void MX_TIM2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

static void My_TIM2_Init(int period) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <My_TIM2_Init+0x98>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <My_TIM2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <My_TIM2_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = period;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a18      	ldr	r2, [pc, #96]	; (8001008 <My_TIM2_Init+0x98>)
 8000fa8:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <My_TIM2_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <My_TIM2_Init+0x98>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <My_TIM2_Init+0x98>)
 8000fb8:	f003 fed8 	bl	8004d6c <HAL_TIM_Base_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <My_TIM2_Init+0x56>
		Error_Handler();
 8000fc2:	f001 f9e5 	bl	8002390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <My_TIM2_Init+0x98>)
 8000fd4:	f003 ffa9 	bl	8004f2a <HAL_TIM_ConfigClockSource>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <My_TIM2_Init+0x72>
		Error_Handler();
 8000fde:	f001 f9d7 	bl	8002390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <My_TIM2_Init+0x98>)
 8000ff2:	f004 f99b 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <My_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000ffc:	f001 f9c8 	bl	8002390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000650 	.word	0x20000650

0800100c <My_TIM4_Init>:

static void My_TIM4_Init(int period) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <My_TIM4_Init+0x98>)
 800102e:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <My_TIM4_Init+0x9c>)
 8001030:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <My_TIM4_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <My_TIM4_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = period;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <My_TIM4_Init+0x98>)
 8001042:	60d3      	str	r3, [r2, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <My_TIM4_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <My_TIM4_Init+0x98>)
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <My_TIM4_Init+0x98>)
 8001052:	f003 fe8b 	bl	8004d6c <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <My_TIM4_Init+0x54>
		Error_Handler();
 800105c:	f001 f998 	bl	8002390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <My_TIM4_Init+0x98>)
 800106e:	f003 ff5c 	bl	8004f2a <HAL_TIM_ConfigClockSource>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <My_TIM4_Init+0x70>
		Error_Handler();
 8001078:	f001 f98a 	bl	8002390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800107c:	2320      	movs	r3, #32
 800107e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <My_TIM4_Init+0x98>)
 800108c:	f004 f94e 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <My_TIM4_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001096:	f001 f97b 	bl	8002390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000b0 	.word	0x200000b0
 80010a8:	40000800 	.word	0x40000800
 80010ac:	00000000 	.word	0x00000000

080010b0 <output_RLC>:
	  HAL_UART_Transmit(&huart2,"\r\n",2,10);		// Send new line command
	  //HAL_UART_Transmit(&huart2,",",2,10);		// Send comma
}

void output_RLC(struct RLC a)
{
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b4:	ed2d 8b02 	vpush	{d8}
 80010b8:	b08a      	sub	sp, #40	; 0x28
 80010ba:	af02      	add	r7, sp, #8
 80010bc:	eef0 6a40 	vmov.f32	s13, s0
 80010c0:	eeb0 7a60 	vmov.f32	s14, s1
 80010c4:	eef0 7a41 	vmov.f32	s15, s2
 80010c8:	edc7 6a01 	vstr	s13, [r7, #4]
 80010cc:	ed87 7a02 	vstr	s14, [r7, #8]
 80010d0:	edc7 7a03 	vstr	s15, [r7, #12]
 80010d4:	466b      	mov	r3, sp
 80010d6:	4698      	mov	r8, r3
	  int message_size = 50;
 80010d8:	2332      	movs	r3, #50	; 0x32
 80010da:	61fb      	str	r3, [r7, #28]
	  char str[message_size];
 80010dc:	69fc      	ldr	r4, [r7, #28]
 80010de:	1e63      	subs	r3, r4, #1
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4623      	mov	r3, r4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f04f 0100 	mov.w	r1, #0
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	00cb      	lsls	r3, r1, #3
 80010f4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010f8:	00c2      	lsls	r2, r0, #3
 80010fa:	4623      	mov	r3, r4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f04f 0100 	mov.w	r1, #0
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	00cb      	lsls	r3, r1, #3
 800110c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001110:	00c2      	lsls	r2, r0, #3
 8001112:	4623      	mov	r3, r4
 8001114:	3307      	adds	r3, #7
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	ebad 0d03 	sub.w	sp, sp, r3
 800111e:	ab02      	add	r3, sp, #8
 8001120:	3300      	adds	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

	  sprintf(str, "(R = %i Ohm) (L = %i nH) (C = %i nF)", (int)(a.R), (int)(a.L*1e9), (int)(a.C*1e9));
 8001124:	697d      	ldr	r5, [r7, #20]
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa21 	bl	8000578 <__aeabi_f2d>
 8001136:	a31f      	add	r3, pc, #124	; (adr r3, 80011b4 <output_RLC+0x104>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa74 	bl	8000628 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd1e 	bl	8000b88 <__aeabi_d2iz>
 800114c:	4606      	mov	r6, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa11 	bl	8000578 <__aeabi_f2d>
 8001156:	a317      	add	r3, pc, #92	; (adr r3, 80011b4 <output_RLC+0x104>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fa64 	bl	8000628 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd0e 	bl	8000b88 <__aeabi_d2iz>
 800116c:	4603      	mov	r3, r0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4633      	mov	r3, r6
 8001172:	ee18 2a10 	vmov	r2, s16
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <output_RLC+0xf8>)
 8001178:	4628      	mov	r0, r5
 800117a:	f007 f879 	bl	8008270 <siprintf>

	  HAL_UART_Transmit(&huart2,str,sizeof(str),10);// Send string
 800117e:	6979      	ldr	r1, [r7, #20]
 8001180:	b2a2      	uxth	r2, r4
 8001182:	230a      	movs	r3, #10
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <output_RLC+0xfc>)
 8001186:	f004 f99a 	bl	80054be <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,"\r\n",2,10);		// Send new line command
 800118a:	230a      	movs	r3, #10
 800118c:	2202      	movs	r2, #2
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <output_RLC+0x100>)
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <output_RLC+0xfc>)
 8001192:	f004 f994 	bl	80054be <HAL_UART_Transmit>
 8001196:	46c5      	mov	sp, r8
	  //HAL_UART_Transmit(&huart2,",",2,10);		// Send comma
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	ecbd 8b02 	vpop	{d8}
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a6:	bf00      	nop
 80011a8:	08008b00 	.word	0x08008b00
 80011ac:	20000698 	.word	0x20000698
 80011b0:	08008afc 	.word	0x08008afc
 80011b4:	00000000 	.word	0x00000000
 80011b8:	41cdcd65 	.word	0x41cdcd65

080011bc <get_best_resistor>:

int get_best_resistor(int frequency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int resistor = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
	int is_clipping = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]

	select_measurement_mode(2);
 80011cc:	2002      	movs	r0, #2
 80011ce:	f000 fac7 	bl	8001760 <select_measurement_mode>

	while (is_clipping == 0){
 80011d2:	e034      	b.n	800123e <get_best_resistor+0x82>

		resistor++;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
		select_resistor(resistor);
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f000 f9ea 	bl	80015b4 <select_resistor>

		if(resistor >= 6){ //if none clip, just use the highest (1 Meg) resistor
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	dd03      	ble.n	80011ee <get_best_resistor+0x32>
			resistor = 5;
 80011e6:	2305      	movs	r3, #5
 80011e8:	617b      	str	r3, [r7, #20]
			is_clipping = 1; //not clipping but we now want to exit the while loop
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
		}

		sync_sample_blocking(&adc_buffer_A[0], ADC_BUFFER_SIZE, frequency); //make samples at freq selected
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f4:	4816      	ldr	r0, [pc, #88]	; (8001250 <get_best_resistor+0x94>)
 80011f6:	f000 fae5 	bl	80017c4 <sync_sample_blocking>

		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e018      	b.n	8001232 <get_best_resistor+0x76>
			if((uint16_t)(adc_buffer_A[i] & 0x00000FFF) <= 30 || (uint16_t)(adc_buffer_A[i] & 0x00000FFF) >= 4060){ //if ADC min/max is reached
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <get_best_resistor+0x94>)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	b29b      	uxth	r3, r3
 800120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120e:	2b1e      	cmp	r3, #30
 8001210:	dd0a      	ble.n	8001228 <get_best_resistor+0x6c>
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <get_best_resistor+0x94>)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	b29b      	uxth	r3, r3
 800121c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001220:	f640 72db 	movw	r2, #4059	; 0xfdb
 8001224:	4293      	cmp	r3, r2
 8001226:	dd01      	ble.n	800122c <get_best_resistor+0x70>
				is_clipping = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b7f      	cmp	r3, #127	; 0x7f
 8001236:	dde3      	ble.n	8001200 <get_best_resistor+0x44>
			HAL_UART_Transmit(&huart2,(uint8_t*)str,50,1);
			HAL_UART_Transmit(&huart2,(uint8_t*)"\n",1,1);
		}
		HAL_UART_Transmit(&huart2,(uint8_t*)"End\n",4,1);
*/
		HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f001 fb65 	bl	8002908 <HAL_Delay>
	while (is_clipping == 0){
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0c7      	beq.n	80011d4 <get_best_resistor+0x18>

	}
	return resistor-1;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3b01      	subs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001cc 	.word	0x200001cc
 8001254:	00000000 	.word	0x00000000

08001258 <make_voltage_measurement>:

struct voltage_measurement make_voltage_measurement(int measurement_mode, int resistor, int frequency)
{
 8001258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800125c:	b0a0      	sub	sp, #128	; 0x80
 800125e:	af00      	add	r7, sp, #0
 8001260:	61f8      	str	r0, [r7, #28]
 8001262:	61b9      	str	r1, [r7, #24]
 8001264:	617a      	str	r2, [r7, #20]
	select_resistor(resistor);
 8001266:	69b8      	ldr	r0, [r7, #24]
 8001268:	f000 f9a4 	bl	80015b4 <select_resistor>
	select_measurement_mode(measurement_mode);
 800126c:	69f8      	ldr	r0, [r7, #28]
 800126e:	f000 fa77 	bl	8001760 <select_measurement_mode>

	sync_sample_blocking(&adc_buffer_A[0], ADC_BUFFER_SIZE, frequency); //Make ADC samples
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001278:	483d      	ldr	r0, [pc, #244]	; (8001370 <make_voltage_measurement+0x118>)
 800127a:	f000 faa3 	bl	80017c4 <sync_sample_blocking>

	int timer_error = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	67fb      	str	r3, [r7, #124]	; 0x7c

	switch(frequency) {
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8001288:	4293      	cmp	r3, r2
 800128a:	d024      	beq.n	80012d6 <make_voltage_measurement+0x7e>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8001292:	4293      	cmp	r3, r2
 8001294:	dc43      	bgt.n	800131e <make_voltage_measurement+0xc6>
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800129c:	4293      	cmp	r3, r2
 800129e:	d020      	beq.n	80012e2 <make_voltage_measurement+0x8a>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80012a6:	4293      	cmp	r3, r2
 80012a8:	dc39      	bgt.n	800131e <make_voltage_measurement+0xc6>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f240 1245 	movw	r2, #325	; 0x145
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d01c      	beq.n	80012ee <make_voltage_measurement+0x96>
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 80012ba:	da30      	bge.n	800131e <make_voltage_measurement+0xc6>
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b21      	cmp	r3, #33	; 0x21
 80012c0:	d01b      	beq.n	80012fa <make_voltage_measurement+0xa2>
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2b21      	cmp	r3, #33	; 0x21
 80012c6:	dc2a      	bgt.n	800131e <make_voltage_measurement+0xc6>
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d021      	beq.n	8001312 <make_voltage_measurement+0xba>
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b0b      	cmp	r3, #11
 80012d2:	d018      	beq.n	8001306 <make_voltage_measurement+0xae>
 80012d4:	e023      	b.n	800131e <make_voltage_measurement+0xc6>
		   case SINE_10 :
			  timer_error = 2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	67fb      	str	r3, [r7, #124]	; 0x7c
			  phase_Offset = 0.024;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <make_voltage_measurement+0x11c>)
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <make_voltage_measurement+0x120>)
 80012de:	601a      	str	r2, [r3, #0]
		      break;
 80012e0:	e01f      	b.n	8001322 <make_voltage_measurement+0xca>
		   case SINE_100:
			  timer_error = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	67fb      	str	r3, [r7, #124]	; 0x7c
			  phase_Offset = 0.024;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <make_voltage_measurement+0x11c>)
 80012e8:	4a23      	ldr	r2, [pc, #140]	; (8001378 <make_voltage_measurement+0x120>)
 80012ea:	601a      	str	r2, [r3, #0]
		      break;
 80012ec:	e019      	b.n	8001322 <make_voltage_measurement+0xca>
		   case SINE_1K:
			  timer_error = 2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	67fb      	str	r3, [r7, #124]	; 0x7c
			  phase_Offset = 0.025;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <make_voltage_measurement+0x11c>)
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <make_voltage_measurement+0x124>)
 80012f6:	601a      	str	r2, [r3, #0]
		      break;
 80012f8:	e013      	b.n	8001322 <make_voltage_measurement+0xca>
		   case SINE_10K:
			  timer_error = 4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	67fb      	str	r3, [r7, #124]	; 0x7c
			  phase_Offset = 0.156;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <make_voltage_measurement+0x11c>)
 8001300:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <make_voltage_measurement+0x128>)
 8001302:	601a      	str	r2, [r3, #0]
		      break;
 8001304:	e00d      	b.n	8001322 <make_voltage_measurement+0xca>
		   case SINE_30K:
			  timer_error = 8;
 8001306:	2308      	movs	r3, #8
 8001308:	67fb      	str	r3, [r7, #124]	; 0x7c
			  phase_Offset = 2.853;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <make_voltage_measurement+0x11c>)
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <make_voltage_measurement+0x12c>)
 800130e:	601a      	str	r2, [r3, #0]
		      break;
 8001310:	e007      	b.n	8001322 <make_voltage_measurement+0xca>
		   case SINE_100K:
			  timer_error = 8;
 8001312:	2308      	movs	r3, #8
 8001314:	67fb      	str	r3, [r7, #124]	; 0x7c
			  phase_Offset = 2.853;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <make_voltage_measurement+0x11c>)
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <make_voltage_measurement+0x12c>)
 800131a:	601a      	str	r2, [r3, #0]
		      break;
 800131c:	e001      	b.n	8001322 <make_voltage_measurement+0xca>
		   default :
			  timer_error = 2;
 800131e:	2302      	movs	r3, #2
 8001320:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	double k = 0.00390625 * timer_error; // 1/256 * timer error
 8001322:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001324:	f7ff f916 	bl	8000554 <__aeabi_i2d>
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <make_voltage_measurement+0x130>)
 800132e:	f7ff f97b 	bl	8000628 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double pi = 2 * acos(0.0);
 800133a:	a30b      	add	r3, pc, #44	; (adr r3, 8001368 <make_voltage_measurement+0x110>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	double total_IP = 0;
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double total_QP = 0;
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	for(int i = 0; i < ADC_BUFFER_SIZE/timer_error; i++){
 800135c:	2300      	movs	r3, #0
 800135e:	667b      	str	r3, [r7, #100]	; 0x64
 8001360:	e099      	b.n	8001496 <make_voltage_measurement+0x23e>
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	54442d18 	.word	0x54442d18
 800136c:	400921fb 	.word	0x400921fb
 8001370:	200001cc 	.word	0x200001cc
 8001374:	20000090 	.word	0x20000090
 8001378:	3cc49ba6 	.word	0x3cc49ba6
 800137c:	3ccccccd 	.word	0x3ccccccd
 8001380:	3e1fbe77 	.word	0x3e1fbe77
 8001384:	4036978d 	.word	0x4036978d
 8001388:	3f700000 	.word	0x3f700000
		double IP_signal = cos(-2*pi*k*i);
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001394:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001398:	f7ff f946 	bl	8000628 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013a8:	f7ff f93e 	bl	8000628 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4690      	mov	r8, r2
 80013b2:	4699      	mov	r9, r3
 80013b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80013b6:	f7ff f8cd 	bl	8000554 <__aeabi_i2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff f931 	bl	8000628 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	ec43 2b17 	vmov	d7, r2, r3
 80013ce:	eeb0 0a47 	vmov.f32	s0, s14
 80013d2:	eef0 0a67 	vmov.f32	s1, s15
 80013d6:	f004 ff33 	bl	8006240 <cos>
 80013da:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		double QP_signal = sin(-2*pi*k*i);
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013ea:	f7ff f91d 	bl	8000628 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013fa:	f7ff f915 	bl	8000628 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4690      	mov	r8, r2
 8001404:	4699      	mov	r9, r3
 8001406:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001408:	f7ff f8a4 	bl	8000554 <__aeabi_i2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4640      	mov	r0, r8
 8001412:	4649      	mov	r1, r9
 8001414:	f7ff f908 	bl	8000628 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	ec43 2b17 	vmov	d7, r2, r3
 8001420:	eeb0 0a47 	vmov.f32	s0, s14
 8001424:	eef0 0a67 	vmov.f32	s1, s15
 8001428:	f004 ff66 	bl	80062f8 <sin>
 800142c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

		total_IP = total_IP + (IP_signal * (uint16_t)(adc_buffer_A[i] & 0x00000FFF));
 8001430:	4a5f      	ldr	r2, [pc, #380]	; (80015b0 <make_voltage_measurement+0x358>)
 8001432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	b29b      	uxth	r3, r3
 800143a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f888 	bl	8000554 <__aeabi_i2d>
 8001444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001448:	f7ff f8ee 	bl	8000628 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001454:	f7fe ff32 	bl	80002bc <__adddf3>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		total_QP = total_QP + (QP_signal * (uint16_t)(adc_buffer_A[i] & 0x00000FFF));
 8001460:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <make_voltage_measurement+0x358>)
 8001462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	b29b      	uxth	r3, r3
 800146a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f870 	bl	8000554 <__aeabi_i2d>
 8001474:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001478:	f7ff f8d6 	bl	8000628 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001484:	f7fe ff1a 	bl	80002bc <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	for(int i = 0; i < ADC_BUFFER_SIZE/timer_error; i++){
 8001490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001492:	3301      	adds	r3, #1
 8001494:	667b      	str	r3, [r7, #100]	; 0x64
 8001496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800149c:	fb92 f3f3 	sdiv	r3, r2, r3
 80014a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014a2:	429a      	cmp	r2, r3
 80014a4:	f6ff af72 	blt.w	800138c <make_voltage_measurement+0x134>
//		HAL_UART_Transmit(&huart2,(uint8_t*)"End\n",4,1);

//	}


	struct voltage_measurement vm = {0,0};
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	vm.magnitude = sqrt(pow(total_IP, 2) + pow(total_QP, 2))*(2*k);
 80014c0:	ed9f 1b39 	vldr	d1, [pc, #228]	; 80015a8 <make_voltage_measurement+0x350>
 80014c4:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 80014c8:	f004 ff6a 	bl	80063a0 <pow>
 80014cc:	ec59 8b10 	vmov	r8, r9, d0
 80014d0:	ed9f 1b35 	vldr	d1, [pc, #212]	; 80015a8 <make_voltage_measurement+0x350>
 80014d4:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80014d8:	f004 ff62 	bl	80063a0 <pow>
 80014dc:	ec53 2b10 	vmov	r2, r3, d0
 80014e0:	4640      	mov	r0, r8
 80014e2:	4649      	mov	r1, r9
 80014e4:	f7fe feea 	bl	80002bc <__adddf3>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	ec43 2b17 	vmov	d7, r2, r3
 80014f0:	eeb0 0a47 	vmov.f32	s0, s14
 80014f4:	eef0 0a67 	vmov.f32	s1, s15
 80014f8:	f005 f800 	bl	80064fc <sqrt>
 80014fc:	ec59 8b10 	vmov	r8, r9, d0
 8001500:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	f7fe fed8 	bl	80002bc <__adddf3>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4640      	mov	r0, r8
 8001512:	4649      	mov	r1, r9
 8001514:	f7ff f888 	bl	8000628 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	vm.phase = -(atan(total_QP/total_IP) - (pi/2));
 8001520:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001524:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001528:	f7ff f9a8 	bl	800087c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	ec43 2b17 	vmov	d7, r2, r3
 8001534:	eeb0 0a47 	vmov.f32	s0, s14
 8001538:	eef0 0a67 	vmov.f32	s1, s15
 800153c:	f004 fce0 	bl	8005f00 <atan>
 8001540:	ec59 8b10 	vmov	r8, r9, d0
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001550:	f7ff f994 	bl	800087c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4640      	mov	r0, r8
 800155a:	4649      	mov	r1, r9
 800155c:	f7fe feac 	bl	80002b8 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800156a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28

	return vm;
 800156e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800157c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001584:	ec41 0b16 	vmov	d6, r0, r1
 8001588:	ec43 2b17 	vmov	d7, r2, r3
}
 800158c:	eeb0 0a46 	vmov.f32	s0, s12
 8001590:	eef0 0a66 	vmov.f32	s1, s13
 8001594:	eeb0 1a47 	vmov.f32	s2, s14
 8001598:	eef0 1a67 	vmov.f32	s3, s15
 800159c:	3780      	adds	r7, #128	; 0x80
 800159e:	46bd      	mov	sp, r7
 80015a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40000000 	.word	0x40000000
 80015b0:	200001cc 	.word	0x200001cc

080015b4 <select_resistor>:


void select_resistor(int resistor){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d86c      	bhi.n	800169e <select_resistor+0xea>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <select_resistor+0x18>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015e1 	.word	0x080015e1
 80015d0:	08001607 	.word	0x08001607
 80015d4:	0800162d 	.word	0x0800162d
 80015d8:	08001653 	.word	0x08001653
 80015dc:	08001679 	.word	0x08001679
	switch(resistor) {
	   case 1  ://100 ohm resistor (Not working on breadboard)
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e6:	4839      	ldr	r0, [pc, #228]	; (80016cc <select_resistor+0x118>)
 80015e8:	f002 fe92 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	4836      	ldr	r0, [pc, #216]	; (80016cc <select_resistor+0x118>)
 80015f4:	f002 fe8c 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fe:	4833      	ldr	r0, [pc, #204]	; (80016cc <select_resistor+0x118>)
 8001600:	f002 fe86 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 8001604:	e05e      	b.n	80016c4 <select_resistor+0x110>
	   case 2  ://1k resistor
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160c:	482f      	ldr	r0, [pc, #188]	; (80016cc <select_resistor+0x118>)
 800160e:	f002 fe7f 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001618:	482c      	ldr	r0, [pc, #176]	; (80016cc <select_resistor+0x118>)
 800161a:	f002 fe79 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001624:	4829      	ldr	r0, [pc, #164]	; (80016cc <select_resistor+0x118>)
 8001626:	f002 fe73 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 800162a:	e04b      	b.n	80016c4 <select_resistor+0x110>
	   case 3  ://10k resistor
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <select_resistor+0x118>)
 8001634:	f002 fe6c 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163e:	4823      	ldr	r0, [pc, #140]	; (80016cc <select_resistor+0x118>)
 8001640:	f002 fe66 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164a:	4820      	ldr	r0, [pc, #128]	; (80016cc <select_resistor+0x118>)
 800164c:	f002 fe60 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 8001650:	e038      	b.n	80016c4 <select_resistor+0x110>
	   case 4  ://100k resistor
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001658:	481c      	ldr	r0, [pc, #112]	; (80016cc <select_resistor+0x118>)
 800165a:	f002 fe59 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <select_resistor+0x118>)
 8001666:	f002 fe53 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001670:	4816      	ldr	r0, [pc, #88]	; (80016cc <select_resistor+0x118>)
 8001672:	f002 fe4d 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 8001676:	e025      	b.n	80016c4 <select_resistor+0x110>
	   case 5  ://1Meg resistor
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167e:	4813      	ldr	r0, [pc, #76]	; (80016cc <select_resistor+0x118>)
 8001680:	f002 fe46 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168a:	4810      	ldr	r0, [pc, #64]	; (80016cc <select_resistor+0x118>)
 800168c:	f002 fe40 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <select_resistor+0x118>)
 8001698:	f002 fe3a 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 800169c:	e012      	b.n	80016c4 <select_resistor+0x110>
	   default :
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <select_resistor+0x118>)
 80016a6:	f002 fe33 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <select_resistor+0x118>)
 80016b2:	f002 fe2d 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <select_resistor+0x118>)
 80016be:	f002 fe27 	bl	8004310 <HAL_GPIO_WritePin>
	}
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40020400 	.word	0x40020400

080016d0 <get_resistor>:

double get_resistor(int resistor){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d821      	bhi.n	8001724 <get_resistor+0x54>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <get_resistor+0x18>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016fd 	.word	0x080016fd
 80016ec:	08001705 	.word	0x08001705
 80016f0:	0800170d 	.word	0x0800170d
 80016f4:	08001715 	.word	0x08001715
 80016f8:	0800171d 	.word	0x0800171d
	switch(resistor) {
	   case 1  ://100 ohm resistor (Not working on breadboard)
		  return 100;
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <get_resistor+0x88>)
 8001702:	e012      	b.n	800172a <get_resistor+0x5a>
	      break;
	   case 2  ://1k resistor
		  return 1000;
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <get_resistor+0x8c>)
 800170a:	e00e      	b.n	800172a <get_resistor+0x5a>
	      break;
	   case 3  ://10k resistor
		  return 10000;
 800170c:	a30c      	add	r3, pc, #48	; (adr r3, 8001740 <get_resistor+0x70>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	e00a      	b.n	800172a <get_resistor+0x5a>
	      break;
	   case 4  ://100k resistor
		  return 100000;
 8001714:	a30c      	add	r3, pc, #48	; (adr r3, 8001748 <get_resistor+0x78>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	e006      	b.n	800172a <get_resistor+0x5a>
	      break;
	   case 5  ://1Meg resistor
		   return 1000000;
 800171c:	a30c      	add	r3, pc, #48	; (adr r3, 8001750 <get_resistor+0x80>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	e002      	b.n	800172a <get_resistor+0x5a>
	      break;
	   default :
		   return 100;
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <get_resistor+0x88>)
 800172a:	ec43 2b17 	vmov	d7, r2, r3
	}
}
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	00000000 	.word	0x00000000
 8001744:	40c38800 	.word	0x40c38800
 8001748:	00000000 	.word	0x00000000
 800174c:	40f86a00 	.word	0x40f86a00
 8001750:	00000000 	.word	0x00000000
 8001754:	412e8480 	.word	0x412e8480
 8001758:	40590000 	.word	0x40590000
 800175c:	408f4000 	.word	0x408f4000

08001760 <select_measurement_mode>:

void select_measurement_mode(int measurement_mode){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	switch(measurement_mode) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d003      	beq.n	8001776 <select_measurement_mode+0x16>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d00b      	beq.n	800178c <select_measurement_mode+0x2c>
 8001774:	e015      	b.n	80017a2 <select_measurement_mode+0x42>
	   case 1  : //measure between V_vg and V_1
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //A
 8001776:	2201      	movs	r2, #1
 8001778:	2110      	movs	r1, #16
 800177a:	4811      	ldr	r0, [pc, #68]	; (80017c0 <select_measurement_mode+0x60>)
 800177c:	f002 fdc8 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //B
 8001780:	2201      	movs	r2, #1
 8001782:	2120      	movs	r1, #32
 8001784:	480e      	ldr	r0, [pc, #56]	; (80017c0 <select_measurement_mode+0x60>)
 8001786:	f002 fdc3 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 800178a:	e015      	b.n	80017b8 <select_measurement_mode+0x58>
	   case 2  ://measure between V_vg and V_2
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2110      	movs	r1, #16
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <select_measurement_mode+0x60>)
 8001792:	f002 fdbd 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2120      	movs	r1, #32
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <select_measurement_mode+0x60>)
 800179c:	f002 fdb8 	bl	8004310 <HAL_GPIO_WritePin>
	      break;
 80017a0:	e00a      	b.n	80017b8 <select_measurement_mode+0x58>
	   default ://default to V_vg and V_1 measurement
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2110      	movs	r1, #16
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <select_measurement_mode+0x60>)
 80017a8:	f002 fdb2 	bl	8004310 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2120      	movs	r1, #32
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <select_measurement_mode+0x60>)
 80017b2:	f002 fdad 	bl	8004310 <HAL_GPIO_WritePin>
	}
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40020400 	.word	0x40020400

080017c4 <sync_sample_blocking>:

void sync_sample_blocking(uint32_t *buffer, int buffer_size, int frequency) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]

//Set the correct samplying rate for DAC and ADC
	My_TIM2_Init(frequency);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fbcd 	bl	8000f70 <My_TIM2_Init>
	My_TIM4_Init(frequency);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fc18 	bl	800100c <My_TIM4_Init>
//Start the DAC via DMA
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sine_wave_array_1k,
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <sync_sample_blocking+0x84>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4818      	ldr	r0, [pc, #96]	; (800184c <sync_sample_blocking+0x88>)
 80017ea:	f001 fe57 	bl	800349c <HAL_DAC_Start_DMA>
	SINE_1K_LUT_SIZE, DAC_ALIGN_12B_R);

//Setup ADC
//Must disable the DMA first otherwise, it will not let you change the destination pointer as you intend!
	HAL_ADC_Stop_DMA(&hadc1);
 80017ee:	4818      	ldr	r0, [pc, #96]	; (8001850 <sync_sample_blocking+0x8c>)
 80017f0:	f001 fa02 	bl	8002bf8 <HAL_ADC_Stop_DMA>
	buffer_is_full = 0;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <sync_sample_blocking+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, buffer, buffer_size);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	461a      	mov	r2, r3
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <sync_sample_blocking+0x8c>)
 8001802:	f001 f8e9 	bl	80029d8 <HAL_ADC_Start_DMA>

//Setup common sync timer
	HAL_TIM_Base_Stop(&htim2);
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <sync_sample_blocking+0x94>)
 8001808:	f003 fb68 	bl	8004edc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <sync_sample_blocking+0x98>)
 800180e:	f003 fb65 	bl	8004edc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(&htim2);
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <sync_sample_blocking+0x94>)
 8001814:	f003 fafa 	bl	8004e0c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001818:	4810      	ldr	r0, [pc, #64]	; (800185c <sync_sample_blocking+0x98>)
 800181a:	f003 faf7 	bl	8004e0c <HAL_TIM_Base_Start>
	while (buffer_is_full == 0);
 800181e:	bf00      	nop
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <sync_sample_blocking+0x90>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0fb      	beq.n	8001820 <sync_sample_blocking+0x5c>
	HAL_TIM_Base_Start(&htim2);
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <sync_sample_blocking+0x94>)
 800182a:	f003 faef 	bl	8004e0c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <sync_sample_blocking+0x98>)
 8001830:	f003 faec 	bl	8004e0c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Stop(&htim2);
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <sync_sample_blocking+0x94>)
 8001836:	f003 fb51 	bl	8004edc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <sync_sample_blocking+0x98>)
 800183c:	f003 fb4e 	bl	8004edc <HAL_TIM_Base_Stop>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	08008b28 	.word	0x08008b28
 800184c:	200001b8 	.word	0x200001b8
 8001850:	20000170 	.word	0x20000170
 8001854:	2000008c 	.word	0x2000008c
 8001858:	20000650 	.word	0x20000650
 800185c:	200000b0 	.word	0x200000b0

08001860 <HAL_ADC_ConvCpltCallback>:

//This is the call back the DMA calls after ADC buffer is full.
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	//Disable the sampling timer for both the ADC and DAC
	HAL_TIM_Base_Stop(&htim2);
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_ADC_ConvCpltCallback+0x24>)
 800186a:	f003 fb37 	bl	8004edc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <HAL_ADC_ConvCpltCallback+0x28>)
 8001870:	f003 fb34 	bl	8004edc <HAL_TIM_Base_Stop>
//Set the buffer full flag
	buffer_is_full = 1;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000650 	.word	0x20000650
 8001888:	200000b0 	.word	0x200000b0
 800188c:	2000008c 	.word	0x2000008c

08001890 <calculate_LCseries>:
	62831.85307, -0.000015915494,
	//188495.5592, -0.000005305164
	//628318.5307, -0.0000015915494,
};

arm_matrix_instance_f32 calculate_LCseries(float32_t *Reactance, arm_matrix_instance_f32 A){	// Returns {L; 1/C}
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4639      	mov	r1, r7
 800189c:	e881 000c 	stmia.w	r1, {r2, r3}
	arm_status status;
	// Create B matrix
	int row = 2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	//int row = 3;
	int column = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_matrix_instance_f32 B;	//B matrix of reactances
	arm_mat_init_f32(&B, row, column, Reactance);
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	b299      	uxth	r1, r3
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f107 001c 	add.w	r0, r7, #28
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f004 fb1f 	bl	8005ef8 <arm_mat_init_f32>

	//Work out calc and return [L;1/C]
	row = 2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	column = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_matrix_instance_f32 X;
	arm_mat_init_f32(&X, row, column, X_f32);
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	b299      	uxth	r1, r3
 80018c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f107 0014 	add.w	r0, r7, #20
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <calculate_LCseries+0x74>)
 80018d0:	f004 fb12 	bl	8005ef8 <arm_mat_init_f32>
	status = arm_mat_mult_f32(&A, &B, &X);
 80018d4:	f107 0214 	add.w	r2, r7, #20
 80018d8:	f107 011c 	add.w	r1, r7, #28
 80018dc:	463b      	mov	r3, r7
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 f928 	bl	8005b34 <arm_mat_mult_f32>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return X;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	461a      	mov	r2, r3
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000108 	.word	0x20000108

08001908 <calculate_LCparallel>:

arm_matrix_instance_f32 calculate_LCparallel(float32_t *Admittance, arm_matrix_instance_f32 A){	// Return {C; 1/L}
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	4639      	mov	r1, r7
 8001914:	e881 000c 	stmia.w	r1, {r2, r3}
	arm_status status;
	// Create B matrix
	int row = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
	//int row = 3;
	int column = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_matrix_instance_f32 B;	//B matrix of reactances
	arm_mat_init_f32(&B, row, column, Admittance);
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	b299      	uxth	r1, r3
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	b29a      	uxth	r2, r3
 8001928:	f107 001c 	add.w	r0, r7, #28
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f004 fae3 	bl	8005ef8 <arm_mat_init_f32>

	//Work out calc and return [L;1/C]
	row = 2;
 8001932:	2302      	movs	r3, #2
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
	column = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_matrix_instance_f32 X;
	arm_mat_init_f32(&X, row, column, X_f32);
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	b299      	uxth	r1, r3
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	b29a      	uxth	r2, r3
 8001942:	f107 0014 	add.w	r0, r7, #20
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <calculate_LCparallel+0x74>)
 8001948:	f004 fad6 	bl	8005ef8 <arm_mat_init_f32>
	status = arm_mat_mult_f32(&A, &B, &X);
 800194c:	f107 0214 	add.w	r2, r7, #20
 8001950:	f107 011c 	add.w	r1, r7, #28
 8001954:	463b      	mov	r3, r7
 8001956:	4618      	mov	r0, r3
 8001958:	f004 f8ec 	bl	8005b34 <arm_mat_mult_f32>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return X;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	461a      	mov	r2, r3
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800196e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	3730      	adds	r7, #48	; 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000108 	.word	0x20000108

08001980 <calculate_LC>:

struct RLC calculate_LC(float32_t *Reactance, arm_matrix_instance_f32 A, uint8_t type){	// Returns LC struct, [type == 0](Series); [type == 1](parallel)
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	af00      	add	r7, sp, #0
 8001986:	6278      	str	r0, [r7, #36]	; 0x24
 8001988:	f107 001c 	add.w	r0, r7, #28
 800198c:	e880 0006 	stmia.w	r0, {r1, r2}
 8001990:	76fb      	strb	r3, [r7, #27]
	arm_matrix_instance_f32 X;//Ans
	float32_t Admittance[2];
	struct RLC Passive = {0};
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
	if(type){
 800199e:	7efb      	ldrb	r3, [r7, #27]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d031      	beq.n	8001a08 <calculate_LC+0x88>
		for (int i = 0; i < 2; i++){
 80019a4:	2300      	movs	r3, #0
 80019a6:	657b      	str	r3, [r7, #84]	; 0x54
 80019a8:	e014      	b.n	80019d4 <calculate_LC+0x54>
			Admittance[i] = 1/Reactance[i];
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	4413      	add	r3, r2
 80019b2:	ed93 7a00 	vldr	s14, [r3]
 80019b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80019c6:	4413      	add	r3, r2
 80019c8:	3b20      	subs	r3, #32
 80019ca:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 2; i++){
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	3301      	adds	r3, #1
 80019d2:	657b      	str	r3, [r7, #84]	; 0x54
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	dde7      	ble.n	80019aa <calculate_LC+0x2a>
		}
		X = calculate_LCparallel(Admittance, A);
 80019da:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80019de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	cb0c      	ldmia	r3, {r2, r3}
 80019e8:	f7ff ff8e 	bl	8001908 <calculate_LCparallel>
		Passive.C = *(X.pData);
 80019ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
		Passive.L = 1/(*(X.pData+1));
 80019f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f4:	3304      	adds	r3, #4
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8001a06:	e01c      	b.n	8001a42 <calculate_LC+0xc2>
	} else {
		X = calculate_LCseries(Reactance, A);
 8001a08:	f107 0010 	add.w	r0, r7, #16
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	cb0c      	ldmia	r3, {r2, r3}
 8001a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a14:	f7ff ff3c 	bl	8001890 <calculate_LCseries>
 8001a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a1c:	f107 0210 	add.w	r2, r7, #16
 8001a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a24:	e883 0003 	stmia.w	r3, {r0, r1}
		Passive.L = *(X.pData);
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
		Passive.C = 1/(*(X.pData+1));
 8001a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a30:	3304      	adds	r3, #4
 8001a32:	ed93 7a00 	vldr	s14, [r3]
 8001a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	}
	return Passive;
 8001a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a50:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a56:	ee06 1a90 	vmov	s13, r1
 8001a5a:	ee07 2a10 	vmov	s14, r2
 8001a5e:	ee07 3a90 	vmov	s15, r3
}
 8001a62:	eeb0 0a66 	vmov.f32	s0, s13
 8001a66:	eef0 0a47 	vmov.f32	s1, s14
 8001a6a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a6e:	3758      	adds	r7, #88	; 0x58
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <measure_DUT_impedance>:

struct imp measure_DUT_impedance(int freq){
 8001a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a78:	b09c      	sub	sp, #112	; 0x70
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]

	int best_resistor = get_best_resistor(freq);
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff fb9c 	bl	80011bc <get_best_resistor>
 8001a84:	66b8      	str	r0, [r7, #104]	; 0x68
	//int best_resistor = 3;
	//output_number(best_resistor);

	int times_to_average = 10;
 8001a86:	230a      	movs	r3, #10
 8001a88:	667b      	str	r3, [r7, #100]	; 0x64

	struct voltage_measurement vdut_total = {0};
 8001a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
	struct voltage_measurement vrf_total = {0};
 8001a98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
	struct imp impedance = {0};
 8001aa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]

	for(int i = 0; i < times_to_average; i++){
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ab4:	e052      	b.n	8001b5c <measure_DUT_impedance+0xe8>
		struct voltage_measurement vdut = make_voltage_measurement(1,best_resistor,freq);
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff fbcc 	bl	8001258 <make_voltage_measurement>
 8001ac0:	eeb0 6a40 	vmov.f32	s12, s0
 8001ac4:	eef0 6a60 	vmov.f32	s13, s1
 8001ac8:	eeb0 7a41 	vmov.f32	s14, s2
 8001acc:	eef0 7a61 	vmov.f32	s15, s3
 8001ad0:	ed87 6b08 	vstr	d6, [r7, #32]
 8001ad4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		HAL_Delay(10);
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f000 ff15 	bl	8002908 <HAL_Delay>
		struct voltage_measurement vrf = make_voltage_measurement(2,best_resistor,freq);
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7ff fbb8 	bl	8001258 <make_voltage_measurement>
 8001ae8:	eeb0 6a40 	vmov.f32	s12, s0
 8001aec:	eef0 6a60 	vmov.f32	s13, s1
 8001af0:	eeb0 7a41 	vmov.f32	s14, s2
 8001af4:	eef0 7a61 	vmov.f32	s15, s3
 8001af8:	ed87 6b04 	vstr	d6, [r7, #16]
 8001afc:	ed87 7b06 	vstr	d7, [r7, #24]
		HAL_Delay(10);
 8001b00:	200a      	movs	r0, #10
 8001b02:	f000 ff01 	bl	8002908 <HAL_Delay>

		vdut_total.magnitude += vdut.magnitude;
 8001b06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b0e:	f7fe fbd5 	bl	80002bc <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		vdut_total.phase += vdut.phase;
 8001b1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b22:	f7fe fbcb 	bl	80002bc <__adddf3>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		vrf_total.magnitude += vrf.magnitude;
 8001b2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b36:	f7fe fbc1 	bl	80002bc <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		vrf_total.phase += vrf.phase;
 8001b42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4a:	f7fe fbb7 	bl	80002bc <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	for(int i = 0; i < times_to_average; i++){
 8001b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b58:	3301      	adds	r3, #1
 8001b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dba8      	blt.n	8001ab6 <measure_DUT_impedance+0x42>
	}

	//double DUT_resistance = (vm1_total/vm2_total)*get_resistor(best_resistor);
	vdut_total.phase = vdut_total.phase/times_to_average;
 8001b64:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b68:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001b6a:	f7fe fcf3 	bl	8000554 <__aeabi_i2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	f7fe fe81 	bl	800087c <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	vrf_total.phase = vrf_total.phase/times_to_average;
 8001b82:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b86:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001b88:	f7fe fce4 	bl	8000554 <__aeabi_i2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4640      	mov	r0, r8
 8001b92:	4649      	mov	r1, r9
 8001b94:	f7fe fe72 	bl	800087c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	//output_number(vrf_total.phase*1000);

	impedance.real = (vdut_total.magnitude/vrf_total.magnitude)*cos(vrf_total.phase - phase_Offset)*get_resistor(best_resistor) - 100;
 8001ba0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4692      	mov	sl, r2
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001bb8:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <measure_DUT_impedance+0x25c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fcdb 	bl	8000578 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	4649      	mov	r1, r9
 8001bca:	f7fe fb75 	bl	80002b8 <__aeabi_dsub>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ec43 2b17 	vmov	d7, r2, r3
 8001bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bda:	eef0 0a67 	vmov.f32	s1, s15
 8001bde:	f004 fb2f 	bl	8006240 <cos>
 8001be2:	ec53 2b10 	vmov	r2, r3, d0
 8001be6:	4650      	mov	r0, sl
 8001be8:	4659      	mov	r1, fp
 8001bea:	f7fe fd1d 	bl	8000628 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4690      	mov	r8, r2
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001bf8:	f7ff fd6a 	bl	80016d0 <get_resistor>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4640      	mov	r0, r8
 8001c02:	4649      	mov	r1, r9
 8001c04:	f7fe fd10 	bl	8000628 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <measure_DUT_impedance+0x260>)
 8001c16:	f7fe fb4f 	bl	80002b8 <__aeabi_dsub>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ffd9 	bl	8000bd8 <__aeabi_d2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
	//impedance.real = (vdut_total.magnitude/vrf_total.magnitude)*get_resistor(best_resistor) - 100;
	impedance.imag = -(vdut_total.magnitude/vrf_total.magnitude)*sin(vrf_total.phase - phase_Offset)*get_resistor(best_resistor);
 8001c2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c32:	f7fe fe23 	bl	800087c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <measure_DUT_impedance+0x25c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc95 	bl	8000578 <__aeabi_f2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4640      	mov	r0, r8
 8001c54:	4649      	mov	r1, r9
 8001c56:	f7fe fb2f 	bl	80002b8 <__aeabi_dsub>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	ec43 2b17 	vmov	d7, r2, r3
 8001c62:	eeb0 0a47 	vmov.f32	s0, s14
 8001c66:	eef0 0a67 	vmov.f32	s1, s15
 8001c6a:	f004 fb45 	bl	80062f8 <sin>
 8001c6e:	ec53 2b10 	vmov	r2, r3, d0
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fcd7 	bl	8000628 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4614      	mov	r4, r2
 8001c80:	461d      	mov	r5, r3
 8001c82:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001c84:	f7ff fd24 	bl	80016d0 <get_resistor>
 8001c88:	ec53 2b10 	vmov	r2, r3, d0
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f7fe fcca 	bl	8000628 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff9c 	bl	8000bd8 <__aeabi_d2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34

	return impedance;
 8001ca4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ca8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cb8:	ee07 2a10 	vmov	s14, r2
 8001cbc:	ee07 3a90 	vmov	s15, r3

	//return DUT_resistance - 100; //due the the 100 Ohms resistor in series with DUT
}
 8001cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc4:	eef0 0a67 	vmov.f32	s1, s15
 8001cc8:	3770      	adds	r7, #112	; 0x70
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd0:	20000090 	.word	0x20000090
 8001cd4:	40590000 	.word	0x40590000

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b096      	sub	sp, #88	; 0x58
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cde:	f000 fda1 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce2:	f000 f8f3 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce6:	f000 fad3 	bl	8002290 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cea:	f000 fa9b 	bl	8002224 <MX_DMA_Init>
  MX_ADC1_Init();
 8001cee:	f000 f95b 	bl	8001fa8 <MX_ADC1_Init>
  MX_DAC_Init();
 8001cf2:	f000 f9ab 	bl	800204c <MX_DAC_Init>
  MX_TIM2_Init();
 8001cf6:	f000 f9d3 	bl	80020a0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001cfa:	f000 fa69 	bl	80021d0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001cfe:	f000 fa1b 	bl	8002138 <MX_TIM4_Init>
  arm_matrix_instance_f32 IAtAAt;//Inverse of (A transpose *A)*A

  arm_status status;

  //Init A
  Rows = 2;
 8001d02:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <main+0x1d8>)
 8001d04:	2202      	movs	r2, #2
 8001d06:	601a      	str	r2, [r3, #0]
  //Rows = 3;
  Columns = 2;
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <main+0x1dc>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	601a      	str	r2, [r3, #0]
  arm_mat_init_f32(&A, Rows, Columns, (float32_t *)A_f32);
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <main+0x1d8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b299      	uxth	r1, r3
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <main+0x1dc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001d1e:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <main+0x1e0>)
 8001d20:	f004 f8ea 	bl	8005ef8 <arm_mat_init_f32>

  //Init transpose(A);
  Rows = 2;
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <main+0x1d8>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	601a      	str	r2, [r3, #0]
  Columns = 2;
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <main+0x1dc>)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
  //Columns = 3;
  arm_mat_init_f32(&At, Rows, Columns, At_f32);
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <main+0x1d8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b299      	uxth	r1, r3
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <main+0x1dc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d40:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <main+0x1e4>)
 8001d42:	f004 f8d9 	bl	8005ef8 <arm_mat_init_f32>
  status = arm_mat_trans_f32(&A, &At);
 8001d46:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001d4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fe7d 	bl	8005a50 <arm_mat_trans_f32>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  //Init transpose(A)*A
  Rows = 2;
 8001d5c:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <main+0x1d8>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	601a      	str	r2, [r3, #0]
  Columns = 2;
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <main+0x1dc>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	601a      	str	r2, [r3, #0]
  arm_mat_init_f32(&AtA, Rows, Columns, AtA_f32);
 8001d68:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <main+0x1d8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <main+0x1dc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001d78:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <main+0x1e8>)
 8001d7a:	f004 f8bd 	bl	8005ef8 <arm_mat_init_f32>
  status = arm_mat_mult_f32(&At, &A, &AtA);
 8001d7e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d82:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fed2 	bl	8005b34 <arm_mat_mult_f32>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  //Init inverse(transpose(A)*A)
  Rows = 2;
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <main+0x1d8>)
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
  Columns = 2;
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <main+0x1dc>)
 8001d9e:	2202      	movs	r2, #2
 8001da0:	601a      	str	r2, [r3, #0]
  arm_mat_init_f32(&IAtA, Rows, Columns, IAtA_f32);
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <main+0x1d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b299      	uxth	r1, r3
 8001da8:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <main+0x1dc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001db2:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <main+0x1ec>)
 8001db4:	f004 f8a0 	bl	8005ef8 <arm_mat_init_f32>
  status = arm_mat_inverse_f32(&AtA, &IAtA);
 8001db8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 ff5a 	bl	8005c7c <arm_mat_inverse_f32>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  //Init inverse(transpose(A)*A)*transpose(A)
  Rows = 2;
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <main+0x1d8>)
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
  Columns = 2;
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <main+0x1dc>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	601a      	str	r2, [r3, #0]
  //Columns = 3;
  arm_mat_init_f32(&IAtAAt, Rows, Columns, IAtAAt_f32);
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <main+0x1d8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b299      	uxth	r1, r3
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <main+0x1dc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001dea:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <main+0x1f0>)
 8001dec:	f004 f884 	bl	8005ef8 <arm_mat_init_f32>
  status = arm_mat_mult_f32(&IAtA, &At, &IAtAAt);
 8001df0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001df4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001df8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fe99 	bl	8005b34 <arm_mat_mult_f32>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		//struct voltage_measurement vm = {0};
		//vm = make_voltage_measurement(1, 3, SINE_100K);
		//vm = make_voltage_measurement(2, 3, SINE_100K);
		//struct imp imp1 = measure_DUT_impedance(SINE_10);
		//struct imp imp2 = measure_DUT_impedance(SINE_100);
		struct imp imp3 = measure_DUT_impedance(SINE_1K);
 8001e08:	f240 1045 	movw	r0, #325	; 0x145
 8001e0c:	f7ff fe32 	bl	8001a74 <measure_DUT_impedance>
 8001e10:	eeb0 7a40 	vmov.f32	s14, s0
 8001e14:	eef0 7a60 	vmov.f32	s15, s1
 8001e18:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001e1c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		struct imp imp4 = measure_DUT_impedance(SINE_10K);
 8001e20:	2021      	movs	r0, #33	; 0x21
 8001e22:	f7ff fe27 	bl	8001a74 <measure_DUT_impedance>
 8001e26:	eeb0 7a40 	vmov.f32	s14, s0
 8001e2a:	eef0 7a60 	vmov.f32	s15, s1
 8001e2e:	ed87 7a07 	vstr	s14, [r7, #28]
 8001e32:	edc7 7a08 	vstr	s15, [r7, #32]
		//output_number(imp1.imag);
		//output_number(imp2.imag);
		//output_number(imp1.real);
		//output_number(imp2.real);
		//float32_t Reactance[2] = {-2158, -249};
		float32_t Reactance[3] = {imp3.imag, imp4.imag};
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	617b      	str	r3, [r7, #20]
		struct RLC Ans = calculate_LC(Reactance, IAtAAt, 0);
 8001e4a:	f107 0010 	add.w	r0, r7, #16
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001e54:	ca06      	ldmia	r2, {r1, r2}
 8001e56:	f7ff fd93 	bl	8001980 <calculate_LC>
 8001e5a:	eef0 6a40 	vmov.f32	s13, s0
 8001e5e:	eeb0 7a60 	vmov.f32	s14, s1
 8001e62:	eef0 7a41 	vmov.f32	s15, s2
 8001e66:	edc7 6a01 	vstr	s13, [r7, #4]
 8001e6a:	ed87 7a02 	vstr	s14, [r7, #8]
 8001e6e:	edc7 7a03 	vstr	s15, [r7, #12]
		//struct RLC Ans = {0};
		//Ans.R = (imp1.real+imp2.real+imp3.real+imp4.real+imp5.real)/5;
		Ans.R = (imp3.real+imp4.real)/2;
 8001e72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e86:	edc7 7a01 	vstr	s15, [r7, #4]
		output_RLC(Ans);
 8001e8a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e96:	eeb0 0a66 	vmov.f32	s0, s13
 8001e9a:	eef0 0a47 	vmov.f32	s1, s14
 8001e9e:	eeb0 1a67 	vmov.f32	s2, s15
 8001ea2:	f7ff f905 	bl	80010b0 <output_RLC>
		//output_number(imp3.real);
		//output_number(imp4.real);
		HAL_Delay(100);
 8001ea6:	2064      	movs	r0, #100	; 0x64
 8001ea8:	f000 fd2e 	bl	8002908 <HAL_Delay>
	while (1) {
 8001eac:	e7ac      	b.n	8001e08 <main+0x130>
 8001eae:	bf00      	nop
 8001eb0:	2000063c 	.word	0x2000063c
 8001eb4:	200006dc 	.word	0x200006dc
 8001eb8:	08008d28 	.word	0x08008d28
 8001ebc:	200000a0 	.word	0x200000a0
 8001ec0:	200000f8 	.word	0x200000f8
 8001ec4:	2000062c 	.word	0x2000062c
 8001ec8:	20000640 	.word	0x20000640

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	2234      	movs	r2, #52	; 0x34
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 f9c0 	bl	8008260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <SystemClock_Config+0xd4>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a29      	ldr	r2, [pc, #164]	; (8001fa0 <SystemClock_Config+0xd4>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <SystemClock_Config+0xd4>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <SystemClock_Config+0xd8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <SystemClock_Config+0xd8>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <SystemClock_Config+0xd8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f30:	2301      	movs	r3, #1
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f34:	2310      	movs	r3, #16
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f40:	2310      	movs	r3, #16
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 fc68 	bl	8004830 <HAL_RCC_OscConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001f66:	f000 fa13 	bl	8002390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	2102      	movs	r1, #2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 f9dc 	bl	8004344 <HAL_RCC_ClockConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001f92:	f000 f9fd 	bl	8002390 <Error_Handler>
  }
}
 8001f96:	bf00      	nop
 8001f98:	3750      	adds	r7, #80	; 0x50
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <MX_ADC1_Init+0xa0>)
 8001fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fe4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001fec:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_ADC1_Init+0x9c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_ADC1_Init+0x9c>)
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_ADC1_Init+0x9c>)
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_ADC1_Init+0x9c>)
 800200e:	f000 fc9f 	bl	8002950 <HAL_ADC_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002018:	f000 f9ba 	bl	8002390 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800201c:	2300      	movs	r3, #0
 800201e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_ADC1_Init+0x9c>)
 800202e:	f000 fe51 	bl	8002cd4 <HAL_ADC_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002038:	f000 f9aa 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000170 	.word	0x20000170
 8002048:	40012000 	.word	0x40012000

0800204c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002052:	463b      	mov	r3, r7
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_DAC_Init+0x4c>)
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <MX_DAC_Init+0x50>)
 800205e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <MX_DAC_Init+0x4c>)
 8002062:	f001 f9f8 	bl	8003456 <HAL_DAC_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800206c:	f000 f990 	bl	8002390 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8002070:	232c      	movs	r3, #44	; 0x2c
 8002072:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002074:	2302      	movs	r3, #2
 8002076:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <MX_DAC_Init+0x4c>)
 8002080:	f001 faf8 	bl	8003674 <HAL_DAC_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800208a:	f000 f981 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200001b8 	.word	0x200001b8
 800209c:	40007400 	.word	0x40007400

080020a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM2_Init+0x94>)
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_TIM2_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM2_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM2_Init+0x94>)
 80020d2:	221e      	movs	r2, #30
 80020d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_TIM2_Init+0x94>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_TIM2_Init+0x94>)
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <MX_TIM2_Init+0x94>)
 80020e4:	f002 fe42 	bl	8004d6c <HAL_TIM_Base_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80020ee:	f000 f94f 	bl	8002390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	4619      	mov	r1, r3
 80020fe:	480d      	ldr	r0, [pc, #52]	; (8002134 <MX_TIM2_Init+0x94>)
 8002100:	f002 ff13 	bl	8004f2a <HAL_TIM_ConfigClockSource>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 f941 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800210e:	2320      	movs	r3, #32
 8002110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <MX_TIM2_Init+0x94>)
 800211c:	f003 f906 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002126:	f000 f933 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000650 	.word	0x20000650

08002138 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <MX_TIM4_Init+0x90>)
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <MX_TIM4_Init+0x94>)
 8002158:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <MX_TIM4_Init+0x90>)
 800215c:	2200      	movs	r2, #0
 800215e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <MX_TIM4_Init+0x90>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30;
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <MX_TIM4_Init+0x90>)
 8002168:	221e      	movs	r2, #30
 800216a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <MX_TIM4_Init+0x90>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <MX_TIM4_Init+0x90>)
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002178:	4813      	ldr	r0, [pc, #76]	; (80021c8 <MX_TIM4_Init+0x90>)
 800217a:	f002 fdf7 	bl	8004d6c <HAL_TIM_Base_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002184:	f000 f904 	bl	8002390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	4619      	mov	r1, r3
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <MX_TIM4_Init+0x90>)
 8002196:	f002 fec8 	bl	8004f2a <HAL_TIM_ConfigClockSource>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80021a0:	f000 f8f6 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021a4:	2320      	movs	r3, #32
 80021a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021ac:	463b      	mov	r3, r7
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_TIM4_Init+0x90>)
 80021b2:	f003 f8bb 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80021bc:	f000 f8e8 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200000b0 	.word	0x200000b0
 80021cc:	40000800 	.word	0x40000800

080021d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <MX_USART2_UART_Init+0x50>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_USART2_UART_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_USART2_UART_Init+0x4c>)
 8002208:	f003 f90c 	bl	8005424 <HAL_UART_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002212:	f000 f8bd 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000698 	.word	0x20000698
 8002220:	40004400 	.word	0x40004400

08002224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_DMA_Init+0x68>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <MX_DMA_Init+0x68>)
 8002234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_DMA_Init+0x68>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <MX_DMA_Init+0x68>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <MX_DMA_Init+0x68>)
 8002250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <MX_DMA_Init+0x68>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2010      	movs	r0, #16
 8002268:	f001 f8bf 	bl	80033ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800226c:	2010      	movs	r0, #16
 800226e:	f001 f8d8 	bl	8003422 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2038      	movs	r0, #56	; 0x38
 8002278:	f001 f8b7 	bl	80033ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800227c:	2038      	movs	r0, #56	; 0x38
 800227e:	f001 f8d0 	bl	8003422 <HAL_NVIC_EnableIRQ>

}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b35      	ldr	r3, [pc, #212]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a2d      	ldr	r2, [pc, #180]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <MX_GPIO_Init+0xf0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002300:	4820      	ldr	r0, [pc, #128]	; (8002384 <MX_GPIO_Init+0xf4>)
 8002302:	f002 f805 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8002306:	2200      	movs	r2, #0
 8002308:	f24e 0138 	movw	r1, #57400	; 0xe038
 800230c:	481e      	ldr	r0, [pc, #120]	; (8002388 <MX_GPIO_Init+0xf8>)
 800230e:	f001 ffff 	bl	8004310 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002318:	481c      	ldr	r0, [pc, #112]	; (800238c <MX_GPIO_Init+0xfc>)
 800231a:	f001 fff9 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800231e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4619      	mov	r1, r3
 8002336:	4813      	ldr	r0, [pc, #76]	; (8002384 <MX_GPIO_Init+0xf4>)
 8002338:	f001 fe56 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 800233c:	f24e 0338 	movw	r3, #57400	; 0xe038
 8002340:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4619      	mov	r1, r3
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <MX_GPIO_Init+0xf8>)
 8002356:	f001 fe47 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800235a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800235e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002360:	2311      	movs	r3, #17
 8002362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <MX_GPIO_Init+0xfc>)
 8002374:	f001 fe38 	bl	8003fe8 <HAL_GPIO_Init>

}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40020800 	.word	0x40020800
 8002388:	40020400 	.word	0x40020400
 800238c:	40020000 	.word	0x40020000

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002398:	e7fe      	b.n	8002398 <Error_Handler+0x8>
	...

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_MspInit+0x4c>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <HAL_MspInit+0x4c>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_ADC_MspInit+0xd8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d156      	bne.n	80024bc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_ADC_MspInit+0xdc>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <HAL_ADC_MspInit+0xdc>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_ADC_MspInit+0xdc>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_ADC_MspInit+0xdc>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <HAL_ADC_MspInit+0xdc>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_ADC_MspInit+0xdc>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002446:	2301      	movs	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244a:	2303      	movs	r3, #3
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	481c      	ldr	r0, [pc, #112]	; (80024cc <HAL_ADC_MspInit+0xe0>)
 800245a:	f001 fdc5 	bl	8003fe8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <HAL_ADC_MspInit+0xe8>)
 8002462:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002484:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 8002496:	2200      	movs	r2, #0
 8002498:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024a0:	480b      	ldr	r0, [pc, #44]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 80024a2:	f001 f9c1 	bl	8003828 <HAL_DMA_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80024ac:	f7ff ff70 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
 80024b6:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_ADC_MspInit+0xe4>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012000 	.word	0x40012000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	200005cc 	.word	0x200005cc
 80024d4:	40026410 	.word	0x40026410

080024d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <HAL_DAC_MspInit+0xdc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d157      	bne.n	80025aa <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_DAC_MspInit+0xe0>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a2d      	ldr	r2, [pc, #180]	; (80025b8 <HAL_DAC_MspInit+0xe0>)
 8002504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_DAC_MspInit+0xe0>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_DAC_MspInit+0xe0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_DAC_MspInit+0xe0>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_DAC_MspInit+0xe0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002532:	2310      	movs	r3, #16
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002536:	2303      	movs	r3, #3
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	481d      	ldr	r0, [pc, #116]	; (80025bc <HAL_DAC_MspInit+0xe4>)
 8002546:	f001 fd4f 	bl	8003fe8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_DAC_MspInit+0xec>)
 800254e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 8002552:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002556:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 8002566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 800256e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002572:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 8002576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 8002590:	f001 f94a 	bl	8003828 <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800259a:	f7ff fef9 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <HAL_DAC_MspInit+0xe8>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40007400 	.word	0x40007400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	20000110 	.word	0x20000110
 80025c4:	40026088 	.word	0x40026088

080025c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d8:	d10e      	bne.n	80025f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_TIM_Base_MspInit+0x64>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_TIM_Base_MspInit+0x64>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_TIM_Base_MspInit+0x64>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025f6:	e012      	b.n	800261e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <HAL_TIM_Base_MspInit+0x68>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10d      	bne.n	800261e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_TIM_Base_MspInit+0x64>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_TIM_Base_MspInit+0x64>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_TIM_Base_MspInit+0x64>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40000800 	.word	0x40000800

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_UART_MspInit+0x84>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d12b      	bne.n	80026ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_UART_MspInit+0x88>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_UART_MspInit+0x88>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800268e:	230c      	movs	r3, #12
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269e:	2307      	movs	r3, #7
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <HAL_UART_MspInit+0x8c>)
 80026aa:	f001 fc9d 	bl	8003fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026ae:	bf00      	nop
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x4>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002710:	f000 f8da 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}

08002718 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <DMA1_Stream5_IRQHandler+0x10>)
 800271e:	f001 f9f9 	bl	8003b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000110 	.word	0x20000110

0800272c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA2_Stream0_IRQHandler+0x10>)
 8002732:	f001 f9ef 	bl	8003b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200005cc 	.word	0x200005cc

08002740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <_sbrk+0x5c>)
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <_sbrk+0x60>)
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002770:	f005 fd4c 	bl	800820c <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <_sbrk+0x64>)
 8002790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20020000 	.word	0x20020000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	20000094 	.word	0x20000094
 80027a8:	200006f8 	.word	0x200006f8

080027ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <SystemInit+0x20>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <SystemInit+0x20>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027ec:	4c0b      	ldr	r4, [pc, #44]	; (800281c <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027fa:	f7ff ffd7 	bl	80027ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f005 fd0b 	bl	8008218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7ff fa69 	bl	8001cd8 <main>
  bx  lr    
 8002806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002814:	08008ff4 	.word	0x08008ff4
  ldr r2, =_sbss
 8002818:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800281c:	200006f4 	.word	0x200006f4

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <HAL_Init+0x40>)
 800282e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_Init+0x40>)
 800283a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_Init+0x40>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284c:	2003      	movs	r0, #3
 800284e:	f000 fdc1 	bl	80033d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002852:	200f      	movs	r0, #15
 8002854:	f000 f808 	bl	8002868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002858:	f7ff fda0 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00

08002868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x54>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_InitTick+0x58>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fdd9 	bl	800343e <HAL_SYSTICK_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d80a      	bhi.n	80028b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f000 fda1 	bl	80033ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <HAL_InitTick+0x5c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000008 	.word	0x20000008
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000008 	.word	0x20000008
 80028ec:	200006e0 	.word	0x200006e0

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	200006e0 	.word	0x200006e0

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000008 	.word	0x20000008

08002950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e033      	b.n	80029ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fd3c 	bl	80023ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fac8 	bl	8002f38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
 80029be:	e001      	b.n	80029c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Start_DMA+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0e9      	b.n	8002bca <HAL_ADC_Start_DMA+0x1f2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d018      	beq.n	8002a3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1c:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_ADC_Start_DMA+0x1fc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6d      	ldr	r2, [pc, #436]	; (8002bd8 <HAL_ADC_Start_DMA+0x200>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9a      	lsrs	r2, r3, #18
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a30:	e002      	b.n	8002a38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f9      	bne.n	8002a32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	f040 80a1 	bne.w	8002bb0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f023 0206 	bic.w	r2, r3, #6
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aca:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_ADC_Start_DMA+0x204>)
 8002acc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	4a43      	ldr	r2, [pc, #268]	; (8002be0 <HAL_ADC_Start_DMA+0x208>)
 8002ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <HAL_ADC_Start_DMA+0x20c>)
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <HAL_ADC_Start_DMA+0x210>)
 8002ae4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002aee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002afe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	334c      	adds	r3, #76	; 0x4c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f000 ff30 	bl	8003984 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d12a      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2d      	ldr	r2, [pc, #180]	; (8002bec <HAL_ADC_Start_DMA+0x214>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d015      	beq.n	8002b66 <HAL_ADC_Start_DMA+0x18e>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <HAL_ADC_Start_DMA+0x218>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x178>
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_ADC_Start_DMA+0x204>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_ADC_Start_DMA+0x21c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d136      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_ADC_Start_DMA+0x204>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d130      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d129      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	e020      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_ADC_Start_DMA+0x214>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d114      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	e00b      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0210 	orr.w	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	40012300 	.word	0x40012300
 8002be0:	08003131 	.word	0x08003131
 8002be4:	080031eb 	.word	0x080031eb
 8002be8:	08003207 	.word	0x08003207
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40012100 	.word	0x40012100
 8002bf4:	40012200 	.word	0x40012200

08002bf8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Stop_DMA+0x1a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e048      	b.n	8002ca4 <HAL_ADC_Stop_DMA+0xac>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d130      	bne.n	8002c9a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c46:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d10f      	bne.n	8002c76 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 feea 	bl	8003a34 <HAL_DMA_Abort>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c84:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1c>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e113      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x244>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d925      	bls.n	8002d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68d9      	ldr	r1, [r3, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	2207      	movs	r2, #7
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68d9      	ldr	r1, [r3, #12]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4403      	add	r3, r0
 8002d3e:	3b1e      	subs	r3, #30
 8002d40:	409a      	lsls	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	e022      	b.n	8002d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6919      	ldr	r1, [r3, #16]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	2207      	movs	r2, #7
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4403      	add	r3, r0
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d824      	bhi.n	8002de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	3b05      	subs	r3, #5
 8002dac:	221f      	movs	r2, #31
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b05      	subs	r3, #5
 8002dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
 8002de2:	e04c      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d824      	bhi.n	8002e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3b23      	subs	r3, #35	; 0x23
 8002dfe:	221f      	movs	r2, #31
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43da      	mvns	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	3b23      	subs	r3, #35	; 0x23
 8002e28:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
 8002e34:	e023      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	3b41      	subs	r3, #65	; 0x41
 8002e48:	221f      	movs	r2, #31
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	400a      	ands	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4618      	mov	r0, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	3b41      	subs	r3, #65	; 0x41
 8002e72:	fa00 f203 	lsl.w	r2, r0, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_ADC_ConfigChannel+0x250>)
 8002e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_ADC_ConfigChannel+0x254>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10f      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1d8>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b12      	cmp	r3, #18
 8002e92:	d10b      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_ADC_ConfigChannel+0x254>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d12b      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x23a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_ADC_ConfigChannel+0x258>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b11      	cmp	r3, #17
 8002ec6:	d122      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_ADC_ConfigChannel+0x258>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_ADC_ConfigChannel+0x25c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <HAL_ADC_ConfigChannel+0x260>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0c9a      	lsrs	r2, r3, #18
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40012300 	.word	0x40012300
 8002f28:	40012000 	.word	0x40012000
 8002f2c:	10000012 	.word	0x10000012
 8002f30:	20000000 	.word	0x20000000
 8002f34:	431bde83 	.word	0x431bde83

08002f38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f40:	4b79      	ldr	r3, [pc, #484]	; (8003128 <ADC_Init+0x1f0>)
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6899      	ldr	r1, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <ADC_Init+0x1f4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6899      	ldr	r1, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e00f      	b.n	8003036 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003034:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0202 	bic.w	r2, r2, #2
 8003044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6899      	ldr	r1, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7e1b      	ldrb	r3, [r3, #24]
 8003050:	005a      	lsls	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003072:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	3b01      	subs	r3, #1
 8003090:	035a      	lsls	r2, r3, #13
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	e007      	b.n	80030ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	051a      	lsls	r2, r3, #20
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ee:	025a      	lsls	r2, r3, #9
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	029a      	lsls	r2, r3, #10
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40012300 	.word	0x40012300
 800312c:	0f000001 	.word	0x0f000001

08003130 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003146:	2b00      	cmp	r3, #0
 8003148:	d13c      	bne.n	80031c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12b      	bne.n	80031bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d127      	bne.n	80031bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003184:	2b00      	cmp	r3, #0
 8003186:	d119      	bne.n	80031bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0220 	bic.w	r2, r2, #32
 8003196:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fe fb4f 	bl	8001860 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031c2:	e00e      	b.n	80031e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fd75 	bl	8002cc0 <HAL_ADC_ErrorCallback>
}
 80031d6:	e004      	b.n	80031e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fd57 	bl	8002cac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2240      	movs	r2, #64	; 0x40
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7ff fd4a 	bl	8002cc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800325c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003266:	4a04      	ldr	r2, [pc, #16]	; (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	60d3      	str	r3, [r2, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <__NVIC_GetPriorityGrouping+0x18>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 0307 	and.w	r3, r3, #7
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db0b      	blt.n	80032c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	4907      	ldr	r1, [pc, #28]	; (80032d0 <__NVIC_EnableIRQ+0x38>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2001      	movs	r0, #1
 80032ba:	fa00 f202 	lsl.w	r2, r0, r2
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000e100 	.word	0xe000e100

080032d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db0a      	blt.n	80032fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	490c      	ldr	r1, [pc, #48]	; (8003320 <__NVIC_SetPriority+0x4c>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	0112      	lsls	r2, r2, #4
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	440b      	add	r3, r1
 80032f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032fc:	e00a      	b.n	8003314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4908      	ldr	r1, [pc, #32]	; (8003324 <__NVIC_SetPriority+0x50>)
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	3b04      	subs	r3, #4
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	440b      	add	r3, r1
 8003312:	761a      	strb	r2, [r3, #24]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000e100 	.word	0xe000e100
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f1c3 0307 	rsb	r3, r3, #7
 8003342:	2b04      	cmp	r3, #4
 8003344:	bf28      	it	cs
 8003346:	2304      	movcs	r3, #4
 8003348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3304      	adds	r3, #4
 800334e:	2b06      	cmp	r3, #6
 8003350:	d902      	bls.n	8003358 <NVIC_EncodePriority+0x30>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3b03      	subs	r3, #3
 8003356:	e000      	b.n	800335a <NVIC_EncodePriority+0x32>
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	401a      	ands	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003370:	f04f 31ff 	mov.w	r1, #4294967295
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43d9      	mvns	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	4313      	orrs	r3, r2
         );
}
 8003382:	4618      	mov	r0, r3
 8003384:	3724      	adds	r7, #36	; 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a0:	d301      	bcc.n	80033a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00f      	b.n	80033c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <SysTick_Config+0x40>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ae:	210f      	movs	r1, #15
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f7ff ff8e 	bl	80032d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <SysTick_Config+0x40>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <SysTick_Config+0x40>)
 80033c0:	2207      	movs	r2, #7
 80033c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	e000e010 	.word	0xe000e010

080033d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff29 	bl	8003234 <__NVIC_SetPriorityGrouping>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033fc:	f7ff ff3e 	bl	800327c <__NVIC_GetPriorityGrouping>
 8003400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f7ff ff8e 	bl	8003328 <NVIC_EncodePriority>
 800340c:	4602      	mov	r2, r0
 800340e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff5d 	bl	80032d4 <__NVIC_SetPriority>
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff31 	bl	8003298 <__NVIC_EnableIRQ>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ffa2 	bl	8003390 <SysTick_Config>
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e014      	b.n	8003492 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff f82d 	bl	80024d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	795b      	ldrb	r3, [r3, #5]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_DAC_Start_DMA+0x22>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0ab      	b.n	8003616 <HAL_DAC_Start_DMA+0x17a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2202      	movs	r2, #2
 80034c8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d12f      	bne.n	8003530 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_DAC_Start_DMA+0x184>)
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a51      	ldr	r2, [pc, #324]	; (8003624 <HAL_DAC_Start_DMA+0x188>)
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a50      	ldr	r2, [pc, #320]	; (8003628 <HAL_DAC_Start_DMA+0x18c>)
 80034e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d013      	beq.n	8003526 <HAL_DAC_Start_DMA+0x8a>
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d845      	bhi.n	8003590 <HAL_DAC_Start_DMA+0xf4>
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_DAC_Start_DMA+0x76>
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d005      	beq.n	800351c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003510:	e03e      	b.n	8003590 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	613b      	str	r3, [r7, #16]
        break;
 800351a:	e03c      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	613b      	str	r3, [r7, #16]
        break;
 8003524:	e037      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3310      	adds	r3, #16
 800352c:	613b      	str	r3, [r7, #16]
        break;
 800352e:	e032      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a3d      	ldr	r2, [pc, #244]	; (800362c <HAL_DAC_Start_DMA+0x190>)
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <HAL_DAC_Start_DMA+0x194>)
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_DAC_Start_DMA+0x198>)
 8003546:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003556:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d013      	beq.n	8003586 <HAL_DAC_Start_DMA+0xea>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d817      	bhi.n	8003594 <HAL_DAC_Start_DMA+0xf8>
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_DAC_Start_DMA+0xd6>
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d005      	beq.n	800357c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003570:	e010      	b.n	8003594 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3314      	adds	r3, #20
 8003578:	613b      	str	r3, [r7, #16]
        break;
 800357a:	e00c      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3318      	adds	r3, #24
 8003582:	613b      	str	r3, [r7, #16]
        break;
 8003584:	e007      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	331c      	adds	r3, #28
 800358c:	613b      	str	r3, [r7, #16]
        break;
 800358e:	e002      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003594:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6898      	ldr	r0, [r3, #8]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	f000 f9e5 	bl	8003984 <HAL_DMA_Start_IT>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
 80035be:	e010      	b.n	80035e2 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68d8      	ldr	r0, [r3, #12]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	f000 f9d3 	bl	8003984 <HAL_DMA_Start_IT>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2201      	movs	r2, #1
 80035fc:	409a      	lsls	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e005      	b.n	8003614 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	08003713 	.word	0x08003713
 8003624:	08003735 	.word	0x08003735
 8003628:	08003751 	.word	0x08003751
 800362c:	080037bb 	.word	0x080037bb
 8003630:	080037dd 	.word	0x080037dd
 8003634:	080037f9 	.word	0x080037f9

08003638 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	795b      	ldrb	r3, [r3, #5]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_DAC_ConfigChannel+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e03c      	b.n	8003706 <HAL_DAC_ConfigChannel+0x92>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2202      	movs	r2, #2
 8003696:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4013      	ands	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	22c0      	movs	r2, #192	; 0xc0
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff ff89 	bl	8003638 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	711a      	strb	r2, [r3, #4]
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff82 	bl	800364c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f043 0204 	orr.w	r2, r3, #4
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ff78 	bl	8003660 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	711a      	strb	r2, [r3, #4]
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ffd8 	bl	800377e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	711a      	strb	r2, [r3, #4]
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ffd1 	bl	8003792 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff ffc7 	bl	80037a6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	711a      	strb	r2, [r3, #4]
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003834:	f7ff f85c 	bl	80028f0 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e099      	b.n	8003978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003864:	e00f      	b.n	8003886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003866:	f7ff f843 	bl	80028f0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b05      	cmp	r3, #5
 8003872:	d908      	bls.n	8003886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2203      	movs	r2, #3
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e078      	b.n	8003978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e8      	bne.n	8003866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4b38      	ldr	r3, [pc, #224]	; (8003980 <HAL_DMA_Init+0x158>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d107      	bne.n	80038f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	4313      	orrs	r3, r2
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0307 	bic.w	r3, r3, #7
 8003906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2b04      	cmp	r3, #4
 8003918:	d117      	bne.n	800394a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fadf 	bl	8003ef0 <DMA_CheckFifoParam>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003946:	2301      	movs	r3, #1
 8003948:	e016      	b.n	8003978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa96 	bl	8003e84 <DMA_CalcBaseAndBitshift>
 8003958:	4603      	mov	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	223f      	movs	r2, #63	; 0x3f
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	f010803f 	.word	0xf010803f

08003984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_DMA_Start_IT+0x26>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e040      	b.n	8003a2c <HAL_DMA_Start_IT+0xa8>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d12f      	bne.n	8003a1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa28 	bl	8003e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	409a      	lsls	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0216 	orr.w	r2, r2, #22
 80039f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e005      	b.n	8003a2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
 8003a28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a42:	f7fe ff55 	bl	80028f0 <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d008      	beq.n	8003a66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e052      	b.n	8003b0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0216 	bic.w	r2, r2, #22
 8003a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_DMA_Abort+0x62>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0208 	bic.w	r2, r2, #8
 8003aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab6:	e013      	b.n	8003ae0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ab8:	f7fe ff1a 	bl	80028f0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d90c      	bls.n	8003ae0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e015      	b.n	8003b0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e4      	bne.n	8003ab8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	223f      	movs	r2, #63	; 0x3f
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b20:	4b92      	ldr	r3, [pc, #584]	; (8003d6c <HAL_DMA_IRQHandler+0x258>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a92      	ldr	r2, [pc, #584]	; (8003d70 <HAL_DMA_IRQHandler+0x25c>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	2208      	movs	r2, #8
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01a      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b78:	f043 0201 	orr.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	2201      	movs	r2, #1
 8003b86:	409a      	lsls	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d012      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	f043 0202 	orr.w	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2204      	movs	r2, #4
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	2204      	movs	r2, #4
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0204 	orr.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d043      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d03c      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	2210      	movs	r2, #16
 8003c10:	409a      	lsls	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d024      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
 8003c42:	e01f      	b.n	8003c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01b      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
 8003c54:	e016      	b.n	8003c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0208 	bic.w	r2, r2, #8
 8003c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	2220      	movs	r2, #32
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 808e 	beq.w	8003db2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8086 	beq.w	8003db2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	2220      	movs	r2, #32
 8003cac:	409a      	lsls	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d136      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0216 	bic.w	r2, r2, #22
 8003ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_DMA_IRQHandler+0x1da>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0208 	bic.w	r2, r2, #8
 8003cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	223f      	movs	r2, #63	; 0x3f
 8003d04:	409a      	lsls	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d07d      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
        }
        return;
 8003d2a:	e078      	b.n	8003e1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01c      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d108      	bne.n	8003d5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d030      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
 8003d58:	e02b      	b.n	8003db2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d027      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e022      	b.n	8003db2 <HAL_DMA_IRQHandler+0x29e>
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0210 	bic.w	r2, r2, #16
 8003d90:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d032      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d022      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d307      	bcc.n	8003dfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f2      	bne.n	8003dde <HAL_DMA_IRQHandler+0x2ca>
 8003df8:	e000      	b.n	8003dfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dfa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
 8003e1c:	e000      	b.n	8003e20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e1e:	bf00      	nop
    }
  }
}
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop

08003e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d108      	bne.n	8003e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e66:	e007      	b.n	8003e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	3b10      	subs	r3, #16
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <DMA_CalcBaseAndBitshift+0x68>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d909      	bls.n	8003ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	1d1a      	adds	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec4:	e007      	b.n	8003ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	aaaaaaab 	.word	0xaaaaaaab
 8003eec:	08008d50 	.word	0x08008d50

08003ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11f      	bne.n	8003f4a <DMA_CheckFifoParam+0x5a>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d856      	bhi.n	8003fbe <DMA_CheckFifoParam+0xce>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <DMA_CheckFifoParam+0x28>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f3b 	.word	0x08003f3b
 8003f20:	08003f29 	.word	0x08003f29
 8003f24:	08003fbf 	.word	0x08003fbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d046      	beq.n	8003fc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f38:	e043      	b.n	8003fc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f42:	d140      	bne.n	8003fc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e03d      	b.n	8003fc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	d121      	bne.n	8003f98 <DMA_CheckFifoParam+0xa8>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d837      	bhi.n	8003fca <DMA_CheckFifoParam+0xda>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <DMA_CheckFifoParam+0x70>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f77 	.word	0x08003f77
 8003f68:	08003f71 	.word	0x08003f71
 8003f6c:	08003f89 	.word	0x08003f89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e030      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d025      	beq.n	8003fce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f86:	e022      	b.n	8003fce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f90:	d11f      	bne.n	8003fd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f96:	e01c      	b.n	8003fd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d903      	bls.n	8003fa6 <DMA_CheckFifoParam+0xb6>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d003      	beq.n	8003fac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fa4:	e018      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8003faa:	e015      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00e      	beq.n	8003fd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbc:	e00b      	b.n	8003fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e00a      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e008      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fc6:	bf00      	nop
 8003fc8:	e006      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e004      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop

08003fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e165      	b.n	80042d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004004:	2201      	movs	r2, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	429a      	cmp	r2, r3
 800401e:	f040 8154 	bne.w	80042ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d005      	beq.n	800403a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	2b02      	cmp	r3, #2
 8004038:	d130      	bne.n	800409c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004070:	2201      	movs	r2, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 0201 	and.w	r2, r3, #1
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d017      	beq.n	80040d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d123      	bne.n	800412c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	08da      	lsrs	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3208      	adds	r2, #8
 80040ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	220f      	movs	r2, #15
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	08da      	lsrs	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3208      	adds	r2, #8
 8004126:	69b9      	ldr	r1, [r7, #24]
 8004128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	2203      	movs	r2, #3
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0203 	and.w	r2, r3, #3
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80ae 	beq.w	80042ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b5d      	ldr	r3, [pc, #372]	; (80042e8 <HAL_GPIO_Init+0x300>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	4a5c      	ldr	r2, [pc, #368]	; (80042e8 <HAL_GPIO_Init+0x300>)
 8004178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417c:	6453      	str	r3, [r2, #68]	; 0x44
 800417e:	4b5a      	ldr	r3, [pc, #360]	; (80042e8 <HAL_GPIO_Init+0x300>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800418a:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_GPIO_Init+0x304>)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	3302      	adds	r3, #2
 8004192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	220f      	movs	r2, #15
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4f      	ldr	r2, [pc, #316]	; (80042f0 <HAL_GPIO_Init+0x308>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d025      	beq.n	8004202 <HAL_GPIO_Init+0x21a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <HAL_GPIO_Init+0x30c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <HAL_GPIO_Init+0x216>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4d      	ldr	r2, [pc, #308]	; (80042f8 <HAL_GPIO_Init+0x310>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d019      	beq.n	80041fa <HAL_GPIO_Init+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4c      	ldr	r2, [pc, #304]	; (80042fc <HAL_GPIO_Init+0x314>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_GPIO_Init+0x20e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4b      	ldr	r2, [pc, #300]	; (8004300 <HAL_GPIO_Init+0x318>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00d      	beq.n	80041f2 <HAL_GPIO_Init+0x20a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <HAL_GPIO_Init+0x31c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <HAL_GPIO_Init+0x206>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a49      	ldr	r2, [pc, #292]	; (8004308 <HAL_GPIO_Init+0x320>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_GPIO_Init+0x202>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e00c      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 80041ea:	2307      	movs	r3, #7
 80041ec:	e00a      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 80041ee:	2305      	movs	r3, #5
 80041f0:	e008      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 80041f2:	2304      	movs	r3, #4
 80041f4:	e006      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 80041f6:	2303      	movs	r3, #3
 80041f8:	e004      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e002      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_GPIO_Init+0x21c>
 8004202:	2300      	movs	r3, #0
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	f002 0203 	and.w	r2, r2, #3
 800420a:	0092      	lsls	r2, r2, #2
 800420c:	4093      	lsls	r3, r2
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004214:	4935      	ldr	r1, [pc, #212]	; (80042ec <HAL_GPIO_Init+0x304>)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_GPIO_Init+0x324>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004246:	4a31      	ldr	r2, [pc, #196]	; (800430c <HAL_GPIO_Init+0x324>)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800424c:	4b2f      	ldr	r3, [pc, #188]	; (800430c <HAL_GPIO_Init+0x324>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_GPIO_Init+0x324>)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004276:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_GPIO_Init+0x324>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800429a:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_GPIO_Init+0x324>)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_GPIO_Init+0x324>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042c4:	4a11      	ldr	r2, [pc, #68]	; (800430c <HAL_GPIO_Init+0x324>)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3301      	adds	r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b0f      	cmp	r3, #15
 80042d4:	f67f ae96 	bls.w	8004004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3724      	adds	r7, #36	; 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40013800 	.word	0x40013800
 80042f0:	40020000 	.word	0x40020000
 80042f4:	40020400 	.word	0x40020400
 80042f8:	40020800 	.word	0x40020800
 80042fc:	40020c00 	.word	0x40020c00
 8004300:	40021000 	.word	0x40021000
 8004304:	40021400 	.word	0x40021400
 8004308:	40021800 	.word	0x40021800
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800432c:	e003      	b.n	8004336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	041a      	lsls	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fe fa5c 	bl	80028f0 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fe fa58 	bl	80028f0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f855 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490a      	ldr	r1, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f9bc 	bl	8002868 <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	08008d38 	.word	0x08008d38
 8004508:	20000000 	.word	0x20000000
 800450c:	20000004 	.word	0x20000004

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_GetHCLKFreq+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000000 	.word	0x20000000

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800452c:	f7ff fff0 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4903      	ldr	r1, [pc, #12]	; (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08008d48 	.word	0x08008d48

08004550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004554:	f7ff ffdc 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	08008d48 	.word	0x08008d48

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800457c:	b087      	sub	sp, #28
 800457e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004580:	2600      	movs	r6, #0
 8004582:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8004584:	2600      	movs	r6, #0
 8004586:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8004588:	2600      	movs	r6, #0
 800458a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 800458c:	2600      	movs	r6, #0
 800458e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004590:	2600      	movs	r6, #0
 8004592:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004594:	4ea3      	ldr	r6, [pc, #652]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004596:	68b6      	ldr	r6, [r6, #8]
 8004598:	f006 060c 	and.w	r6, r6, #12
 800459c:	2e0c      	cmp	r6, #12
 800459e:	f200 8137 	bhi.w	8004810 <HAL_RCC_GetSysClockFreq+0x298>
 80045a2:	f20f 0c08 	addw	ip, pc, #8
 80045a6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	08004811 	.word	0x08004811
 80045b4:	08004811 	.word	0x08004811
 80045b8:	08004811 	.word	0x08004811
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	08004811 	.word	0x08004811
 80045c4:	08004811 	.word	0x08004811
 80045c8:	08004811 	.word	0x08004811
 80045cc:	080045ed 	.word	0x080045ed
 80045d0:	08004811 	.word	0x08004811
 80045d4:	08004811 	.word	0x08004811
 80045d8:	08004811 	.word	0x08004811
 80045dc:	08004703 	.word	0x08004703
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b91      	ldr	r3, [pc, #580]	; (8004828 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80045e2:	613b      	str	r3, [r7, #16]
       break;
 80045e4:	e117      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e6:	4b91      	ldr	r3, [pc, #580]	; (800482c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80045e8:	613b      	str	r3, [r7, #16]
      break;
 80045ea:	e114      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ec:	4b8d      	ldr	r3, [pc, #564]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f6:	4b8b      	ldr	r3, [pc, #556]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d024      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004602:	4b88      	ldr	r3, [pc, #544]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	461a      	mov	r2, r3
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004612:	f04f 0500 	mov.w	r5, #0
 8004616:	ea02 0004 	and.w	r0, r2, r4
 800461a:	ea03 0105 	and.w	r1, r3, r5
 800461e:	4b83      	ldr	r3, [pc, #524]	; (800482c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004620:	fb03 f201 	mul.w	r2, r3, r1
 8004624:	2300      	movs	r3, #0
 8004626:	fb03 f300 	mul.w	r3, r3, r0
 800462a:	4413      	add	r3, r2
 800462c:	4a7f      	ldr	r2, [pc, #508]	; (800482c <HAL_RCC_GetSysClockFreq+0x2b4>)
 800462e:	fba0 0102 	umull	r0, r1, r0, r2
 8004632:	440b      	add	r3, r1
 8004634:	4619      	mov	r1, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	461a      	mov	r2, r3
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f7fc fb1b 	bl	8000c78 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4613      	mov	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e04c      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464c:	4b75      	ldr	r3, [pc, #468]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	461a      	mov	r2, r3
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	f240 10ff 	movw	r0, #511	; 0x1ff
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	ea02 0800 	and.w	r8, r2, r0
 8004664:	ea03 0901 	and.w	r9, r3, r1
 8004668:	4640      	mov	r0, r8
 800466a:	4649      	mov	r1, r9
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	014b      	lsls	r3, r1, #5
 8004676:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800467a:	0142      	lsls	r2, r0, #5
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	ebb0 0008 	subs.w	r0, r0, r8
 8004684:	eb61 0109 	sbc.w	r1, r1, r9
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	018b      	lsls	r3, r1, #6
 8004692:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004696:	0182      	lsls	r2, r0, #6
 8004698:	1a12      	subs	r2, r2, r0
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	f04f 0000 	mov.w	r0, #0
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	00d9      	lsls	r1, r3, #3
 80046a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ac:	00d0      	lsls	r0, r2, #3
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	eb12 0208 	adds.w	r2, r2, r8
 80046b6:	eb43 0309 	adc.w	r3, r3, r9
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	0299      	lsls	r1, r3, #10
 80046c4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046c8:	0290      	lsls	r0, r2, #10
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	f7fc facd 	bl	8000c78 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4613      	mov	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046e6:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	3301      	adds	r3, #1
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	613b      	str	r3, [r7, #16]
      break;
 8004700:	e089      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004702:	4948      	ldr	r1, [pc, #288]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004704:	6849      	ldr	r1, [r1, #4]
 8004706:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800470a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800470c:	4945      	ldr	r1, [pc, #276]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800470e:	6849      	ldr	r1, [r1, #4]
 8004710:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004714:	2900      	cmp	r1, #0
 8004716:	d024      	beq.n	8004762 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004718:	4942      	ldr	r1, [pc, #264]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800471a:	6849      	ldr	r1, [r1, #4]
 800471c:	0989      	lsrs	r1, r1, #6
 800471e:	4608      	mov	r0, r1
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004728:	f04f 0500 	mov.w	r5, #0
 800472c:	ea00 0204 	and.w	r2, r0, r4
 8004730:	ea01 0305 	and.w	r3, r1, r5
 8004734:	493d      	ldr	r1, [pc, #244]	; (800482c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004736:	fb01 f003 	mul.w	r0, r1, r3
 800473a:	2100      	movs	r1, #0
 800473c:	fb01 f102 	mul.w	r1, r1, r2
 8004740:	1844      	adds	r4, r0, r1
 8004742:	493a      	ldr	r1, [pc, #232]	; (800482c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004744:	fba2 0101 	umull	r0, r1, r2, r1
 8004748:	1863      	adds	r3, r4, r1
 800474a:	4619      	mov	r1, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	461a      	mov	r2, r3
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	f7fc fa90 	bl	8000c78 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e04a      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004762:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	461a      	mov	r2, r3
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	ea02 0400 	and.w	r4, r2, r0
 800477a:	ea03 0501 	and.w	r5, r3, r1
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	014b      	lsls	r3, r1, #5
 800478c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004790:	0142      	lsls	r2, r0, #5
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	1b00      	subs	r0, r0, r4
 8004798:	eb61 0105 	sbc.w	r1, r1, r5
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	018b      	lsls	r3, r1, #6
 80047a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047aa:	0182      	lsls	r2, r0, #6
 80047ac:	1a12      	subs	r2, r2, r0
 80047ae:	eb63 0301 	sbc.w	r3, r3, r1
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	00d9      	lsls	r1, r3, #3
 80047bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047c0:	00d0      	lsls	r0, r2, #3
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	1912      	adds	r2, r2, r4
 80047c8:	eb45 0303 	adc.w	r3, r5, r3
 80047cc:	f04f 0000 	mov.w	r0, #0
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	0299      	lsls	r1, r3, #10
 80047d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047da:	0290      	lsls	r0, r2, #10
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	f7fc fa44 	bl	8000c78 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4613      	mov	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0f1b      	lsrs	r3, r3, #28
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	613b      	str	r3, [r7, #16]
      break;
 800480e:	e002      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8004812:	613b      	str	r3, [r7, #16]
      break;
 8004814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004816:	693b      	ldr	r3, [r7, #16]
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800
 8004828:	00f42400 	.word	0x00f42400
 800482c:	017d7840 	.word	0x017d7840

08004830 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e28d      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8083 	beq.w	8004956 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004850:	4b94      	ldr	r3, [pc, #592]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b04      	cmp	r3, #4
 800485a:	d019      	beq.n	8004890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800485c:	4b91      	ldr	r3, [pc, #580]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004864:	2b08      	cmp	r3, #8
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004868:	4b8e      	ldr	r3, [pc, #568]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d00c      	beq.n	8004890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004876:	4b8b      	ldr	r3, [pc, #556]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d112      	bne.n	80048a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004882:	4b88      	ldr	r3, [pc, #544]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488e:	d10b      	bne.n	80048a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	4b84      	ldr	r3, [pc, #528]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05b      	beq.n	8004954 <HAL_RCC_OscConfig+0x124>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d157      	bne.n	8004954 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e25a      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x90>
 80048b2:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7b      	ldr	r2, [pc, #492]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e01d      	b.n	80048fc <HAL_RCC_OscConfig+0xcc>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0xb4>
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b73      	ldr	r3, [pc, #460]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a72      	ldr	r2, [pc, #456]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0xcc>
 80048e4:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6b      	ldr	r2, [pc, #428]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fff4 	bl	80028f0 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490c:	f7fd fff0 	bl	80028f0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e21f      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0xdc>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd ffe0 	bl	80028f0 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004934:	f7fd ffdc 	bl	80028f0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e20b      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	4b57      	ldr	r3, [pc, #348]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x104>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d06f      	beq.n	8004a42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004962:	4b50      	ldr	r3, [pc, #320]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800496e:	4b4d      	ldr	r3, [pc, #308]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004976:	2b08      	cmp	r3, #8
 8004978:	d105      	bne.n	8004986 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d11c      	bne.n	80049cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b44      	ldr	r3, [pc, #272]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x186>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e1d3      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4937      	ldr	r1, [pc, #220]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	e03a      	b.n	8004a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_RCC_OscConfig+0x278>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fd ff89 	bl	80028f0 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fd ff85 	bl	80028f0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1b4      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4925      	ldr	r1, [pc, #148]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x278>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd ff68 	bl	80028f0 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fd ff64 	bl	80028f0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e193      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d036      	beq.n	8004abc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_RCC_OscConfig+0x27c>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd ff48 	bl	80028f0 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fd ff44 	bl	80028f0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e173      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x234>
 8004a82:	e01b      	b.n	8004abc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_OscConfig+0x27c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd ff31 	bl	80028f0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e00e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd ff2d 	bl	80028f0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d907      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e15c      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	42470000 	.word	0x42470000
 8004aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b8a      	ldr	r3, [pc, #552]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ea      	bne.n	8004a92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8097 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b83      	ldr	r3, [pc, #524]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	4b7f      	ldr	r3, [pc, #508]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a7e      	ldr	r2, [pc, #504]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b7c      	ldr	r3, [pc, #496]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	4b79      	ldr	r3, [pc, #484]	; (8004ce0 <HAL_RCC_OscConfig+0x4b0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d118      	bne.n	8004b38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b06:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <HAL_RCC_OscConfig+0x4b0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <HAL_RCC_OscConfig+0x4b0>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b12:	f7fd feed 	bl	80028f0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fd fee9 	bl	80028f0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e118      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ce0 <HAL_RCC_OscConfig+0x4b0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCC_OscConfig+0x31e>
 8004b40:	4b66      	ldr	r3, [pc, #408]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCC_OscConfig+0x358>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x340>
 8004b56:	4b61      	ldr	r3, [pc, #388]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a60      	ldr	r2, [pc, #384]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	f043 0304 	orr.w	r3, r3, #4
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
 8004b62:	4b5e      	ldr	r3, [pc, #376]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	4a5d      	ldr	r2, [pc, #372]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCC_OscConfig+0x358>
 8004b70:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a59      	ldr	r2, [pc, #356]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	4b57      	ldr	r3, [pc, #348]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a56      	ldr	r2, [pc, #344]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004b82:	f023 0304 	bic.w	r3, r3, #4
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fd feae 	bl	80028f0 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fd feaa 	bl	80028f0 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0d7      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ee      	beq.n	8004b98 <HAL_RCC_OscConfig+0x368>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbc:	f7fd fe98 	bl	80028f0 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc4:	f7fd fe94 	bl	80028f0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0c1      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ee      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bec:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	4a3a      	ldr	r2, [pc, #232]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80ad 	beq.w	8004d5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c02:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d060      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d145      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b33      	ldr	r3, [pc, #204]	; (8004ce4 <HAL_RCC_OscConfig+0x4b4>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fe68 	bl	80028f0 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fd fe64 	bl	80028f0 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e093      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	071b      	lsls	r3, r3, #28
 8004c6e:	491b      	ldr	r1, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCC_OscConfig+0x4b4>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fd fe39 	bl	80028f0 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fd fe35 	bl	80028f0 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e064      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x452>
 8004ca0:	e05c      	b.n	8004d5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_RCC_OscConfig+0x4b4>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fe22 	bl	80028f0 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fd fe1e 	bl	80028f0 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e04d      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x480>
 8004cce:	e045      	b.n	8004d5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e040      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <HAL_RCC_OscConfig+0x538>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d030      	beq.n	8004d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d129      	bne.n	8004d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d122      	bne.n	8004d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d119      	bne.n	8004d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	3b01      	subs	r3, #1
 8004d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d10f      	bne.n	8004d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e041      	b.n	8004e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd fc18 	bl	80025c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 f984 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e046      	b.n	8004eb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a23      	ldr	r2, [pc, #140]	; (8004ec0 <HAL_TIM_Base_Start+0xb4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d022      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d01d      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <HAL_TIM_Base_Start+0xb8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <HAL_TIM_Base_Start+0xbc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <HAL_TIM_Base_Start+0xc0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_TIM_Base_Start+0xc4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <HAL_TIM_Base_Start+0xc8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_TIM_Base_Start+0xcc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e007      	b.n	8004eb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800

08004edc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <HAL_TIM_Base_Stop+0x38>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	f240 4344 	movw	r3, #1092	; 0x444
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_Base_Stop+0x38>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_ConfigClockSource+0x1c>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0b4      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x186>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7e:	d03e      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0xd4>
 8004f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f84:	f200 8087 	bhi.w	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	f000 8086 	beq.w	800509c <HAL_TIM_ConfigClockSource+0x172>
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d87f      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004f96:	2b70      	cmp	r3, #112	; 0x70
 8004f98:	d01a      	beq.n	8004fd0 <HAL_TIM_ConfigClockSource+0xa6>
 8004f9a:	2b70      	cmp	r3, #112	; 0x70
 8004f9c:	d87b      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9e:	2b60      	cmp	r3, #96	; 0x60
 8004fa0:	d050      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x11a>
 8004fa2:	2b60      	cmp	r3, #96	; 0x60
 8004fa4:	d877      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa6:	2b50      	cmp	r3, #80	; 0x50
 8004fa8:	d03c      	beq.n	8005024 <HAL_TIM_ConfigClockSource+0xfa>
 8004faa:	2b50      	cmp	r3, #80	; 0x50
 8004fac:	d873      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d058      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0x13a>
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d86f      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb6:	2b30      	cmp	r3, #48	; 0x30
 8004fb8:	d064      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x15a>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d86b      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d060      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d867      	bhi.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d05c      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x15a>
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d05a      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x15a>
 8004fce:	e062      	b.n	8005096 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f000 f984 	bl	80052ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]
      break;
 8004ffc:	e04f      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6899      	ldr	r1, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f000 f96d 	bl	80052ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005020:	609a      	str	r2, [r3, #8]
      break;
 8005022:	e03c      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	461a      	mov	r2, r3
 8005032:	f000 f8e1 	bl	80051f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2150      	movs	r1, #80	; 0x50
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f93a 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8005042:	e02c      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	461a      	mov	r2, r3
 8005052:	f000 f900 	bl	8005256 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2160      	movs	r1, #96	; 0x60
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f92a 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8005062:	e01c      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	461a      	mov	r2, r3
 8005072:	f000 f8c1 	bl	80051f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2140      	movs	r1, #64	; 0x40
 800507c:	4618      	mov	r0, r3
 800507e:	f000 f91a 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8005082:	e00c      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 f911 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8005094:	e003      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
      break;
 800509a:	e000      	b.n	800509e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800509c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a40      	ldr	r2, [pc, #256]	; (80051cc <TIM_Base_SetConfig+0x114>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d00f      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3d      	ldr	r2, [pc, #244]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <TIM_Base_SetConfig+0x120>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <TIM_Base_SetConfig+0x124>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <TIM_Base_SetConfig+0x114>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d027      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d023      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2b      	ldr	r2, [pc, #172]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01f      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <TIM_Base_SetConfig+0x120>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a29      	ldr	r2, [pc, #164]	; (80051dc <TIM_Base_SetConfig+0x124>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d017      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a28      	ldr	r2, [pc, #160]	; (80051e0 <TIM_Base_SetConfig+0x128>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <TIM_Base_SetConfig+0x12c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a26      	ldr	r2, [pc, #152]	; (80051e8 <TIM_Base_SetConfig+0x130>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a25      	ldr	r2, [pc, #148]	; (80051ec <TIM_Base_SetConfig+0x134>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <TIM_Base_SetConfig+0x138>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <TIM_Base_SetConfig+0x13c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <TIM_Base_SetConfig+0x114>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0c      	ldr	r2, [pc, #48]	; (80051dc <TIM_Base_SetConfig+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800
 80051ec:	40001800 	.word	0x40001800
 80051f0:	40001c00 	.word	0x40001c00
 80051f4:	40002000 	.word	0x40002000

080051f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 030a 	bic.w	r3, r3, #10
 8005234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005256:	b480      	push	{r7}
 8005258:	b087      	sub	sp, #28
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	031b      	lsls	r3, r3, #12
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f043 0307 	orr.w	r3, r3, #7
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	021a      	lsls	r2, r3, #8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	431a      	orrs	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e05a      	b.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d01d      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10c      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800

08005424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e03f      	b.n	80054b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fd f8f2 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f929 	bl	80056c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800547c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800548c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800549c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08a      	sub	sp, #40	; 0x28
 80054c2:	af02      	add	r7, sp, #8
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d17c      	bne.n	80055d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_UART_Transmit+0x2c>
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e075      	b.n	80055da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Transmit+0x3e>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e06e      	b.n	80055da <HAL_UART_Transmit+0x11c>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2221      	movs	r2, #33	; 0x21
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005512:	f7fd f9ed 	bl	80028f0 <HAL_GetTick>
 8005516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	88fa      	ldrh	r2, [r7, #6]
 8005522:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	d108      	bne.n	8005540 <HAL_UART_Transmit+0x82>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	e003      	b.n	8005548 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005550:	e02a      	b.n	80055a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	2180      	movs	r1, #128	; 0x80
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f840 	bl	80055e2 <UART_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e036      	b.n	80055da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	3302      	adds	r3, #2
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e007      	b.n	800559a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1cf      	bne.n	8005552 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2140      	movs	r1, #64	; 0x40
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f810 	bl	80055e2 <UART_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e006      	b.n	80055da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b090      	sub	sp, #64	; 0x40
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	e050      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d04c      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x30>
 8005602:	f7fd f975 	bl	80028f0 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560e:	429a      	cmp	r2, r3
 8005610:	d241      	bcs.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005632:	637a      	str	r2, [r7, #52]	; 0x34
 8005634:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3314      	adds	r3, #20
 800564c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	613b      	str	r3, [r7, #16]
   return(result);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005666:	623a      	str	r2, [r7, #32]
 8005668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	69f9      	ldr	r1, [r7, #28]
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	61bb      	str	r3, [r7, #24]
   return(result);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e00f      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d09f      	beq.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3740      	adds	r7, #64	; 0x40
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	b09f      	sub	sp, #124	; 0x7c
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	68d9      	ldr	r1, [r3, #12]
 80056d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	ea40 0301 	orr.w	r3, r0, r1
 80056e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005704:	f021 010c 	bic.w	r1, r1, #12
 8005708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570e:	430b      	orrs	r3, r1
 8005710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	6999      	ldr	r1, [r3, #24]
 8005720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	ea40 0301 	orr.w	r3, r0, r1
 8005728:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4bc5      	ldr	r3, [pc, #788]	; (8005a44 <UART_SetConfig+0x384>)
 8005730:	429a      	cmp	r2, r3
 8005732:	d004      	beq.n	800573e <UART_SetConfig+0x7e>
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4bc3      	ldr	r3, [pc, #780]	; (8005a48 <UART_SetConfig+0x388>)
 800573a:	429a      	cmp	r2, r3
 800573c:	d103      	bne.n	8005746 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800573e:	f7fe ff07 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 8005742:	6778      	str	r0, [r7, #116]	; 0x74
 8005744:	e002      	b.n	800574c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005746:	f7fe feef 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 800574a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005754:	f040 80b6 	bne.w	80058c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575a:	461c      	mov	r4, r3
 800575c:	f04f 0500 	mov.w	r5, #0
 8005760:	4622      	mov	r2, r4
 8005762:	462b      	mov	r3, r5
 8005764:	1891      	adds	r1, r2, r2
 8005766:	6439      	str	r1, [r7, #64]	; 0x40
 8005768:	415b      	adcs	r3, r3
 800576a:	647b      	str	r3, [r7, #68]	; 0x44
 800576c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005770:	1912      	adds	r2, r2, r4
 8005772:	eb45 0303 	adc.w	r3, r5, r3
 8005776:	f04f 0000 	mov.w	r0, #0
 800577a:	f04f 0100 	mov.w	r1, #0
 800577e:	00d9      	lsls	r1, r3, #3
 8005780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005784:	00d0      	lsls	r0, r2, #3
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	1911      	adds	r1, r2, r4
 800578c:	6639      	str	r1, [r7, #96]	; 0x60
 800578e:	416b      	adcs	r3, r5
 8005790:	667b      	str	r3, [r7, #100]	; 0x64
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	461a      	mov	r2, r3
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	1891      	adds	r1, r2, r2
 800579e:	63b9      	str	r1, [r7, #56]	; 0x38
 80057a0:	415b      	adcs	r3, r3
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057ac:	f7fb fa64 	bl	8000c78 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4ba5      	ldr	r3, [pc, #660]	; (8005a4c <UART_SetConfig+0x38c>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011e      	lsls	r6, r3, #4
 80057be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c0:	461c      	mov	r4, r3
 80057c2:	f04f 0500 	mov.w	r5, #0
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	6339      	str	r1, [r7, #48]	; 0x30
 80057ce:	415b      	adcs	r3, r3
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
 80057d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057d6:	1912      	adds	r2, r2, r4
 80057d8:	eb45 0303 	adc.w	r3, r5, r3
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	00d9      	lsls	r1, r3, #3
 80057e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ea:	00d0      	lsls	r0, r2, #3
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	1911      	adds	r1, r2, r4
 80057f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80057f4:	416b      	adcs	r3, r5
 80057f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	461a      	mov	r2, r3
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	1891      	adds	r1, r2, r2
 8005804:	62b9      	str	r1, [r7, #40]	; 0x28
 8005806:	415b      	adcs	r3, r3
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800580e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005812:	f7fb fa31 	bl	8000c78 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4b8c      	ldr	r3, [pc, #560]	; (8005a4c <UART_SetConfig+0x38c>)
 800581c:	fba3 1302 	umull	r1, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	2164      	movs	r1, #100	; 0x64
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	3332      	adds	r3, #50	; 0x32
 800582e:	4a87      	ldr	r2, [pc, #540]	; (8005a4c <UART_SetConfig+0x38c>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800583c:	441e      	add	r6, r3
 800583e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005840:	4618      	mov	r0, r3
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	1894      	adds	r4, r2, r2
 800584c:	623c      	str	r4, [r7, #32]
 800584e:	415b      	adcs	r3, r3
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005856:	1812      	adds	r2, r2, r0
 8005858:	eb41 0303 	adc.w	r3, r1, r3
 800585c:	f04f 0400 	mov.w	r4, #0
 8005860:	f04f 0500 	mov.w	r5, #0
 8005864:	00dd      	lsls	r5, r3, #3
 8005866:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800586a:	00d4      	lsls	r4, r2, #3
 800586c:	4622      	mov	r2, r4
 800586e:	462b      	mov	r3, r5
 8005870:	1814      	adds	r4, r2, r0
 8005872:	653c      	str	r4, [r7, #80]	; 0x50
 8005874:	414b      	adcs	r3, r1
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
 8005878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	461a      	mov	r2, r3
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	1891      	adds	r1, r2, r2
 8005884:	61b9      	str	r1, [r7, #24]
 8005886:	415b      	adcs	r3, r3
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800588e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005892:	f7fb f9f1 	bl	8000c78 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4b6c      	ldr	r3, [pc, #432]	; (8005a4c <UART_SetConfig+0x38c>)
 800589c:	fba3 1302 	umull	r1, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2164      	movs	r1, #100	; 0x64
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	3332      	adds	r3, #50	; 0x32
 80058ae:	4a67      	ldr	r2, [pc, #412]	; (8005a4c <UART_SetConfig+0x38c>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 0207 	and.w	r2, r3, #7
 80058ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4432      	add	r2, r6
 80058c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c2:	e0b9      	b.n	8005a38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c6:	461c      	mov	r4, r3
 80058c8:	f04f 0500 	mov.w	r5, #0
 80058cc:	4622      	mov	r2, r4
 80058ce:	462b      	mov	r3, r5
 80058d0:	1891      	adds	r1, r2, r2
 80058d2:	6139      	str	r1, [r7, #16]
 80058d4:	415b      	adcs	r3, r3
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058dc:	1912      	adds	r2, r2, r4
 80058de:	eb45 0303 	adc.w	r3, r5, r3
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	00d9      	lsls	r1, r3, #3
 80058ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058f0:	00d0      	lsls	r0, r2, #3
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	eb12 0804 	adds.w	r8, r2, r4
 80058fa:	eb43 0905 	adc.w	r9, r3, r5
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	008b      	lsls	r3, r1, #2
 8005912:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005916:	0082      	lsls	r2, r0, #2
 8005918:	4640      	mov	r0, r8
 800591a:	4649      	mov	r1, r9
 800591c:	f7fb f9ac 	bl	8000c78 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b49      	ldr	r3, [pc, #292]	; (8005a4c <UART_SetConfig+0x38c>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	011e      	lsls	r6, r3, #4
 800592e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005930:	4618      	mov	r0, r3
 8005932:	f04f 0100 	mov.w	r1, #0
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	1894      	adds	r4, r2, r2
 800593c:	60bc      	str	r4, [r7, #8]
 800593e:	415b      	adcs	r3, r3
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005946:	1812      	adds	r2, r2, r0
 8005948:	eb41 0303 	adc.w	r3, r1, r3
 800594c:	f04f 0400 	mov.w	r4, #0
 8005950:	f04f 0500 	mov.w	r5, #0
 8005954:	00dd      	lsls	r5, r3, #3
 8005956:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800595a:	00d4      	lsls	r4, r2, #3
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	1814      	adds	r4, r2, r0
 8005962:	64bc      	str	r4, [r7, #72]	; 0x48
 8005964:	414b      	adcs	r3, r1
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	008b      	lsls	r3, r1, #2
 800597c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005980:	0082      	lsls	r2, r0, #2
 8005982:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005986:	f7fb f977 	bl	8000c78 <__aeabi_uldivmod>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <UART_SetConfig+0x38c>)
 8005990:	fba3 1302 	umull	r1, r3, r3, r2
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	2164      	movs	r1, #100	; 0x64
 8005998:	fb01 f303 	mul.w	r3, r1, r3
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	3332      	adds	r3, #50	; 0x32
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <UART_SetConfig+0x38c>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ae:	441e      	add	r6, r3
 80059b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b2:	4618      	mov	r0, r3
 80059b4:	f04f 0100 	mov.w	r1, #0
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	1894      	adds	r4, r2, r2
 80059be:	603c      	str	r4, [r7, #0]
 80059c0:	415b      	adcs	r3, r3
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c8:	1812      	adds	r2, r2, r0
 80059ca:	eb41 0303 	adc.w	r3, r1, r3
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	f04f 0500 	mov.w	r5, #0
 80059d6:	00dd      	lsls	r5, r3, #3
 80059d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059dc:	00d4      	lsls	r4, r2, #3
 80059de:	4622      	mov	r2, r4
 80059e0:	462b      	mov	r3, r5
 80059e2:	eb12 0a00 	adds.w	sl, r2, r0
 80059e6:	eb43 0b01 	adc.w	fp, r3, r1
 80059ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	008b      	lsls	r3, r1, #2
 80059fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a02:	0082      	lsls	r2, r0, #2
 8005a04:	4650      	mov	r0, sl
 8005a06:	4659      	mov	r1, fp
 8005a08:	f7fb f936 	bl	8000c78 <__aeabi_uldivmod>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <UART_SetConfig+0x38c>)
 8005a12:	fba3 1302 	umull	r1, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2164      	movs	r1, #100	; 0x64
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	3332      	adds	r3, #50	; 0x32
 8005a24:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <UART_SetConfig+0x38c>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4432      	add	r2, r6
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	377c      	adds	r7, #124	; 0x7c
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	bf00      	nop
 8005a44:	40011000 	.word	0x40011000
 8005a48:	40011400 	.word	0x40011400
 8005a4c:	51eb851f 	.word	0x51eb851f

08005a50 <arm_mat_trans_f32>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	f8b0 c000 	ldrh.w	ip, [r0]
 8005a58:	884a      	ldrh	r2, [r1, #2]
 8005a5a:	6844      	ldr	r4, [r0, #4]
 8005a5c:	8843      	ldrh	r3, [r0, #2]
 8005a5e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005a62:	4562      	cmp	r2, ip
 8005a64:	b083      	sub	sp, #12
 8005a66:	d15f      	bne.n	8005b28 <arm_mat_trans_f32+0xd8>
 8005a68:	f8b1 e000 	ldrh.w	lr, [r1]
 8005a6c:	459e      	cmp	lr, r3
 8005a6e:	d15b      	bne.n	8005b28 <arm_mat_trans_f32+0xd8>
 8005a70:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8005a74:	f00e 0303 	and.w	r3, lr, #3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f103 0902 	add.w	r9, r3, #2
 8005a86:	3a01      	subs	r2, #1
 8005a88:	3301      	adds	r3, #1
 8005a8a:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8005a8e:	fb03 f707 	mul.w	r7, r3, r7
 8005a92:	b292      	uxth	r2, r2
 8005a94:	3201      	adds	r2, #1
 8005a96:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8005aa0:	4647      	mov	r7, r8
 8005aa2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8005aa6:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	4698      	mov	r8, r3
 8005aae:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 8005ab2:	b3bf      	cbz	r7, 8005b24 <arm_mat_trans_f32+0xd4>
 8005ab4:	f104 0210 	add.w	r2, r4, #16
 8005ab8:	eb04 0509 	add.w	r5, r4, r9
 8005abc:	4603      	mov	r3, r0
 8005abe:	ed52 7a04 	vldr	s15, [r2, #-16]
 8005ac2:	edc3 7a00 	vstr	s15, [r3]
 8005ac6:	ed52 7a03 	vldr	s15, [r2, #-12]
 8005aca:	440b      	add	r3, r1
 8005acc:	edc3 7a00 	vstr	s15, [r3]
 8005ad0:	ed52 7a02 	vldr	s15, [r2, #-8]
 8005ad4:	440b      	add	r3, r1
 8005ad6:	edc3 7a00 	vstr	s15, [r3]
 8005ada:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005ade:	3210      	adds	r2, #16
 8005ae0:	440b      	add	r3, r1
 8005ae2:	42aa      	cmp	r2, r5
 8005ae4:	edc3 7a00 	vstr	s15, [r3]
 8005ae8:	440b      	add	r3, r1
 8005aea:	d1e8      	bne.n	8005abe <arm_mat_trans_f32+0x6e>
 8005aec:	eb04 030b 	add.w	r3, r4, fp
 8005af0:	4440      	add	r0, r8
 8005af2:	9a01      	ldr	r2, [sp, #4]
 8005af4:	b182      	cbz	r2, 8005b18 <arm_mat_trans_f32+0xc8>
 8005af6:	eb03 040e 	add.w	r4, r3, lr
 8005afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afe:	6002      	str	r2, [r0, #0]
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	4408      	add	r0, r1
 8005b04:	d1f9      	bne.n	8005afa <arm_mat_trans_f32+0xaa>
 8005b06:	3601      	adds	r6, #1
 8005b08:	b2b6      	uxth	r6, r6
 8005b0a:	4566      	cmp	r6, ip
 8005b0c:	d1cf      	bne.n	8005aae <arm_mat_trans_f32+0x5e>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	b240      	sxtb	r0, r0
 8005b12:	b003      	add	sp, #12
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	3601      	adds	r6, #1
 8005b1a:	b2b6      	uxth	r6, r6
 8005b1c:	4566      	cmp	r6, ip
 8005b1e:	461c      	mov	r4, r3
 8005b20:	d1c5      	bne.n	8005aae <arm_mat_trans_f32+0x5e>
 8005b22:	e7f4      	b.n	8005b0e <arm_mat_trans_f32+0xbe>
 8005b24:	4623      	mov	r3, r4
 8005b26:	e7e4      	b.n	8005af2 <arm_mat_trans_f32+0xa2>
 8005b28:	20fd      	movs	r0, #253	; 0xfd
 8005b2a:	b240      	sxtb	r0, r0
 8005b2c:	b003      	add	sp, #12
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop

08005b34 <arm_mat_mult_f32>:
 8005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	8843      	ldrh	r3, [r0, #2]
 8005b3a:	880d      	ldrh	r5, [r1, #0]
 8005b3c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8005b40:	6854      	ldr	r4, [r2, #4]
 8005b42:	8800      	ldrh	r0, [r0, #0]
 8005b44:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8005b48:	b087      	sub	sp, #28
 8005b4a:	429d      	cmp	r5, r3
 8005b4c:	9003      	str	r0, [sp, #12]
 8005b4e:	9404      	str	r4, [sp, #16]
 8005b50:	f040 808d 	bne.w	8005c6e <arm_mat_mult_f32+0x13a>
 8005b54:	8813      	ldrh	r3, [r2, #0]
 8005b56:	4283      	cmp	r3, r0
 8005b58:	f040 8089 	bne.w	8005c6e <arm_mat_mult_f32+0x13a>
 8005b5c:	8853      	ldrh	r3, [r2, #2]
 8005b5e:	4543      	cmp	r3, r8
 8005b60:	f040 8085 	bne.w	8005c6e <arm_mat_mult_f32+0x13a>
 8005b64:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8005b68:	f005 0303 	and.w	r3, r5, #3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3301      	adds	r3, #1
 8005b78:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8005b7c:	fb0b fb03 	mul.w	fp, fp, r3
 8005b80:	3a01      	subs	r2, #1
 8005b82:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8005b86:	00ab      	lsls	r3, r5, #2
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	3201      	adds	r2, #1
 8005b90:	9302      	str	r3, [sp, #8]
 8005b92:	460b      	mov	r3, r1
 8005b94:	684c      	ldr	r4, [r1, #4]
 8005b96:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8005ba0:	46da      	mov	sl, fp
 8005ba2:	469b      	mov	fp, r3
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	9a02      	ldr	r2, [sp, #8]
 8005ba8:	2600      	movs	r6, #0
 8005baa:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8005bae:	f10c 0510 	add.w	r5, ip, #16
 8005bb2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005c78 <arm_mat_mult_f32+0x144>
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	d057      	beq.n	8005c6a <arm_mat_mult_f32+0x136>
 8005bba:	f10e 0210 	add.w	r2, lr, #16
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	ed52 5a04 	vldr	s11, [r2, #-16]
 8005bc4:	edd3 6a00 	vldr	s13, [r3]
 8005bc8:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005bcc:	ed12 5a02 	vldr	s10, [r2, #-8]
 8005bd0:	ed12 6a01 	vldr	s12, [r2, #-4]
 8005bd4:	4403      	add	r3, r0
 8005bd6:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8005bda:	edd3 6a00 	vldr	s13, [r3]
 8005bde:	4403      	add	r3, r0
 8005be0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005be4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005be8:	edd3 6a00 	vldr	s13, [r3]
 8005bec:	4403      	add	r3, r0
 8005bee:	ee77 5a27 	vadd.f32	s11, s14, s15
 8005bf2:	ee65 7a26 	vmul.f32	s15, s10, s13
 8005bf6:	edd3 6a00 	vldr	s13, [r3]
 8005bfa:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8005bfe:	3210      	adds	r2, #16
 8005c00:	ee66 7a26 	vmul.f32	s15, s12, s13
 8005c04:	42aa      	cmp	r2, r5
 8005c06:	4403      	add	r3, r0
 8005c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c0c:	d1d8      	bne.n	8005bc0 <arm_mat_mult_f32+0x8c>
 8005c0e:	4454      	add	r4, sl
 8005c10:	4663      	mov	r3, ip
 8005c12:	9a01      	ldr	r2, [sp, #4]
 8005c14:	b162      	cbz	r2, 8005c30 <arm_mat_mult_f32+0xfc>
 8005c16:	eb03 0209 	add.w	r2, r3, r9
 8005c1a:	ecf3 6a01 	vldmia	r3!, {s13}
 8005c1e:	ed94 7a00 	vldr	s14, [r4]
 8005c22:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005c26:	4293      	cmp	r3, r2
 8005c28:	4404      	add	r4, r0
 8005c2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c2e:	d1f4      	bne.n	8005c1a <arm_mat_mult_f32+0xe6>
 8005c30:	ece7 7a01 	vstmia	r7!, {s15}
 8005c34:	3601      	adds	r6, #1
 8005c36:	b2b6      	uxth	r6, r6
 8005c38:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005c3c:	4546      	cmp	r6, r8
 8005c3e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8005c42:	d1b6      	bne.n	8005bb2 <arm_mat_mult_f32+0x7e>
 8005c44:	9a03      	ldr	r2, [sp, #12]
 8005c46:	9c02      	ldr	r4, [sp, #8]
 8005c48:	9d05      	ldr	r5, [sp, #20]
 8005c4a:	3a01      	subs	r2, #1
 8005c4c:	4434      	add	r4, r6
 8005c4e:	b2a4      	uxth	r4, r4
 8005c50:	b292      	uxth	r2, r2
 8005c52:	9402      	str	r4, [sp, #8]
 8005c54:	9203      	str	r2, [sp, #12]
 8005c56:	44ae      	add	lr, r5
 8005c58:	44ac      	add	ip, r5
 8005c5a:	461c      	mov	r4, r3
 8005c5c:	2a00      	cmp	r2, #0
 8005c5e:	d1a1      	bne.n	8005ba4 <arm_mat_mult_f32+0x70>
 8005c60:	4610      	mov	r0, r2
 8005c62:	b240      	sxtb	r0, r0
 8005c64:	b007      	add	sp, #28
 8005c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	4673      	mov	r3, lr
 8005c6c:	e7d1      	b.n	8005c12 <arm_mat_mult_f32+0xde>
 8005c6e:	20fd      	movs	r0, #253	; 0xfd
 8005c70:	b240      	sxtb	r0, r0
 8005c72:	b007      	add	sp, #28
 8005c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c78:	00000000 	.word	0x00000000

08005c7c <arm_mat_inverse_f32>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	8803      	ldrh	r3, [r0, #0]
 8005c82:	8844      	ldrh	r4, [r0, #2]
 8005c84:	6845      	ldr	r5, [r0, #4]
 8005c86:	684a      	ldr	r2, [r1, #4]
 8005c88:	b089      	sub	sp, #36	; 0x24
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	9202      	str	r2, [sp, #8]
 8005c8e:	9501      	str	r5, [sp, #4]
 8005c90:	d004      	beq.n	8005c9c <arm_mat_inverse_f32+0x20>
 8005c92:	20fd      	movs	r0, #253	; 0xfd
 8005c94:	b240      	sxtb	r0, r0
 8005c96:	b009      	add	sp, #36	; 0x24
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9c:	880a      	ldrh	r2, [r1, #0]
 8005c9e:	884b      	ldrh	r3, [r1, #2]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d1f6      	bne.n	8005c92 <arm_mat_inverse_f32+0x16>
 8005ca4:	429c      	cmp	r4, r3
 8005ca6:	d1f4      	bne.n	8005c92 <arm_mat_inverse_f32+0x16>
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	f000 80e4 	beq.w	8005e76 <arm_mat_inverse_f32+0x1fa>
 8005cae:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cb8:	f04f 0a00 	mov.w	sl, #0
 8005cbc:	1e67      	subs	r7, r4, #1
 8005cbe:	9007      	str	r0, [sp, #28]
 8005cc0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005cc4:	9e02      	ldr	r6, [sp, #8]
 8005cc6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8005cca:	4654      	mov	r4, sl
 8005ccc:	4698      	mov	r8, r3
 8005cce:	e007      	b.n	8005ce0 <arm_mat_inverse_f32+0x64>
 8005cd0:	f002 fac6 	bl	8008260 <memset>
 8005cd4:	444e      	add	r6, r9
 8005cd6:	3401      	adds	r4, #1
 8005cd8:	f1a9 0904 	sub.w	r9, r9, #4
 8005cdc:	f10a 0a04 	add.w	sl, sl, #4
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	b114      	cbz	r4, 8005cee <arm_mat_inverse_f32+0x72>
 8005ce8:	f002 faba 	bl	8008260 <memset>
 8005cec:	4456      	add	r6, sl
 8005cee:	f8c6 b000 	str.w	fp, [r6]
 8005cf2:	42bc      	cmp	r4, r7
 8005cf4:	f106 0604 	add.w	r6, r6, #4
 8005cf8:	464a      	mov	r2, r9
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f04f 0100 	mov.w	r1, #0
 8005d00:	d1e6      	bne.n	8005cd0 <arm_mat_inverse_f32+0x54>
 8005d02:	4643      	mov	r3, r8
 8005d04:	009e      	lsls	r6, r3, #2
 8005d06:	46a0      	mov	r8, r4
 8005d08:	2700      	movs	r7, #0
 8005d0a:	461c      	mov	r4, r3
 8005d0c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d14:	1d33      	adds	r3, r6, #4
 8005d16:	9306      	str	r3, [sp, #24]
 8005d18:	46b1      	mov	r9, r6
 8005d1a:	9705      	str	r7, [sp, #20]
 8005d1c:	46a6      	mov	lr, r4
 8005d1e:	42bc      	cmp	r4, r7
 8005d20:	edd5 6a00 	vldr	s13, [r5]
 8005d24:	f000 80be 	beq.w	8005ea4 <arm_mat_inverse_f32+0x228>
 8005d28:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005ef4 <arm_mat_inverse_f32+0x278>
 8005d2c:	463a      	mov	r2, r7
 8005d2e:	462b      	mov	r3, r5
 8005d30:	edd3 7a00 	vldr	s15, [r3]
 8005d34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3c:	bfd8      	it	le
 8005d3e:	eef1 7a67 	vnegle.f32	s15, s15
 8005d42:	eef4 7a47 	vcmp.f32	s15, s14
 8005d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4a:	f102 0201 	add.w	r2, r2, #1
 8005d4e:	bfc8      	it	gt
 8005d50:	eeb0 7a67 	vmovgt.f32	s14, s15
 8005d54:	4294      	cmp	r4, r2
 8005d56:	4433      	add	r3, r6
 8005d58:	d1ea      	bne.n	8005d30 <arm_mat_inverse_f32+0xb4>
 8005d5a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	f000 809f 	beq.w	8005ea4 <arm_mat_inverse_f32+0x228>
 8005d66:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	bfd4      	ite	le
 8005d70:	eef1 7a66 	vnegle.f32	s15, s13
 8005d74:	eef0 7a66 	vmovgt.f32	s15, s13
 8005d78:	eef4 7a47 	vcmp.f32	s15, s14
 8005d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d80:	d010      	beq.n	8005da4 <arm_mat_inverse_f32+0x128>
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	b173      	cbz	r3, 8005da4 <arm_mat_inverse_f32+0x128>
 8005d86:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8e:	eef1 7a66 	vneg.f32	s15, s13
 8005d92:	bfc8      	it	gt
 8005d94:	eef0 7a66 	vmovgt.f32	s15, s13
 8005d98:	eef4 7a47 	vcmp.f32	s15, s14
 8005d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da0:	f000 8084 	beq.w	8005eac <arm_mat_inverse_f32+0x230>
 8005da4:	9b05      	ldr	r3, [sp, #20]
 8005da6:	b933      	cbnz	r3, 8005db6 <arm_mat_inverse_f32+0x13a>
 8005da8:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	d078      	beq.n	8005ea4 <arm_mat_inverse_f32+0x228>
 8005db2:	2300      	movs	r3, #0
 8005db4:	9305      	str	r3, [sp, #20]
 8005db6:	eb0c 0306 	add.w	r3, ip, r6
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	4672      	mov	r2, lr
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	edd3 7a00 	vldr	s15, [r3]
 8005dc4:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	ece3 7a01 	vstmia	r3!, {s15}
 8005dce:	d1f7      	bne.n	8005dc0 <arm_mat_inverse_f32+0x144>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4663      	mov	r3, ip
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8005ddc:	3901      	subs	r1, #1
 8005dde:	ece3 7a01 	vstmia	r3!, {s15}
 8005de2:	d1f7      	bne.n	8005dd4 <arm_mat_inverse_f32+0x158>
 8005de4:	9802      	ldr	r0, [sp, #8]
 8005de6:	f8dd b004 	ldr.w	fp, [sp, #4]
 8005dea:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8005dee:	42b9      	cmp	r1, r7
 8005df0:	d07c      	beq.n	8005eec <arm_mat_inverse_f32+0x270>
 8005df2:	eddb 6a00 	vldr	s13, [fp]
 8005df6:	4672      	mov	r2, lr
 8005df8:	46aa      	mov	sl, r5
 8005dfa:	465b      	mov	r3, fp
 8005dfc:	ecfa 7a01 	vldmia	sl!, {s15}
 8005e00:	ed93 7a00 	vldr	s14, [r3]
 8005e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e0e:	ece3 7a01 	vstmia	r3!, {s15}
 8005e12:	d1f3      	bne.n	8005dfc <arm_mat_inverse_f32+0x180>
 8005e14:	44cb      	add	fp, r9
 8005e16:	4622      	mov	r2, r4
 8005e18:	46e2      	mov	sl, ip
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	ecfa 7a01 	vldmia	sl!, {s15}
 8005e20:	ed93 7a00 	vldr	s14, [r3]
 8005e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e28:	3a01      	subs	r2, #1
 8005e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e2e:	ece3 7a01 	vstmia	r3!, {s15}
 8005e32:	d1f3      	bne.n	8005e1c <arm_mat_inverse_f32+0x1a0>
 8005e34:	4430      	add	r0, r6
 8005e36:	3101      	adds	r1, #1
 8005e38:	428c      	cmp	r4, r1
 8005e3a:	44c3      	add	fp, r8
 8005e3c:	d1d7      	bne.n	8005dee <arm_mat_inverse_f32+0x172>
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005e44:	3304      	adds	r3, #4
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	9b06      	ldr	r3, [sp, #24]
 8005e4a:	441d      	add	r5, r3
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	f1be 0e01 	subs.w	lr, lr, #1
 8005e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e56:	f107 0701 	add.w	r7, r7, #1
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	f1a9 0904 	sub.w	r9, r9, #4
 8005e60:	f47f af5d 	bne.w	8005d1e <arm_mat_inverse_f32+0xa2>
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	b9fb      	cbnz	r3, 8005ea8 <arm_mat_inverse_f32+0x22c>
 8005e68:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e70:	d11a      	bne.n	8005ea8 <arm_mat_inverse_f32+0x22c>
 8005e72:	9b07      	ldr	r3, [sp, #28]
 8005e74:	685d      	ldr	r5, [r3, #4]
 8005e76:	fb04 f404 	mul.w	r4, r4, r4
 8005e7a:	b19c      	cbz	r4, 8005ea4 <arm_mat_inverse_f32+0x228>
 8005e7c:	edd5 7a00 	vldr	s15, [r5]
 8005e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	d10e      	bne.n	8005ea8 <arm_mat_inverse_f32+0x22c>
 8005e8a:	3504      	adds	r5, #4
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e006      	b.n	8005e9e <arm_mat_inverse_f32+0x222>
 8005e90:	ecf5 7a01 	vldmia	r5!, {s15}
 8005e94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9c:	d104      	bne.n	8005ea8 <arm_mat_inverse_f32+0x22c>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d1f5      	bne.n	8005e90 <arm_mat_inverse_f32+0x214>
 8005ea4:	20fb      	movs	r0, #251	; 0xfb
 8005ea6:	e6f5      	b.n	8005c94 <arm_mat_inverse_f32+0x18>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e6f3      	b.n	8005c94 <arm_mat_inverse_f32+0x18>
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	4671      	mov	r1, lr
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	6810      	ldr	r0, [r2, #0]
 8005eb4:	f8d3 8000 	ldr.w	r8, [r3]
 8005eb8:	f842 8b04 	str.w	r8, [r2], #4
 8005ebc:	3901      	subs	r1, #1
 8005ebe:	f843 0b04 	str.w	r0, [r3], #4
 8005ec2:	d1f6      	bne.n	8005eb2 <arm_mat_inverse_f32+0x236>
 8005ec4:	eb0c 0306 	add.w	r3, ip, r6
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4622      	mov	r2, r4
 8005ece:	4663      	mov	r3, ip
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	f8d3 8000 	ldr.w	r8, [r3]
 8005ed6:	f841 8b04 	str.w	r8, [r1], #4
 8005eda:	3a01      	subs	r2, #1
 8005edc:	f843 0b04 	str.w	r0, [r3], #4
 8005ee0:	d1f6      	bne.n	8005ed0 <arm_mat_inverse_f32+0x254>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	edd5 6a00 	vldr	s13, [r5]
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	e767      	b.n	8005dbc <arm_mat_inverse_f32+0x140>
 8005eec:	44cb      	add	fp, r9
 8005eee:	4430      	add	r0, r6
 8005ef0:	e7a1      	b.n	8005e36 <arm_mat_inverse_f32+0x1ba>
 8005ef2:	bf00      	nop
 8005ef4:	00000000 	.word	0x00000000

08005ef8 <arm_mat_init_f32>:
 8005ef8:	8001      	strh	r1, [r0, #0]
 8005efa:	8042      	strh	r2, [r0, #2]
 8005efc:	6043      	str	r3, [r0, #4]
 8005efe:	4770      	bx	lr

08005f00 <atan>:
 8005f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	ec55 4b10 	vmov	r4, r5, d0
 8005f08:	4bc3      	ldr	r3, [pc, #780]	; (8006218 <atan+0x318>)
 8005f0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005f0e:	429e      	cmp	r6, r3
 8005f10:	46ab      	mov	fp, r5
 8005f12:	dd18      	ble.n	8005f46 <atan+0x46>
 8005f14:	4bc1      	ldr	r3, [pc, #772]	; (800621c <atan+0x31c>)
 8005f16:	429e      	cmp	r6, r3
 8005f18:	dc01      	bgt.n	8005f1e <atan+0x1e>
 8005f1a:	d109      	bne.n	8005f30 <atan+0x30>
 8005f1c:	b144      	cbz	r4, 8005f30 <atan+0x30>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7fa f9c9 	bl	80002bc <__adddf3>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	e006      	b.n	8005f3e <atan+0x3e>
 8005f30:	f1bb 0f00 	cmp.w	fp, #0
 8005f34:	f300 8131 	bgt.w	800619a <atan+0x29a>
 8005f38:	a59b      	add	r5, pc, #620	; (adr r5, 80061a8 <atan+0x2a8>)
 8005f3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f3e:	ec45 4b10 	vmov	d0, r4, r5
 8005f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	4bb6      	ldr	r3, [pc, #728]	; (8006220 <atan+0x320>)
 8005f48:	429e      	cmp	r6, r3
 8005f4a:	dc14      	bgt.n	8005f76 <atan+0x76>
 8005f4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005f50:	429e      	cmp	r6, r3
 8005f52:	dc0d      	bgt.n	8005f70 <atan+0x70>
 8005f54:	a396      	add	r3, pc, #600	; (adr r3, 80061b0 <atan+0x2b0>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	ee10 0a10 	vmov	r0, s0
 8005f5e:	4629      	mov	r1, r5
 8005f60:	f7fa f9ac 	bl	80002bc <__adddf3>
 8005f64:	4baf      	ldr	r3, [pc, #700]	; (8006224 <atan+0x324>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	f7fa fdee 	bl	8000b48 <__aeabi_dcmpgt>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d1e6      	bne.n	8005f3e <atan+0x3e>
 8005f70:	f04f 3aff 	mov.w	sl, #4294967295
 8005f74:	e02b      	b.n	8005fce <atan+0xce>
 8005f76:	f000 f9b3 	bl	80062e0 <fabs>
 8005f7a:	4bab      	ldr	r3, [pc, #684]	; (8006228 <atan+0x328>)
 8005f7c:	429e      	cmp	r6, r3
 8005f7e:	ec55 4b10 	vmov	r4, r5, d0
 8005f82:	f300 80bf 	bgt.w	8006104 <atan+0x204>
 8005f86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005f8a:	429e      	cmp	r6, r3
 8005f8c:	f300 80a0 	bgt.w	80060d0 <atan+0x1d0>
 8005f90:	ee10 2a10 	vmov	r2, s0
 8005f94:	ee10 0a10 	vmov	r0, s0
 8005f98:	462b      	mov	r3, r5
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7fa f98e 	bl	80002bc <__adddf3>
 8005fa0:	4ba0      	ldr	r3, [pc, #640]	; (8006224 <atan+0x324>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f7fa f988 	bl	80002b8 <__aeabi_dsub>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	f7fa f981 	bl	80002bc <__adddf3>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	f7fa fc5b 	bl	800087c <__aeabi_ddiv>
 8005fc6:	f04f 0a00 	mov.w	sl, #0
 8005fca:	4604      	mov	r4, r0
 8005fcc:	460d      	mov	r5, r1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7fa fb27 	bl	8000628 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4680      	mov	r8, r0
 8005fe0:	4689      	mov	r9, r1
 8005fe2:	f7fa fb21 	bl	8000628 <__aeabi_dmul>
 8005fe6:	a374      	add	r3, pc, #464	; (adr r3, 80061b8 <atan+0x2b8>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4606      	mov	r6, r0
 8005fee:	460f      	mov	r7, r1
 8005ff0:	f7fa fb1a 	bl	8000628 <__aeabi_dmul>
 8005ff4:	a372      	add	r3, pc, #456	; (adr r3, 80061c0 <atan+0x2c0>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f95f 	bl	80002bc <__adddf3>
 8005ffe:	4632      	mov	r2, r6
 8006000:	463b      	mov	r3, r7
 8006002:	f7fa fb11 	bl	8000628 <__aeabi_dmul>
 8006006:	a370      	add	r3, pc, #448	; (adr r3, 80061c8 <atan+0x2c8>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa f956 	bl	80002bc <__adddf3>
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	f7fa fb08 	bl	8000628 <__aeabi_dmul>
 8006018:	a36d      	add	r3, pc, #436	; (adr r3, 80061d0 <atan+0x2d0>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa f94d 	bl	80002bc <__adddf3>
 8006022:	4632      	mov	r2, r6
 8006024:	463b      	mov	r3, r7
 8006026:	f7fa faff 	bl	8000628 <__aeabi_dmul>
 800602a:	a36b      	add	r3, pc, #428	; (adr r3, 80061d8 <atan+0x2d8>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa f944 	bl	80002bc <__adddf3>
 8006034:	4632      	mov	r2, r6
 8006036:	463b      	mov	r3, r7
 8006038:	f7fa faf6 	bl	8000628 <__aeabi_dmul>
 800603c:	a368      	add	r3, pc, #416	; (adr r3, 80061e0 <atan+0x2e0>)
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f7fa f93b 	bl	80002bc <__adddf3>
 8006046:	4642      	mov	r2, r8
 8006048:	464b      	mov	r3, r9
 800604a:	f7fa faed 	bl	8000628 <__aeabi_dmul>
 800604e:	a366      	add	r3, pc, #408	; (adr r3, 80061e8 <atan+0x2e8>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	4680      	mov	r8, r0
 8006056:	4689      	mov	r9, r1
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa fae4 	bl	8000628 <__aeabi_dmul>
 8006060:	a363      	add	r3, pc, #396	; (adr r3, 80061f0 <atan+0x2f0>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa f927 	bl	80002b8 <__aeabi_dsub>
 800606a:	4632      	mov	r2, r6
 800606c:	463b      	mov	r3, r7
 800606e:	f7fa fadb 	bl	8000628 <__aeabi_dmul>
 8006072:	a361      	add	r3, pc, #388	; (adr r3, 80061f8 <atan+0x2f8>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa f91e 	bl	80002b8 <__aeabi_dsub>
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	f7fa fad2 	bl	8000628 <__aeabi_dmul>
 8006084:	a35e      	add	r3, pc, #376	; (adr r3, 8006200 <atan+0x300>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa f915 	bl	80002b8 <__aeabi_dsub>
 800608e:	4632      	mov	r2, r6
 8006090:	463b      	mov	r3, r7
 8006092:	f7fa fac9 	bl	8000628 <__aeabi_dmul>
 8006096:	a35c      	add	r3, pc, #368	; (adr r3, 8006208 <atan+0x308>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa f90c 	bl	80002b8 <__aeabi_dsub>
 80060a0:	4632      	mov	r2, r6
 80060a2:	463b      	mov	r3, r7
 80060a4:	f7fa fac0 	bl	8000628 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4640      	mov	r0, r8
 80060ae:	4649      	mov	r1, r9
 80060b0:	f7fa f904 	bl	80002bc <__adddf3>
 80060b4:	4622      	mov	r2, r4
 80060b6:	462b      	mov	r3, r5
 80060b8:	f7fa fab6 	bl	8000628 <__aeabi_dmul>
 80060bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	d14b      	bne.n	800615e <atan+0x25e>
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7fa f8f5 	bl	80002b8 <__aeabi_dsub>
 80060ce:	e72c      	b.n	8005f2a <atan+0x2a>
 80060d0:	ee10 0a10 	vmov	r0, s0
 80060d4:	4b53      	ldr	r3, [pc, #332]	; (8006224 <atan+0x324>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa f8ed 	bl	80002b8 <__aeabi_dsub>
 80060de:	4b51      	ldr	r3, [pc, #324]	; (8006224 <atan+0x324>)
 80060e0:	4606      	mov	r6, r0
 80060e2:	460f      	mov	r7, r1
 80060e4:	2200      	movs	r2, #0
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa f8e7 	bl	80002bc <__adddf3>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa fbc1 	bl	800087c <__aeabi_ddiv>
 80060fa:	f04f 0a01 	mov.w	sl, #1
 80060fe:	4604      	mov	r4, r0
 8006100:	460d      	mov	r5, r1
 8006102:	e764      	b.n	8005fce <atan+0xce>
 8006104:	4b49      	ldr	r3, [pc, #292]	; (800622c <atan+0x32c>)
 8006106:	429e      	cmp	r6, r3
 8006108:	da1d      	bge.n	8006146 <atan+0x246>
 800610a:	ee10 0a10 	vmov	r0, s0
 800610e:	4b48      	ldr	r3, [pc, #288]	; (8006230 <atan+0x330>)
 8006110:	2200      	movs	r2, #0
 8006112:	4629      	mov	r1, r5
 8006114:	f7fa f8d0 	bl	80002b8 <__aeabi_dsub>
 8006118:	4b45      	ldr	r3, [pc, #276]	; (8006230 <atan+0x330>)
 800611a:	4606      	mov	r6, r0
 800611c:	460f      	mov	r7, r1
 800611e:	2200      	movs	r2, #0
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa fa80 	bl	8000628 <__aeabi_dmul>
 8006128:	4b3e      	ldr	r3, [pc, #248]	; (8006224 <atan+0x324>)
 800612a:	2200      	movs	r2, #0
 800612c:	f7fa f8c6 	bl	80002bc <__adddf3>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa fba0 	bl	800087c <__aeabi_ddiv>
 800613c:	f04f 0a02 	mov.w	sl, #2
 8006140:	4604      	mov	r4, r0
 8006142:	460d      	mov	r5, r1
 8006144:	e743      	b.n	8005fce <atan+0xce>
 8006146:	462b      	mov	r3, r5
 8006148:	ee10 2a10 	vmov	r2, s0
 800614c:	4939      	ldr	r1, [pc, #228]	; (8006234 <atan+0x334>)
 800614e:	2000      	movs	r0, #0
 8006150:	f7fa fb94 	bl	800087c <__aeabi_ddiv>
 8006154:	f04f 0a03 	mov.w	sl, #3
 8006158:	4604      	mov	r4, r0
 800615a:	460d      	mov	r5, r1
 800615c:	e737      	b.n	8005fce <atan+0xce>
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <atan+0x338>)
 8006160:	4e36      	ldr	r6, [pc, #216]	; (800623c <atan+0x33c>)
 8006162:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006166:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800616a:	e9da 2300 	ldrd	r2, r3, [sl]
 800616e:	f7fa f8a3 	bl	80002b8 <__aeabi_dsub>
 8006172:	4622      	mov	r2, r4
 8006174:	462b      	mov	r3, r5
 8006176:	f7fa f89f 	bl	80002b8 <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006182:	f7fa f899 	bl	80002b8 <__aeabi_dsub>
 8006186:	f1bb 0f00 	cmp.w	fp, #0
 800618a:	4604      	mov	r4, r0
 800618c:	460d      	mov	r5, r1
 800618e:	f6bf aed6 	bge.w	8005f3e <atan+0x3e>
 8006192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006196:	461d      	mov	r5, r3
 8006198:	e6d1      	b.n	8005f3e <atan+0x3e>
 800619a:	a51d      	add	r5, pc, #116	; (adr r5, 8006210 <atan+0x310>)
 800619c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061a0:	e6cd      	b.n	8005f3e <atan+0x3e>
 80061a2:	bf00      	nop
 80061a4:	f3af 8000 	nop.w
 80061a8:	54442d18 	.word	0x54442d18
 80061ac:	bff921fb 	.word	0xbff921fb
 80061b0:	8800759c 	.word	0x8800759c
 80061b4:	7e37e43c 	.word	0x7e37e43c
 80061b8:	e322da11 	.word	0xe322da11
 80061bc:	3f90ad3a 	.word	0x3f90ad3a
 80061c0:	24760deb 	.word	0x24760deb
 80061c4:	3fa97b4b 	.word	0x3fa97b4b
 80061c8:	a0d03d51 	.word	0xa0d03d51
 80061cc:	3fb10d66 	.word	0x3fb10d66
 80061d0:	c54c206e 	.word	0xc54c206e
 80061d4:	3fb745cd 	.word	0x3fb745cd
 80061d8:	920083ff 	.word	0x920083ff
 80061dc:	3fc24924 	.word	0x3fc24924
 80061e0:	5555550d 	.word	0x5555550d
 80061e4:	3fd55555 	.word	0x3fd55555
 80061e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80061ec:	bfa2b444 	.word	0xbfa2b444
 80061f0:	52defd9a 	.word	0x52defd9a
 80061f4:	3fadde2d 	.word	0x3fadde2d
 80061f8:	af749a6d 	.word	0xaf749a6d
 80061fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8006200:	fe231671 	.word	0xfe231671
 8006204:	3fbc71c6 	.word	0x3fbc71c6
 8006208:	9998ebc4 	.word	0x9998ebc4
 800620c:	3fc99999 	.word	0x3fc99999
 8006210:	54442d18 	.word	0x54442d18
 8006214:	3ff921fb 	.word	0x3ff921fb
 8006218:	440fffff 	.word	0x440fffff
 800621c:	7ff00000 	.word	0x7ff00000
 8006220:	3fdbffff 	.word	0x3fdbffff
 8006224:	3ff00000 	.word	0x3ff00000
 8006228:	3ff2ffff 	.word	0x3ff2ffff
 800622c:	40038000 	.word	0x40038000
 8006230:	3ff80000 	.word	0x3ff80000
 8006234:	bff00000 	.word	0xbff00000
 8006238:	08008d78 	.word	0x08008d78
 800623c:	08008d58 	.word	0x08008d58

08006240 <cos>:
 8006240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006242:	ec53 2b10 	vmov	r2, r3, d0
 8006246:	4824      	ldr	r0, [pc, #144]	; (80062d8 <cos+0x98>)
 8006248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800624c:	4281      	cmp	r1, r0
 800624e:	dc06      	bgt.n	800625e <cos+0x1e>
 8006250:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80062d0 <cos+0x90>
 8006254:	f001 f96c 	bl	8007530 <__kernel_cos>
 8006258:	ec51 0b10 	vmov	r0, r1, d0
 800625c:	e007      	b.n	800626e <cos+0x2e>
 800625e:	481f      	ldr	r0, [pc, #124]	; (80062dc <cos+0x9c>)
 8006260:	4281      	cmp	r1, r0
 8006262:	dd09      	ble.n	8006278 <cos+0x38>
 8006264:	ee10 0a10 	vmov	r0, s0
 8006268:	4619      	mov	r1, r3
 800626a:	f7fa f825 	bl	80002b8 <__aeabi_dsub>
 800626e:	ec41 0b10 	vmov	d0, r0, r1
 8006272:	b005      	add	sp, #20
 8006274:	f85d fb04 	ldr.w	pc, [sp], #4
 8006278:	4668      	mov	r0, sp
 800627a:	f000 fe99 	bl	8006fb0 <__ieee754_rem_pio2>
 800627e:	f000 0003 	and.w	r0, r0, #3
 8006282:	2801      	cmp	r0, #1
 8006284:	d007      	beq.n	8006296 <cos+0x56>
 8006286:	2802      	cmp	r0, #2
 8006288:	d012      	beq.n	80062b0 <cos+0x70>
 800628a:	b9c0      	cbnz	r0, 80062be <cos+0x7e>
 800628c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006290:	ed9d 0b00 	vldr	d0, [sp]
 8006294:	e7de      	b.n	8006254 <cos+0x14>
 8006296:	ed9d 1b02 	vldr	d1, [sp, #8]
 800629a:	ed9d 0b00 	vldr	d0, [sp]
 800629e:	f001 fd4f 	bl	8007d40 <__kernel_sin>
 80062a2:	ec53 2b10 	vmov	r2, r3, d0
 80062a6:	ee10 0a10 	vmov	r0, s0
 80062aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062ae:	e7de      	b.n	800626e <cos+0x2e>
 80062b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062b4:	ed9d 0b00 	vldr	d0, [sp]
 80062b8:	f001 f93a 	bl	8007530 <__kernel_cos>
 80062bc:	e7f1      	b.n	80062a2 <cos+0x62>
 80062be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062c2:	ed9d 0b00 	vldr	d0, [sp]
 80062c6:	2001      	movs	r0, #1
 80062c8:	f001 fd3a 	bl	8007d40 <__kernel_sin>
 80062cc:	e7c4      	b.n	8006258 <cos+0x18>
 80062ce:	bf00      	nop
	...
 80062d8:	3fe921fb 	.word	0x3fe921fb
 80062dc:	7fefffff 	.word	0x7fefffff

080062e0 <fabs>:
 80062e0:	ec51 0b10 	vmov	r0, r1, d0
 80062e4:	ee10 2a10 	vmov	r2, s0
 80062e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80062ec:	ec43 2b10 	vmov	d0, r2, r3
 80062f0:	4770      	bx	lr
 80062f2:	0000      	movs	r0, r0
 80062f4:	0000      	movs	r0, r0
	...

080062f8 <sin>:
 80062f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062fa:	ec53 2b10 	vmov	r2, r3, d0
 80062fe:	4826      	ldr	r0, [pc, #152]	; (8006398 <sin+0xa0>)
 8006300:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006304:	4281      	cmp	r1, r0
 8006306:	dc07      	bgt.n	8006318 <sin+0x20>
 8006308:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006390 <sin+0x98>
 800630c:	2000      	movs	r0, #0
 800630e:	f001 fd17 	bl	8007d40 <__kernel_sin>
 8006312:	ec51 0b10 	vmov	r0, r1, d0
 8006316:	e007      	b.n	8006328 <sin+0x30>
 8006318:	4820      	ldr	r0, [pc, #128]	; (800639c <sin+0xa4>)
 800631a:	4281      	cmp	r1, r0
 800631c:	dd09      	ble.n	8006332 <sin+0x3a>
 800631e:	ee10 0a10 	vmov	r0, s0
 8006322:	4619      	mov	r1, r3
 8006324:	f7f9 ffc8 	bl	80002b8 <__aeabi_dsub>
 8006328:	ec41 0b10 	vmov	d0, r0, r1
 800632c:	b005      	add	sp, #20
 800632e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006332:	4668      	mov	r0, sp
 8006334:	f000 fe3c 	bl	8006fb0 <__ieee754_rem_pio2>
 8006338:	f000 0003 	and.w	r0, r0, #3
 800633c:	2801      	cmp	r0, #1
 800633e:	d008      	beq.n	8006352 <sin+0x5a>
 8006340:	2802      	cmp	r0, #2
 8006342:	d00d      	beq.n	8006360 <sin+0x68>
 8006344:	b9d0      	cbnz	r0, 800637c <sin+0x84>
 8006346:	ed9d 1b02 	vldr	d1, [sp, #8]
 800634a:	ed9d 0b00 	vldr	d0, [sp]
 800634e:	2001      	movs	r0, #1
 8006350:	e7dd      	b.n	800630e <sin+0x16>
 8006352:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006356:	ed9d 0b00 	vldr	d0, [sp]
 800635a:	f001 f8e9 	bl	8007530 <__kernel_cos>
 800635e:	e7d8      	b.n	8006312 <sin+0x1a>
 8006360:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006364:	ed9d 0b00 	vldr	d0, [sp]
 8006368:	2001      	movs	r0, #1
 800636a:	f001 fce9 	bl	8007d40 <__kernel_sin>
 800636e:	ec53 2b10 	vmov	r2, r3, d0
 8006372:	ee10 0a10 	vmov	r0, s0
 8006376:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800637a:	e7d5      	b.n	8006328 <sin+0x30>
 800637c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006380:	ed9d 0b00 	vldr	d0, [sp]
 8006384:	f001 f8d4 	bl	8007530 <__kernel_cos>
 8006388:	e7f1      	b.n	800636e <sin+0x76>
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w
	...
 8006398:	3fe921fb 	.word	0x3fe921fb
 800639c:	7fefffff 	.word	0x7fefffff

080063a0 <pow>:
 80063a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a4:	ec59 8b10 	vmov	r8, r9, d0
 80063a8:	ec57 6b11 	vmov	r6, r7, d1
 80063ac:	f000 f8dc 	bl	8006568 <__ieee754_pow>
 80063b0:	4b4e      	ldr	r3, [pc, #312]	; (80064ec <pow+0x14c>)
 80063b2:	f993 3000 	ldrsb.w	r3, [r3]
 80063b6:	3301      	adds	r3, #1
 80063b8:	ec55 4b10 	vmov	r4, r5, d0
 80063bc:	d015      	beq.n	80063ea <pow+0x4a>
 80063be:	4632      	mov	r2, r6
 80063c0:	463b      	mov	r3, r7
 80063c2:	4630      	mov	r0, r6
 80063c4:	4639      	mov	r1, r7
 80063c6:	f7fa fbc9 	bl	8000b5c <__aeabi_dcmpun>
 80063ca:	b970      	cbnz	r0, 80063ea <pow+0x4a>
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	f7fa fbc2 	bl	8000b5c <__aeabi_dcmpun>
 80063d8:	2200      	movs	r2, #0
 80063da:	2300      	movs	r3, #0
 80063dc:	b148      	cbz	r0, 80063f2 <pow+0x52>
 80063de:	4630      	mov	r0, r6
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7fa fb89 	bl	8000af8 <__aeabi_dcmpeq>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d17d      	bne.n	80064e6 <pow+0x146>
 80063ea:	ec45 4b10 	vmov	d0, r4, r5
 80063ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7fa fb7f 	bl	8000af8 <__aeabi_dcmpeq>
 80063fa:	b1e0      	cbz	r0, 8006436 <pow+0x96>
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa fb78 	bl	8000af8 <__aeabi_dcmpeq>
 8006408:	2800      	cmp	r0, #0
 800640a:	d16c      	bne.n	80064e6 <pow+0x146>
 800640c:	ec47 6b10 	vmov	d0, r6, r7
 8006410:	f001 fd54 	bl	8007ebc <finite>
 8006414:	2800      	cmp	r0, #0
 8006416:	d0e8      	beq.n	80063ea <pow+0x4a>
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7fa fb74 	bl	8000b0c <__aeabi_dcmplt>
 8006424:	2800      	cmp	r0, #0
 8006426:	d0e0      	beq.n	80063ea <pow+0x4a>
 8006428:	f001 fef0 	bl	800820c <__errno>
 800642c:	2321      	movs	r3, #33	; 0x21
 800642e:	6003      	str	r3, [r0, #0]
 8006430:	2400      	movs	r4, #0
 8006432:	4d2f      	ldr	r5, [pc, #188]	; (80064f0 <pow+0x150>)
 8006434:	e7d9      	b.n	80063ea <pow+0x4a>
 8006436:	ec45 4b10 	vmov	d0, r4, r5
 800643a:	f001 fd3f 	bl	8007ebc <finite>
 800643e:	bbb8      	cbnz	r0, 80064b0 <pow+0x110>
 8006440:	ec49 8b10 	vmov	d0, r8, r9
 8006444:	f001 fd3a 	bl	8007ebc <finite>
 8006448:	b390      	cbz	r0, 80064b0 <pow+0x110>
 800644a:	ec47 6b10 	vmov	d0, r6, r7
 800644e:	f001 fd35 	bl	8007ebc <finite>
 8006452:	b368      	cbz	r0, 80064b0 <pow+0x110>
 8006454:	4622      	mov	r2, r4
 8006456:	462b      	mov	r3, r5
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7fa fb7e 	bl	8000b5c <__aeabi_dcmpun>
 8006460:	b160      	cbz	r0, 800647c <pow+0xdc>
 8006462:	f001 fed3 	bl	800820c <__errno>
 8006466:	2321      	movs	r3, #33	; 0x21
 8006468:	6003      	str	r3, [r0, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	f7fa fa03 	bl	800087c <__aeabi_ddiv>
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
 800647a:	e7b6      	b.n	80063ea <pow+0x4a>
 800647c:	f001 fec6 	bl	800820c <__errno>
 8006480:	2322      	movs	r3, #34	; 0x22
 8006482:	6003      	str	r3, [r0, #0]
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	4640      	mov	r0, r8
 800648a:	4649      	mov	r1, r9
 800648c:	f7fa fb3e 	bl	8000b0c <__aeabi_dcmplt>
 8006490:	2400      	movs	r4, #0
 8006492:	b158      	cbz	r0, 80064ac <pow+0x10c>
 8006494:	ec47 6b10 	vmov	d0, r6, r7
 8006498:	f001 fda6 	bl	8007fe8 <rint>
 800649c:	4632      	mov	r2, r6
 800649e:	ec51 0b10 	vmov	r0, r1, d0
 80064a2:	463b      	mov	r3, r7
 80064a4:	f7fa fb28 	bl	8000af8 <__aeabi_dcmpeq>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d0c2      	beq.n	8006432 <pow+0x92>
 80064ac:	4d11      	ldr	r5, [pc, #68]	; (80064f4 <pow+0x154>)
 80064ae:	e79c      	b.n	80063ea <pow+0x4a>
 80064b0:	2200      	movs	r2, #0
 80064b2:	2300      	movs	r3, #0
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7fa fb1e 	bl	8000af8 <__aeabi_dcmpeq>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d094      	beq.n	80063ea <pow+0x4a>
 80064c0:	ec49 8b10 	vmov	d0, r8, r9
 80064c4:	f001 fcfa 	bl	8007ebc <finite>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d08e      	beq.n	80063ea <pow+0x4a>
 80064cc:	ec47 6b10 	vmov	d0, r6, r7
 80064d0:	f001 fcf4 	bl	8007ebc <finite>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d088      	beq.n	80063ea <pow+0x4a>
 80064d8:	f001 fe98 	bl	800820c <__errno>
 80064dc:	2322      	movs	r3, #34	; 0x22
 80064de:	6003      	str	r3, [r0, #0]
 80064e0:	2400      	movs	r4, #0
 80064e2:	2500      	movs	r5, #0
 80064e4:	e781      	b.n	80063ea <pow+0x4a>
 80064e6:	4d04      	ldr	r5, [pc, #16]	; (80064f8 <pow+0x158>)
 80064e8:	2400      	movs	r4, #0
 80064ea:	e77e      	b.n	80063ea <pow+0x4a>
 80064ec:	20000009 	.word	0x20000009
 80064f0:	fff00000 	.word	0xfff00000
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	3ff00000 	.word	0x3ff00000

080064fc <sqrt>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	ed2d 8b02 	vpush	{d8}
 8006502:	ec55 4b10 	vmov	r4, r5, d0
 8006506:	f000 ff5d 	bl	80073c4 <__ieee754_sqrt>
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <sqrt+0x64>)
 800650c:	eeb0 8a40 	vmov.f32	s16, s0
 8006510:	eef0 8a60 	vmov.f32	s17, s1
 8006514:	f993 3000 	ldrsb.w	r3, [r3]
 8006518:	3301      	adds	r3, #1
 800651a:	d019      	beq.n	8006550 <sqrt+0x54>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	4620      	mov	r0, r4
 8006522:	4629      	mov	r1, r5
 8006524:	f7fa fb1a 	bl	8000b5c <__aeabi_dcmpun>
 8006528:	b990      	cbnz	r0, 8006550 <sqrt+0x54>
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	f7fa faeb 	bl	8000b0c <__aeabi_dcmplt>
 8006536:	b158      	cbz	r0, 8006550 <sqrt+0x54>
 8006538:	f001 fe68 	bl	800820c <__errno>
 800653c:	2321      	movs	r3, #33	; 0x21
 800653e:	6003      	str	r3, [r0, #0]
 8006540:	2200      	movs	r2, #0
 8006542:	2300      	movs	r3, #0
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f7fa f998 	bl	800087c <__aeabi_ddiv>
 800654c:	ec41 0b18 	vmov	d8, r0, r1
 8006550:	eeb0 0a48 	vmov.f32	s0, s16
 8006554:	eef0 0a68 	vmov.f32	s1, s17
 8006558:	ecbd 8b02 	vpop	{d8}
 800655c:	bd38      	pop	{r3, r4, r5, pc}
 800655e:	bf00      	nop
 8006560:	20000009 	.word	0x20000009
 8006564:	00000000 	.word	0x00000000

08006568 <__ieee754_pow>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	ed2d 8b06 	vpush	{d8-d10}
 8006570:	b08d      	sub	sp, #52	; 0x34
 8006572:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006576:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800657a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800657e:	ea56 0100 	orrs.w	r1, r6, r0
 8006582:	ec53 2b10 	vmov	r2, r3, d0
 8006586:	f000 84d1 	beq.w	8006f2c <__ieee754_pow+0x9c4>
 800658a:	497f      	ldr	r1, [pc, #508]	; (8006788 <__ieee754_pow+0x220>)
 800658c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006590:	428c      	cmp	r4, r1
 8006592:	ee10 8a10 	vmov	r8, s0
 8006596:	4699      	mov	r9, r3
 8006598:	dc09      	bgt.n	80065ae <__ieee754_pow+0x46>
 800659a:	d103      	bne.n	80065a4 <__ieee754_pow+0x3c>
 800659c:	b97a      	cbnz	r2, 80065be <__ieee754_pow+0x56>
 800659e:	42a6      	cmp	r6, r4
 80065a0:	dd02      	ble.n	80065a8 <__ieee754_pow+0x40>
 80065a2:	e00c      	b.n	80065be <__ieee754_pow+0x56>
 80065a4:	428e      	cmp	r6, r1
 80065a6:	dc02      	bgt.n	80065ae <__ieee754_pow+0x46>
 80065a8:	428e      	cmp	r6, r1
 80065aa:	d110      	bne.n	80065ce <__ieee754_pow+0x66>
 80065ac:	b178      	cbz	r0, 80065ce <__ieee754_pow+0x66>
 80065ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065b6:	ea54 0308 	orrs.w	r3, r4, r8
 80065ba:	f000 84b7 	beq.w	8006f2c <__ieee754_pow+0x9c4>
 80065be:	4873      	ldr	r0, [pc, #460]	; (800678c <__ieee754_pow+0x224>)
 80065c0:	b00d      	add	sp, #52	; 0x34
 80065c2:	ecbd 8b06 	vpop	{d8-d10}
 80065c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f001 bd05 	b.w	8007fd8 <nan>
 80065ce:	f1b9 0f00 	cmp.w	r9, #0
 80065d2:	da36      	bge.n	8006642 <__ieee754_pow+0xda>
 80065d4:	496e      	ldr	r1, [pc, #440]	; (8006790 <__ieee754_pow+0x228>)
 80065d6:	428e      	cmp	r6, r1
 80065d8:	dc51      	bgt.n	800667e <__ieee754_pow+0x116>
 80065da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80065de:	428e      	cmp	r6, r1
 80065e0:	f340 84af 	ble.w	8006f42 <__ieee754_pow+0x9da>
 80065e4:	1531      	asrs	r1, r6, #20
 80065e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80065ea:	2914      	cmp	r1, #20
 80065ec:	dd0f      	ble.n	800660e <__ieee754_pow+0xa6>
 80065ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80065f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80065f6:	fa0c f101 	lsl.w	r1, ip, r1
 80065fa:	4281      	cmp	r1, r0
 80065fc:	f040 84a1 	bne.w	8006f42 <__ieee754_pow+0x9da>
 8006600:	f00c 0c01 	and.w	ip, ip, #1
 8006604:	f1cc 0102 	rsb	r1, ip, #2
 8006608:	9100      	str	r1, [sp, #0]
 800660a:	b180      	cbz	r0, 800662e <__ieee754_pow+0xc6>
 800660c:	e059      	b.n	80066c2 <__ieee754_pow+0x15a>
 800660e:	2800      	cmp	r0, #0
 8006610:	d155      	bne.n	80066be <__ieee754_pow+0x156>
 8006612:	f1c1 0114 	rsb	r1, r1, #20
 8006616:	fa46 fc01 	asr.w	ip, r6, r1
 800661a:	fa0c f101 	lsl.w	r1, ip, r1
 800661e:	42b1      	cmp	r1, r6
 8006620:	f040 848c 	bne.w	8006f3c <__ieee754_pow+0x9d4>
 8006624:	f00c 0c01 	and.w	ip, ip, #1
 8006628:	f1cc 0102 	rsb	r1, ip, #2
 800662c:	9100      	str	r1, [sp, #0]
 800662e:	4959      	ldr	r1, [pc, #356]	; (8006794 <__ieee754_pow+0x22c>)
 8006630:	428e      	cmp	r6, r1
 8006632:	d12d      	bne.n	8006690 <__ieee754_pow+0x128>
 8006634:	2f00      	cmp	r7, #0
 8006636:	da79      	bge.n	800672c <__ieee754_pow+0x1c4>
 8006638:	4956      	ldr	r1, [pc, #344]	; (8006794 <__ieee754_pow+0x22c>)
 800663a:	2000      	movs	r0, #0
 800663c:	f7fa f91e 	bl	800087c <__aeabi_ddiv>
 8006640:	e016      	b.n	8006670 <__ieee754_pow+0x108>
 8006642:	2100      	movs	r1, #0
 8006644:	9100      	str	r1, [sp, #0]
 8006646:	2800      	cmp	r0, #0
 8006648:	d13b      	bne.n	80066c2 <__ieee754_pow+0x15a>
 800664a:	494f      	ldr	r1, [pc, #316]	; (8006788 <__ieee754_pow+0x220>)
 800664c:	428e      	cmp	r6, r1
 800664e:	d1ee      	bne.n	800662e <__ieee754_pow+0xc6>
 8006650:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006654:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006658:	ea53 0308 	orrs.w	r3, r3, r8
 800665c:	f000 8466 	beq.w	8006f2c <__ieee754_pow+0x9c4>
 8006660:	4b4d      	ldr	r3, [pc, #308]	; (8006798 <__ieee754_pow+0x230>)
 8006662:	429c      	cmp	r4, r3
 8006664:	dd0d      	ble.n	8006682 <__ieee754_pow+0x11a>
 8006666:	2f00      	cmp	r7, #0
 8006668:	f280 8464 	bge.w	8006f34 <__ieee754_pow+0x9cc>
 800666c:	2000      	movs	r0, #0
 800666e:	2100      	movs	r1, #0
 8006670:	ec41 0b10 	vmov	d0, r0, r1
 8006674:	b00d      	add	sp, #52	; 0x34
 8006676:	ecbd 8b06 	vpop	{d8-d10}
 800667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667e:	2102      	movs	r1, #2
 8006680:	e7e0      	b.n	8006644 <__ieee754_pow+0xdc>
 8006682:	2f00      	cmp	r7, #0
 8006684:	daf2      	bge.n	800666c <__ieee754_pow+0x104>
 8006686:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800668a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800668e:	e7ef      	b.n	8006670 <__ieee754_pow+0x108>
 8006690:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006694:	d104      	bne.n	80066a0 <__ieee754_pow+0x138>
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	f7f9 ffc5 	bl	8000628 <__aeabi_dmul>
 800669e:	e7e7      	b.n	8006670 <__ieee754_pow+0x108>
 80066a0:	493e      	ldr	r1, [pc, #248]	; (800679c <__ieee754_pow+0x234>)
 80066a2:	428f      	cmp	r7, r1
 80066a4:	d10d      	bne.n	80066c2 <__ieee754_pow+0x15a>
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	db0a      	blt.n	80066c2 <__ieee754_pow+0x15a>
 80066ac:	ec43 2b10 	vmov	d0, r2, r3
 80066b0:	b00d      	add	sp, #52	; 0x34
 80066b2:	ecbd 8b06 	vpop	{d8-d10}
 80066b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	f000 be83 	b.w	80073c4 <__ieee754_sqrt>
 80066be:	2100      	movs	r1, #0
 80066c0:	9100      	str	r1, [sp, #0]
 80066c2:	ec43 2b10 	vmov	d0, r2, r3
 80066c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ca:	f7ff fe09 	bl	80062e0 <fabs>
 80066ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d2:	ec51 0b10 	vmov	r0, r1, d0
 80066d6:	f1b8 0f00 	cmp.w	r8, #0
 80066da:	d12a      	bne.n	8006732 <__ieee754_pow+0x1ca>
 80066dc:	b12c      	cbz	r4, 80066ea <__ieee754_pow+0x182>
 80066de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006794 <__ieee754_pow+0x22c>
 80066e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80066e6:	45e6      	cmp	lr, ip
 80066e8:	d123      	bne.n	8006732 <__ieee754_pow+0x1ca>
 80066ea:	2f00      	cmp	r7, #0
 80066ec:	da05      	bge.n	80066fa <__ieee754_pow+0x192>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	2000      	movs	r0, #0
 80066f4:	4927      	ldr	r1, [pc, #156]	; (8006794 <__ieee754_pow+0x22c>)
 80066f6:	f7fa f8c1 	bl	800087c <__aeabi_ddiv>
 80066fa:	f1b9 0f00 	cmp.w	r9, #0
 80066fe:	dab7      	bge.n	8006670 <__ieee754_pow+0x108>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006706:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800670a:	4323      	orrs	r3, r4
 800670c:	d108      	bne.n	8006720 <__ieee754_pow+0x1b8>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4610      	mov	r0, r2
 8006714:	4619      	mov	r1, r3
 8006716:	f7f9 fdcf 	bl	80002b8 <__aeabi_dsub>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	e78d      	b.n	800663c <__ieee754_pow+0xd4>
 8006720:	9b00      	ldr	r3, [sp, #0]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d1a4      	bne.n	8006670 <__ieee754_pow+0x108>
 8006726:	4602      	mov	r2, r0
 8006728:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	e79e      	b.n	8006670 <__ieee754_pow+0x108>
 8006732:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006736:	f10c 35ff 	add.w	r5, ip, #4294967295
 800673a:	950a      	str	r5, [sp, #40]	; 0x28
 800673c:	9d00      	ldr	r5, [sp, #0]
 800673e:	46ac      	mov	ip, r5
 8006740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006742:	ea5c 0505 	orrs.w	r5, ip, r5
 8006746:	d0e4      	beq.n	8006712 <__ieee754_pow+0x1aa>
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <__ieee754_pow+0x238>)
 800674a:	429e      	cmp	r6, r3
 800674c:	f340 80fc 	ble.w	8006948 <__ieee754_pow+0x3e0>
 8006750:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006754:	429e      	cmp	r6, r3
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <__ieee754_pow+0x230>)
 8006758:	dd07      	ble.n	800676a <__ieee754_pow+0x202>
 800675a:	429c      	cmp	r4, r3
 800675c:	dc0a      	bgt.n	8006774 <__ieee754_pow+0x20c>
 800675e:	2f00      	cmp	r7, #0
 8006760:	da84      	bge.n	800666c <__ieee754_pow+0x104>
 8006762:	a307      	add	r3, pc, #28	; (adr r3, 8006780 <__ieee754_pow+0x218>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	e795      	b.n	8006696 <__ieee754_pow+0x12e>
 800676a:	429c      	cmp	r4, r3
 800676c:	dbf7      	blt.n	800675e <__ieee754_pow+0x1f6>
 800676e:	4b09      	ldr	r3, [pc, #36]	; (8006794 <__ieee754_pow+0x22c>)
 8006770:	429c      	cmp	r4, r3
 8006772:	dd17      	ble.n	80067a4 <__ieee754_pow+0x23c>
 8006774:	2f00      	cmp	r7, #0
 8006776:	dcf4      	bgt.n	8006762 <__ieee754_pow+0x1fa>
 8006778:	e778      	b.n	800666c <__ieee754_pow+0x104>
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	8800759c 	.word	0x8800759c
 8006784:	7e37e43c 	.word	0x7e37e43c
 8006788:	7ff00000 	.word	0x7ff00000
 800678c:	08008fb5 	.word	0x08008fb5
 8006790:	433fffff 	.word	0x433fffff
 8006794:	3ff00000 	.word	0x3ff00000
 8006798:	3fefffff 	.word	0x3fefffff
 800679c:	3fe00000 	.word	0x3fe00000
 80067a0:	41e00000 	.word	0x41e00000
 80067a4:	4b64      	ldr	r3, [pc, #400]	; (8006938 <__ieee754_pow+0x3d0>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	f7f9 fd86 	bl	80002b8 <__aeabi_dsub>
 80067ac:	a356      	add	r3, pc, #344	; (adr r3, 8006908 <__ieee754_pow+0x3a0>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	4604      	mov	r4, r0
 80067b4:	460d      	mov	r5, r1
 80067b6:	f7f9 ff37 	bl	8000628 <__aeabi_dmul>
 80067ba:	a355      	add	r3, pc, #340	; (adr r3, 8006910 <__ieee754_pow+0x3a8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	4606      	mov	r6, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7f9 ff2e 	bl	8000628 <__aeabi_dmul>
 80067cc:	4b5b      	ldr	r3, [pc, #364]	; (800693c <__ieee754_pow+0x3d4>)
 80067ce:	4682      	mov	sl, r0
 80067d0:	468b      	mov	fp, r1
 80067d2:	2200      	movs	r2, #0
 80067d4:	4620      	mov	r0, r4
 80067d6:	4629      	mov	r1, r5
 80067d8:	f7f9 ff26 	bl	8000628 <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	a14d      	add	r1, pc, #308	; (adr r1, 8006918 <__ieee754_pow+0x3b0>)
 80067e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e6:	f7f9 fd67 	bl	80002b8 <__aeabi_dsub>
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	f7f9 ff1b 	bl	8000628 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	2000      	movs	r0, #0
 80067f8:	4951      	ldr	r1, [pc, #324]	; (8006940 <__ieee754_pow+0x3d8>)
 80067fa:	f7f9 fd5d 	bl	80002b8 <__aeabi_dsub>
 80067fe:	4622      	mov	r2, r4
 8006800:	4680      	mov	r8, r0
 8006802:	4689      	mov	r9, r1
 8006804:	462b      	mov	r3, r5
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7f9 ff0d 	bl	8000628 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7f9 ff07 	bl	8000628 <__aeabi_dmul>
 800681a:	a341      	add	r3, pc, #260	; (adr r3, 8006920 <__ieee754_pow+0x3b8>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 ff02 	bl	8000628 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4650      	mov	r0, sl
 800682a:	4659      	mov	r1, fp
 800682c:	f7f9 fd44 	bl	80002b8 <__aeabi_dsub>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4680      	mov	r8, r0
 8006836:	4689      	mov	r9, r1
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7f9 fd3e 	bl	80002bc <__adddf3>
 8006840:	2400      	movs	r4, #0
 8006842:	4632      	mov	r2, r6
 8006844:	463b      	mov	r3, r7
 8006846:	4620      	mov	r0, r4
 8006848:	460d      	mov	r5, r1
 800684a:	f7f9 fd35 	bl	80002b8 <__aeabi_dsub>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7f9 fd2f 	bl	80002b8 <__aeabi_dsub>
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685e:	3b01      	subs	r3, #1
 8006860:	4313      	orrs	r3, r2
 8006862:	4682      	mov	sl, r0
 8006864:	468b      	mov	fp, r1
 8006866:	f040 81f1 	bne.w	8006c4c <__ieee754_pow+0x6e4>
 800686a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006928 <__ieee754_pow+0x3c0>
 800686e:	eeb0 8a47 	vmov.f32	s16, s14
 8006872:	eef0 8a67 	vmov.f32	s17, s15
 8006876:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800687a:	2600      	movs	r6, #0
 800687c:	4632      	mov	r2, r6
 800687e:	463b      	mov	r3, r7
 8006880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006884:	f7f9 fd18 	bl	80002b8 <__aeabi_dsub>
 8006888:	4622      	mov	r2, r4
 800688a:	462b      	mov	r3, r5
 800688c:	f7f9 fecc 	bl	8000628 <__aeabi_dmul>
 8006890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	4650      	mov	r0, sl
 800689a:	4659      	mov	r1, fp
 800689c:	f7f9 fec4 	bl	8000628 <__aeabi_dmul>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4640      	mov	r0, r8
 80068a6:	4649      	mov	r1, r9
 80068a8:	f7f9 fd08 	bl	80002bc <__adddf3>
 80068ac:	4632      	mov	r2, r6
 80068ae:	463b      	mov	r3, r7
 80068b0:	4680      	mov	r8, r0
 80068b2:	4689      	mov	r9, r1
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 feb6 	bl	8000628 <__aeabi_dmul>
 80068bc:	460b      	mov	r3, r1
 80068be:	4604      	mov	r4, r0
 80068c0:	460d      	mov	r5, r1
 80068c2:	4602      	mov	r2, r0
 80068c4:	4649      	mov	r1, r9
 80068c6:	4640      	mov	r0, r8
 80068c8:	f7f9 fcf8 	bl	80002bc <__adddf3>
 80068cc:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <__ieee754_pow+0x3dc>)
 80068ce:	4299      	cmp	r1, r3
 80068d0:	ec45 4b19 	vmov	d9, r4, r5
 80068d4:	4606      	mov	r6, r0
 80068d6:	460f      	mov	r7, r1
 80068d8:	468b      	mov	fp, r1
 80068da:	f340 82fe 	ble.w	8006eda <__ieee754_pow+0x972>
 80068de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80068e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80068e6:	4303      	orrs	r3, r0
 80068e8:	f000 81f0 	beq.w	8006ccc <__ieee754_pow+0x764>
 80068ec:	a310      	add	r3, pc, #64	; (adr r3, 8006930 <__ieee754_pow+0x3c8>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	ec51 0b18 	vmov	r0, r1, d8
 80068f6:	f7f9 fe97 	bl	8000628 <__aeabi_dmul>
 80068fa:	a30d      	add	r3, pc, #52	; (adr r3, 8006930 <__ieee754_pow+0x3c8>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	e6cb      	b.n	800669a <__ieee754_pow+0x132>
 8006902:	bf00      	nop
 8006904:	f3af 8000 	nop.w
 8006908:	60000000 	.word	0x60000000
 800690c:	3ff71547 	.word	0x3ff71547
 8006910:	f85ddf44 	.word	0xf85ddf44
 8006914:	3e54ae0b 	.word	0x3e54ae0b
 8006918:	55555555 	.word	0x55555555
 800691c:	3fd55555 	.word	0x3fd55555
 8006920:	652b82fe 	.word	0x652b82fe
 8006924:	3ff71547 	.word	0x3ff71547
 8006928:	00000000 	.word	0x00000000
 800692c:	bff00000 	.word	0xbff00000
 8006930:	8800759c 	.word	0x8800759c
 8006934:	7e37e43c 	.word	0x7e37e43c
 8006938:	3ff00000 	.word	0x3ff00000
 800693c:	3fd00000 	.word	0x3fd00000
 8006940:	3fe00000 	.word	0x3fe00000
 8006944:	408fffff 	.word	0x408fffff
 8006948:	4bd7      	ldr	r3, [pc, #860]	; (8006ca8 <__ieee754_pow+0x740>)
 800694a:	ea03 0309 	and.w	r3, r3, r9
 800694e:	2200      	movs	r2, #0
 8006950:	b92b      	cbnz	r3, 800695e <__ieee754_pow+0x3f6>
 8006952:	4bd6      	ldr	r3, [pc, #856]	; (8006cac <__ieee754_pow+0x744>)
 8006954:	f7f9 fe68 	bl	8000628 <__aeabi_dmul>
 8006958:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800695c:	460c      	mov	r4, r1
 800695e:	1523      	asrs	r3, r4, #20
 8006960:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006964:	4413      	add	r3, r2
 8006966:	9309      	str	r3, [sp, #36]	; 0x24
 8006968:	4bd1      	ldr	r3, [pc, #836]	; (8006cb0 <__ieee754_pow+0x748>)
 800696a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800696e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006972:	429c      	cmp	r4, r3
 8006974:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006978:	dd08      	ble.n	800698c <__ieee754_pow+0x424>
 800697a:	4bce      	ldr	r3, [pc, #824]	; (8006cb4 <__ieee754_pow+0x74c>)
 800697c:	429c      	cmp	r4, r3
 800697e:	f340 8163 	ble.w	8006c48 <__ieee754_pow+0x6e0>
 8006982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006984:	3301      	adds	r3, #1
 8006986:	9309      	str	r3, [sp, #36]	; 0x24
 8006988:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800698c:	2400      	movs	r4, #0
 800698e:	00e3      	lsls	r3, r4, #3
 8006990:	930b      	str	r3, [sp, #44]	; 0x2c
 8006992:	4bc9      	ldr	r3, [pc, #804]	; (8006cb8 <__ieee754_pow+0x750>)
 8006994:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006998:	ed93 7b00 	vldr	d7, [r3]
 800699c:	4629      	mov	r1, r5
 800699e:	ec53 2b17 	vmov	r2, r3, d7
 80069a2:	eeb0 8a47 	vmov.f32	s16, s14
 80069a6:	eef0 8a67 	vmov.f32	s17, s15
 80069aa:	4682      	mov	sl, r0
 80069ac:	f7f9 fc84 	bl	80002b8 <__aeabi_dsub>
 80069b0:	4652      	mov	r2, sl
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	462b      	mov	r3, r5
 80069b8:	ec51 0b18 	vmov	r0, r1, d8
 80069bc:	f7f9 fc7e 	bl	80002bc <__adddf3>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	2000      	movs	r0, #0
 80069c6:	49bd      	ldr	r1, [pc, #756]	; (8006cbc <__ieee754_pow+0x754>)
 80069c8:	f7f9 ff58 	bl	800087c <__aeabi_ddiv>
 80069cc:	ec41 0b19 	vmov	d9, r0, r1
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7f9 fe26 	bl	8000628 <__aeabi_dmul>
 80069dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e8:	2300      	movs	r3, #0
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80069f0:	46ab      	mov	fp, r5
 80069f2:	106d      	asrs	r5, r5, #1
 80069f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80069f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80069fc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006a00:	2200      	movs	r2, #0
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	4614      	mov	r4, r2
 8006a08:	461d      	mov	r5, r3
 8006a0a:	f7f9 fe0d 	bl	8000628 <__aeabi_dmul>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4630      	mov	r0, r6
 8006a14:	4639      	mov	r1, r7
 8006a16:	f7f9 fc4f 	bl	80002b8 <__aeabi_dsub>
 8006a1a:	ec53 2b18 	vmov	r2, r3, d8
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	4620      	mov	r0, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	f7f9 fc47 	bl	80002b8 <__aeabi_dsub>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4650      	mov	r0, sl
 8006a30:	4659      	mov	r1, fp
 8006a32:	f7f9 fc41 	bl	80002b8 <__aeabi_dsub>
 8006a36:	4642      	mov	r2, r8
 8006a38:	464b      	mov	r3, r9
 8006a3a:	f7f9 fdf5 	bl	8000628 <__aeabi_dmul>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 fc37 	bl	80002b8 <__aeabi_dsub>
 8006a4a:	ec53 2b19 	vmov	r2, r3, d9
 8006a4e:	f7f9 fdeb 	bl	8000628 <__aeabi_dmul>
 8006a52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a56:	ec41 0b18 	vmov	d8, r0, r1
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f7f9 fde3 	bl	8000628 <__aeabi_dmul>
 8006a62:	a37d      	add	r3, pc, #500	; (adr r3, 8006c58 <__ieee754_pow+0x6f0>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	f7f9 fddc 	bl	8000628 <__aeabi_dmul>
 8006a70:	a37b      	add	r3, pc, #492	; (adr r3, 8006c60 <__ieee754_pow+0x6f8>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fc21 	bl	80002bc <__adddf3>
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	f7f9 fdd3 	bl	8000628 <__aeabi_dmul>
 8006a82:	a379      	add	r3, pc, #484	; (adr r3, 8006c68 <__ieee754_pow+0x700>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fc18 	bl	80002bc <__adddf3>
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	462b      	mov	r3, r5
 8006a90:	f7f9 fdca 	bl	8000628 <__aeabi_dmul>
 8006a94:	a376      	add	r3, pc, #472	; (adr r3, 8006c70 <__ieee754_pow+0x708>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fc0f 	bl	80002bc <__adddf3>
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	f7f9 fdc1 	bl	8000628 <__aeabi_dmul>
 8006aa6:	a374      	add	r3, pc, #464	; (adr r3, 8006c78 <__ieee754_pow+0x710>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f7f9 fc06 	bl	80002bc <__adddf3>
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	462b      	mov	r3, r5
 8006ab4:	f7f9 fdb8 	bl	8000628 <__aeabi_dmul>
 8006ab8:	a371      	add	r3, pc, #452	; (adr r3, 8006c80 <__ieee754_pow+0x718>)
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f7f9 fbfd 	bl	80002bc <__adddf3>
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	460f      	mov	r7, r1
 8006ac8:	462b      	mov	r3, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fdab 	bl	8000628 <__aeabi_dmul>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7f9 fda5 	bl	8000628 <__aeabi_dmul>
 8006ade:	4642      	mov	r2, r8
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	460d      	mov	r5, r1
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aea:	f7f9 fbe7 	bl	80002bc <__adddf3>
 8006aee:	ec53 2b18 	vmov	r2, r3, d8
 8006af2:	f7f9 fd99 	bl	8000628 <__aeabi_dmul>
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f7f9 fbdf 	bl	80002bc <__adddf3>
 8006afe:	4642      	mov	r2, r8
 8006b00:	4682      	mov	sl, r0
 8006b02:	468b      	mov	fp, r1
 8006b04:	464b      	mov	r3, r9
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7f9 fd8d 	bl	8000628 <__aeabi_dmul>
 8006b0e:	4b6c      	ldr	r3, [pc, #432]	; (8006cc0 <__ieee754_pow+0x758>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	f7f9 fbd1 	bl	80002bc <__adddf3>
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	f7f9 fbcd 	bl	80002bc <__adddf3>
 8006b22:	9c04      	ldr	r4, [sp, #16]
 8006b24:	460d      	mov	r5, r1
 8006b26:	4622      	mov	r2, r4
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fd7b 	bl	8000628 <__aeabi_dmul>
 8006b32:	4b63      	ldr	r3, [pc, #396]	; (8006cc0 <__ieee754_pow+0x758>)
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fbbb 	bl	80002b8 <__aeabi_dsub>
 8006b42:	4632      	mov	r2, r6
 8006b44:	463b      	mov	r3, r7
 8006b46:	f7f9 fbb7 	bl	80002b8 <__aeabi_dsub>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4650      	mov	r0, sl
 8006b50:	4659      	mov	r1, fp
 8006b52:	f7f9 fbb1 	bl	80002b8 <__aeabi_dsub>
 8006b56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b5a:	f7f9 fd65 	bl	8000628 <__aeabi_dmul>
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4606      	mov	r6, r0
 8006b62:	460f      	mov	r7, r1
 8006b64:	462b      	mov	r3, r5
 8006b66:	ec51 0b18 	vmov	r0, r1, d8
 8006b6a:	f7f9 fd5d 	bl	8000628 <__aeabi_dmul>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4630      	mov	r0, r6
 8006b74:	4639      	mov	r1, r7
 8006b76:	f7f9 fba1 	bl	80002bc <__adddf3>
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 fb99 	bl	80002bc <__adddf3>
 8006b8a:	9c04      	ldr	r4, [sp, #16]
 8006b8c:	a33e      	add	r3, pc, #248	; (adr r3, 8006c88 <__ieee754_pow+0x720>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	4620      	mov	r0, r4
 8006b94:	460d      	mov	r5, r1
 8006b96:	f7f9 fd47 	bl	8000628 <__aeabi_dmul>
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	ec41 0b18 	vmov	d8, r0, r1
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f7f9 fb87 	bl	80002b8 <__aeabi_dsub>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4630      	mov	r0, r6
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f7f9 fb81 	bl	80002b8 <__aeabi_dsub>
 8006bb6:	a336      	add	r3, pc, #216	; (adr r3, 8006c90 <__ieee754_pow+0x728>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fd34 	bl	8000628 <__aeabi_dmul>
 8006bc0:	a335      	add	r3, pc, #212	; (adr r3, 8006c98 <__ieee754_pow+0x730>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	460f      	mov	r7, r1
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f7f9 fd2b 	bl	8000628 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	4639      	mov	r1, r7
 8006bda:	f7f9 fb6f 	bl	80002bc <__adddf3>
 8006bde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006be0:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <__ieee754_pow+0x75c>)
 8006be2:	4413      	add	r3, r2
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fb68 	bl	80002bc <__adddf3>
 8006bec:	4682      	mov	sl, r0
 8006bee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bf0:	468b      	mov	fp, r1
 8006bf2:	f7f9 fcaf 	bl	8000554 <__aeabi_i2d>
 8006bf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bf8:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <__ieee754_pow+0x760>)
 8006bfa:	4413      	add	r3, r2
 8006bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c00:	4606      	mov	r6, r0
 8006c02:	460f      	mov	r7, r1
 8006c04:	4652      	mov	r2, sl
 8006c06:	465b      	mov	r3, fp
 8006c08:	ec51 0b18 	vmov	r0, r1, d8
 8006c0c:	f7f9 fb56 	bl	80002bc <__adddf3>
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	f7f9 fb52 	bl	80002bc <__adddf3>
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	f7f9 fb4e 	bl	80002bc <__adddf3>
 8006c20:	9c04      	ldr	r4, [sp, #16]
 8006c22:	4632      	mov	r2, r6
 8006c24:	463b      	mov	r3, r7
 8006c26:	4620      	mov	r0, r4
 8006c28:	460d      	mov	r5, r1
 8006c2a:	f7f9 fb45 	bl	80002b8 <__aeabi_dsub>
 8006c2e:	4642      	mov	r2, r8
 8006c30:	464b      	mov	r3, r9
 8006c32:	f7f9 fb41 	bl	80002b8 <__aeabi_dsub>
 8006c36:	ec53 2b18 	vmov	r2, r3, d8
 8006c3a:	f7f9 fb3d 	bl	80002b8 <__aeabi_dsub>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4650      	mov	r0, sl
 8006c44:	4659      	mov	r1, fp
 8006c46:	e606      	b.n	8006856 <__ieee754_pow+0x2ee>
 8006c48:	2401      	movs	r4, #1
 8006c4a:	e6a0      	b.n	800698e <__ieee754_pow+0x426>
 8006c4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006ca0 <__ieee754_pow+0x738>
 8006c50:	e60d      	b.n	800686e <__ieee754_pow+0x306>
 8006c52:	bf00      	nop
 8006c54:	f3af 8000 	nop.w
 8006c58:	4a454eef 	.word	0x4a454eef
 8006c5c:	3fca7e28 	.word	0x3fca7e28
 8006c60:	93c9db65 	.word	0x93c9db65
 8006c64:	3fcd864a 	.word	0x3fcd864a
 8006c68:	a91d4101 	.word	0xa91d4101
 8006c6c:	3fd17460 	.word	0x3fd17460
 8006c70:	518f264d 	.word	0x518f264d
 8006c74:	3fd55555 	.word	0x3fd55555
 8006c78:	db6fabff 	.word	0xdb6fabff
 8006c7c:	3fdb6db6 	.word	0x3fdb6db6
 8006c80:	33333303 	.word	0x33333303
 8006c84:	3fe33333 	.word	0x3fe33333
 8006c88:	e0000000 	.word	0xe0000000
 8006c8c:	3feec709 	.word	0x3feec709
 8006c90:	dc3a03fd 	.word	0xdc3a03fd
 8006c94:	3feec709 	.word	0x3feec709
 8006c98:	145b01f5 	.word	0x145b01f5
 8006c9c:	be3e2fe0 	.word	0xbe3e2fe0
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	3ff00000 	.word	0x3ff00000
 8006ca8:	7ff00000 	.word	0x7ff00000
 8006cac:	43400000 	.word	0x43400000
 8006cb0:	0003988e 	.word	0x0003988e
 8006cb4:	000bb679 	.word	0x000bb679
 8006cb8:	08008d98 	.word	0x08008d98
 8006cbc:	3ff00000 	.word	0x3ff00000
 8006cc0:	40080000 	.word	0x40080000
 8006cc4:	08008db8 	.word	0x08008db8
 8006cc8:	08008da8 	.word	0x08008da8
 8006ccc:	a3b5      	add	r3, pc, #724	; (adr r3, 8006fa4 <__ieee754_pow+0xa3c>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f7f9 faf1 	bl	80002bc <__adddf3>
 8006cda:	4622      	mov	r2, r4
 8006cdc:	ec41 0b1a 	vmov	d10, r0, r1
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	f7f9 fae7 	bl	80002b8 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	ec51 0b1a 	vmov	r0, r1, d10
 8006cf2:	f7f9 ff29 	bl	8000b48 <__aeabi_dcmpgt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f47f adf8 	bne.w	80068ec <__ieee754_pow+0x384>
 8006cfc:	4aa4      	ldr	r2, [pc, #656]	; (8006f90 <__ieee754_pow+0xa28>)
 8006cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d02:	4293      	cmp	r3, r2
 8006d04:	f340 810b 	ble.w	8006f1e <__ieee754_pow+0x9b6>
 8006d08:	151b      	asrs	r3, r3, #20
 8006d0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006d0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006d12:	fa4a f303 	asr.w	r3, sl, r3
 8006d16:	445b      	add	r3, fp
 8006d18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006d1c:	4e9d      	ldr	r6, [pc, #628]	; (8006f94 <__ieee754_pow+0xa2c>)
 8006d1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006d22:	4116      	asrs	r6, r2
 8006d24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006d28:	2000      	movs	r0, #0
 8006d2a:	ea23 0106 	bic.w	r1, r3, r6
 8006d2e:	f1c2 0214 	rsb	r2, r2, #20
 8006d32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d36:	fa4a fa02 	asr.w	sl, sl, r2
 8006d3a:	f1bb 0f00 	cmp.w	fp, #0
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	bfb8      	it	lt
 8006d48:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d4c:	f7f9 fab4 	bl	80002b8 <__aeabi_dsub>
 8006d50:	ec41 0b19 	vmov	d9, r0, r1
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	ec51 0b19 	vmov	r0, r1, d9
 8006d5c:	f7f9 faae 	bl	80002bc <__adddf3>
 8006d60:	2400      	movs	r4, #0
 8006d62:	a379      	add	r3, pc, #484	; (adr r3, 8006f48 <__ieee754_pow+0x9e0>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	f7f9 fc5c 	bl	8000628 <__aeabi_dmul>
 8006d70:	ec53 2b19 	vmov	r2, r3, d9
 8006d74:	4606      	mov	r6, r0
 8006d76:	460f      	mov	r7, r1
 8006d78:	4620      	mov	r0, r4
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	f7f9 fa9c 	bl	80002b8 <__aeabi_dsub>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4640      	mov	r0, r8
 8006d86:	4649      	mov	r1, r9
 8006d88:	f7f9 fa96 	bl	80002b8 <__aeabi_dsub>
 8006d8c:	a370      	add	r3, pc, #448	; (adr r3, 8006f50 <__ieee754_pow+0x9e8>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fc49 	bl	8000628 <__aeabi_dmul>
 8006d96:	a370      	add	r3, pc, #448	; (adr r3, 8006f58 <__ieee754_pow+0x9f0>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	4689      	mov	r9, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fc40 	bl	8000628 <__aeabi_dmul>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4640      	mov	r0, r8
 8006dae:	4649      	mov	r1, r9
 8006db0:	f7f9 fa84 	bl	80002bc <__adddf3>
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	f7f9 fa7c 	bl	80002bc <__adddf3>
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	4680      	mov	r8, r0
 8006dca:	4689      	mov	r9, r1
 8006dcc:	f7f9 fa74 	bl	80002b8 <__aeabi_dsub>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fa6e 	bl	80002b8 <__aeabi_dsub>
 8006ddc:	4642      	mov	r2, r8
 8006dde:	4606      	mov	r6, r0
 8006de0:	460f      	mov	r7, r1
 8006de2:	464b      	mov	r3, r9
 8006de4:	4640      	mov	r0, r8
 8006de6:	4649      	mov	r1, r9
 8006de8:	f7f9 fc1e 	bl	8000628 <__aeabi_dmul>
 8006dec:	a35c      	add	r3, pc, #368	; (adr r3, 8006f60 <__ieee754_pow+0x9f8>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	4604      	mov	r4, r0
 8006df4:	460d      	mov	r5, r1
 8006df6:	f7f9 fc17 	bl	8000628 <__aeabi_dmul>
 8006dfa:	a35b      	add	r3, pc, #364	; (adr r3, 8006f68 <__ieee754_pow+0xa00>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fa5a 	bl	80002b8 <__aeabi_dsub>
 8006e04:	4622      	mov	r2, r4
 8006e06:	462b      	mov	r3, r5
 8006e08:	f7f9 fc0e 	bl	8000628 <__aeabi_dmul>
 8006e0c:	a358      	add	r3, pc, #352	; (adr r3, 8006f70 <__ieee754_pow+0xa08>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f7f9 fa53 	bl	80002bc <__adddf3>
 8006e16:	4622      	mov	r2, r4
 8006e18:	462b      	mov	r3, r5
 8006e1a:	f7f9 fc05 	bl	8000628 <__aeabi_dmul>
 8006e1e:	a356      	add	r3, pc, #344	; (adr r3, 8006f78 <__ieee754_pow+0xa10>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 fa48 	bl	80002b8 <__aeabi_dsub>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	f7f9 fbfc 	bl	8000628 <__aeabi_dmul>
 8006e30:	a353      	add	r3, pc, #332	; (adr r3, 8006f80 <__ieee754_pow+0xa18>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 fa41 	bl	80002bc <__adddf3>
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	f7f9 fbf3 	bl	8000628 <__aeabi_dmul>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 fa35 	bl	80002b8 <__aeabi_dsub>
 8006e4e:	4604      	mov	r4, r0
 8006e50:	460d      	mov	r5, r1
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 fbe5 	bl	8000628 <__aeabi_dmul>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	ec41 0b19 	vmov	d9, r0, r1
 8006e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 fa24 	bl	80002b8 <__aeabi_dsub>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	ec51 0b19 	vmov	r0, r1, d9
 8006e78:	f7f9 fd00 	bl	800087c <__aeabi_ddiv>
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	4604      	mov	r4, r0
 8006e80:	460d      	mov	r5, r1
 8006e82:	463b      	mov	r3, r7
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 fbce 	bl	8000628 <__aeabi_dmul>
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	f7f9 fa14 	bl	80002bc <__adddf3>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4620      	mov	r0, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7f9 fa0c 	bl	80002b8 <__aeabi_dsub>
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	f7f9 fa08 	bl	80002b8 <__aeabi_dsub>
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4602      	mov	r2, r0
 8006eac:	493a      	ldr	r1, [pc, #232]	; (8006f98 <__ieee754_pow+0xa30>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7f9 fa02 	bl	80002b8 <__aeabi_dsub>
 8006eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec2:	da2f      	bge.n	8006f24 <__ieee754_pow+0x9bc>
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	ed9d 0b00 	vldr	d0, [sp]
 8006eca:	f001 f919 	bl	8008100 <scalbn>
 8006ece:	ec51 0b10 	vmov	r0, r1, d0
 8006ed2:	ec53 2b18 	vmov	r2, r3, d8
 8006ed6:	f7ff bbe0 	b.w	800669a <__ieee754_pow+0x132>
 8006eda:	4b30      	ldr	r3, [pc, #192]	; (8006f9c <__ieee754_pow+0xa34>)
 8006edc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006ee0:	429e      	cmp	r6, r3
 8006ee2:	f77f af0b 	ble.w	8006cfc <__ieee754_pow+0x794>
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <__ieee754_pow+0xa38>)
 8006ee8:	440b      	add	r3, r1
 8006eea:	4303      	orrs	r3, r0
 8006eec:	d00b      	beq.n	8006f06 <__ieee754_pow+0x99e>
 8006eee:	a326      	add	r3, pc, #152	; (adr r3, 8006f88 <__ieee754_pow+0xa20>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	ec51 0b18 	vmov	r0, r1, d8
 8006ef8:	f7f9 fb96 	bl	8000628 <__aeabi_dmul>
 8006efc:	a322      	add	r3, pc, #136	; (adr r3, 8006f88 <__ieee754_pow+0xa20>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f7ff bbca 	b.w	800669a <__ieee754_pow+0x132>
 8006f06:	4622      	mov	r2, r4
 8006f08:	462b      	mov	r3, r5
 8006f0a:	f7f9 f9d5 	bl	80002b8 <__aeabi_dsub>
 8006f0e:	4642      	mov	r2, r8
 8006f10:	464b      	mov	r3, r9
 8006f12:	f7f9 fe0f 	bl	8000b34 <__aeabi_dcmpge>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f43f aef0 	beq.w	8006cfc <__ieee754_pow+0x794>
 8006f1c:	e7e7      	b.n	8006eee <__ieee754_pow+0x986>
 8006f1e:	f04f 0a00 	mov.w	sl, #0
 8006f22:	e717      	b.n	8006d54 <__ieee754_pow+0x7ec>
 8006f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	e7d2      	b.n	8006ed2 <__ieee754_pow+0x96a>
 8006f2c:	491a      	ldr	r1, [pc, #104]	; (8006f98 <__ieee754_pow+0xa30>)
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f7ff bb9e 	b.w	8006670 <__ieee754_pow+0x108>
 8006f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f38:	f7ff bb9a 	b.w	8006670 <__ieee754_pow+0x108>
 8006f3c:	9000      	str	r0, [sp, #0]
 8006f3e:	f7ff bb76 	b.w	800662e <__ieee754_pow+0xc6>
 8006f42:	2100      	movs	r1, #0
 8006f44:	f7ff bb60 	b.w	8006608 <__ieee754_pow+0xa0>
 8006f48:	00000000 	.word	0x00000000
 8006f4c:	3fe62e43 	.word	0x3fe62e43
 8006f50:	fefa39ef 	.word	0xfefa39ef
 8006f54:	3fe62e42 	.word	0x3fe62e42
 8006f58:	0ca86c39 	.word	0x0ca86c39
 8006f5c:	be205c61 	.word	0xbe205c61
 8006f60:	72bea4d0 	.word	0x72bea4d0
 8006f64:	3e663769 	.word	0x3e663769
 8006f68:	c5d26bf1 	.word	0xc5d26bf1
 8006f6c:	3ebbbd41 	.word	0x3ebbbd41
 8006f70:	af25de2c 	.word	0xaf25de2c
 8006f74:	3f11566a 	.word	0x3f11566a
 8006f78:	16bebd93 	.word	0x16bebd93
 8006f7c:	3f66c16c 	.word	0x3f66c16c
 8006f80:	5555553e 	.word	0x5555553e
 8006f84:	3fc55555 	.word	0x3fc55555
 8006f88:	c2f8f359 	.word	0xc2f8f359
 8006f8c:	01a56e1f 	.word	0x01a56e1f
 8006f90:	3fe00000 	.word	0x3fe00000
 8006f94:	000fffff 	.word	0x000fffff
 8006f98:	3ff00000 	.word	0x3ff00000
 8006f9c:	4090cbff 	.word	0x4090cbff
 8006fa0:	3f6f3400 	.word	0x3f6f3400
 8006fa4:	652b82fe 	.word	0x652b82fe
 8006fa8:	3c971547 	.word	0x3c971547
 8006fac:	00000000 	.word	0x00000000

08006fb0 <__ieee754_rem_pio2>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	ed2d 8b02 	vpush	{d8}
 8006fb8:	ec55 4b10 	vmov	r4, r5, d0
 8006fbc:	4bca      	ldr	r3, [pc, #808]	; (80072e8 <__ieee754_rem_pio2+0x338>)
 8006fbe:	b08b      	sub	sp, #44	; 0x2c
 8006fc0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006fc4:	4598      	cmp	r8, r3
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	9502      	str	r5, [sp, #8]
 8006fca:	dc08      	bgt.n	8006fde <__ieee754_rem_pio2+0x2e>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	ed80 0b00 	vstr	d0, [r0]
 8006fd4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006fd8:	f04f 0b00 	mov.w	fp, #0
 8006fdc:	e028      	b.n	8007030 <__ieee754_rem_pio2+0x80>
 8006fde:	4bc3      	ldr	r3, [pc, #780]	; (80072ec <__ieee754_rem_pio2+0x33c>)
 8006fe0:	4598      	cmp	r8, r3
 8006fe2:	dc78      	bgt.n	80070d6 <__ieee754_rem_pio2+0x126>
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	4ec2      	ldr	r6, [pc, #776]	; (80072f0 <__ieee754_rem_pio2+0x340>)
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	ee10 0a10 	vmov	r0, s0
 8006fee:	a3b0      	add	r3, pc, #704	; (adr r3, 80072b0 <__ieee754_rem_pio2+0x300>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	dd39      	ble.n	800706c <__ieee754_rem_pio2+0xbc>
 8006ff8:	f7f9 f95e 	bl	80002b8 <__aeabi_dsub>
 8006ffc:	45b0      	cmp	r8, r6
 8006ffe:	4604      	mov	r4, r0
 8007000:	460d      	mov	r5, r1
 8007002:	d01b      	beq.n	800703c <__ieee754_rem_pio2+0x8c>
 8007004:	a3ac      	add	r3, pc, #688	; (adr r3, 80072b8 <__ieee754_rem_pio2+0x308>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 f955 	bl	80002b8 <__aeabi_dsub>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	e9ca 2300 	strd	r2, r3, [sl]
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 f94d 	bl	80002b8 <__aeabi_dsub>
 800701e:	a3a6      	add	r3, pc, #664	; (adr r3, 80072b8 <__ieee754_rem_pio2+0x308>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 f948 	bl	80002b8 <__aeabi_dsub>
 8007028:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800702c:	f04f 0b01 	mov.w	fp, #1
 8007030:	4658      	mov	r0, fp
 8007032:	b00b      	add	sp, #44	; 0x2c
 8007034:	ecbd 8b02 	vpop	{d8}
 8007038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703c:	a3a0      	add	r3, pc, #640	; (adr r3, 80072c0 <__ieee754_rem_pio2+0x310>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 f939 	bl	80002b8 <__aeabi_dsub>
 8007046:	a3a0      	add	r3, pc, #640	; (adr r3, 80072c8 <__ieee754_rem_pio2+0x318>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
 8007050:	f7f9 f932 	bl	80002b8 <__aeabi_dsub>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	e9ca 2300 	strd	r2, r3, [sl]
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f7f9 f92a 	bl	80002b8 <__aeabi_dsub>
 8007064:	a398      	add	r3, pc, #608	; (adr r3, 80072c8 <__ieee754_rem_pio2+0x318>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	e7db      	b.n	8007024 <__ieee754_rem_pio2+0x74>
 800706c:	f7f9 f926 	bl	80002bc <__adddf3>
 8007070:	45b0      	cmp	r8, r6
 8007072:	4604      	mov	r4, r0
 8007074:	460d      	mov	r5, r1
 8007076:	d016      	beq.n	80070a6 <__ieee754_rem_pio2+0xf6>
 8007078:	a38f      	add	r3, pc, #572	; (adr r3, 80072b8 <__ieee754_rem_pio2+0x308>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 f91d 	bl	80002bc <__adddf3>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	e9ca 2300 	strd	r2, r3, [sl]
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 f913 	bl	80002b8 <__aeabi_dsub>
 8007092:	a389      	add	r3, pc, #548	; (adr r3, 80072b8 <__ieee754_rem_pio2+0x308>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 f910 	bl	80002bc <__adddf3>
 800709c:	f04f 3bff 	mov.w	fp, #4294967295
 80070a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070a4:	e7c4      	b.n	8007030 <__ieee754_rem_pio2+0x80>
 80070a6:	a386      	add	r3, pc, #536	; (adr r3, 80072c0 <__ieee754_rem_pio2+0x310>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 f906 	bl	80002bc <__adddf3>
 80070b0:	a385      	add	r3, pc, #532	; (adr r3, 80072c8 <__ieee754_rem_pio2+0x318>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	4604      	mov	r4, r0
 80070b8:	460d      	mov	r5, r1
 80070ba:	f7f9 f8ff 	bl	80002bc <__adddf3>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	e9ca 2300 	strd	r2, r3, [sl]
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 f8f5 	bl	80002b8 <__aeabi_dsub>
 80070ce:	a37e      	add	r3, pc, #504	; (adr r3, 80072c8 <__ieee754_rem_pio2+0x318>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	e7e0      	b.n	8007098 <__ieee754_rem_pio2+0xe8>
 80070d6:	4b87      	ldr	r3, [pc, #540]	; (80072f4 <__ieee754_rem_pio2+0x344>)
 80070d8:	4598      	cmp	r8, r3
 80070da:	f300 80d9 	bgt.w	8007290 <__ieee754_rem_pio2+0x2e0>
 80070de:	f7ff f8ff 	bl	80062e0 <fabs>
 80070e2:	ec55 4b10 	vmov	r4, r5, d0
 80070e6:	ee10 0a10 	vmov	r0, s0
 80070ea:	a379      	add	r3, pc, #484	; (adr r3, 80072d0 <__ieee754_rem_pio2+0x320>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 fa99 	bl	8000628 <__aeabi_dmul>
 80070f6:	4b80      	ldr	r3, [pc, #512]	; (80072f8 <__ieee754_rem_pio2+0x348>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	f7f9 f8df 	bl	80002bc <__adddf3>
 80070fe:	f7f9 fd43 	bl	8000b88 <__aeabi_d2iz>
 8007102:	4683      	mov	fp, r0
 8007104:	f7f9 fa26 	bl	8000554 <__aeabi_i2d>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	ec43 2b18 	vmov	d8, r2, r3
 8007110:	a367      	add	r3, pc, #412	; (adr r3, 80072b0 <__ieee754_rem_pio2+0x300>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 fa87 	bl	8000628 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4620      	mov	r0, r4
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 f8c9 	bl	80002b8 <__aeabi_dsub>
 8007126:	a364      	add	r3, pc, #400	; (adr r3, 80072b8 <__ieee754_rem_pio2+0x308>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	ec51 0b18 	vmov	r0, r1, d8
 8007134:	f7f9 fa78 	bl	8000628 <__aeabi_dmul>
 8007138:	f1bb 0f1f 	cmp.w	fp, #31
 800713c:	4604      	mov	r4, r0
 800713e:	460d      	mov	r5, r1
 8007140:	dc0d      	bgt.n	800715e <__ieee754_rem_pio2+0x1ae>
 8007142:	4b6e      	ldr	r3, [pc, #440]	; (80072fc <__ieee754_rem_pio2+0x34c>)
 8007144:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	4543      	cmp	r3, r8
 800714e:	d006      	beq.n	800715e <__ieee754_rem_pio2+0x1ae>
 8007150:	4622      	mov	r2, r4
 8007152:	462b      	mov	r3, r5
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 f8ae 	bl	80002b8 <__aeabi_dsub>
 800715c:	e00f      	b.n	800717e <__ieee754_rem_pio2+0x1ce>
 800715e:	462b      	mov	r3, r5
 8007160:	4622      	mov	r2, r4
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 f8a7 	bl	80002b8 <__aeabi_dsub>
 800716a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800716e:	9303      	str	r3, [sp, #12]
 8007170:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007174:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007178:	f1b8 0f10 	cmp.w	r8, #16
 800717c:	dc02      	bgt.n	8007184 <__ieee754_rem_pio2+0x1d4>
 800717e:	e9ca 0100 	strd	r0, r1, [sl]
 8007182:	e039      	b.n	80071f8 <__ieee754_rem_pio2+0x248>
 8007184:	a34e      	add	r3, pc, #312	; (adr r3, 80072c0 <__ieee754_rem_pio2+0x310>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	ec51 0b18 	vmov	r0, r1, d8
 800718e:	f7f9 fa4b 	bl	8000628 <__aeabi_dmul>
 8007192:	4604      	mov	r4, r0
 8007194:	460d      	mov	r5, r1
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 f88b 	bl	80002b8 <__aeabi_dsub>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4680      	mov	r8, r0
 80071a8:	4689      	mov	r9, r1
 80071aa:	4630      	mov	r0, r6
 80071ac:	4639      	mov	r1, r7
 80071ae:	f7f9 f883 	bl	80002b8 <__aeabi_dsub>
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	f7f9 f87f 	bl	80002b8 <__aeabi_dsub>
 80071ba:	a343      	add	r3, pc, #268	; (adr r3, 80072c8 <__ieee754_rem_pio2+0x318>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	4604      	mov	r4, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	ec51 0b18 	vmov	r0, r1, d8
 80071c8:	f7f9 fa2e 	bl	8000628 <__aeabi_dmul>
 80071cc:	4622      	mov	r2, r4
 80071ce:	462b      	mov	r3, r5
 80071d0:	f7f9 f872 	bl	80002b8 <__aeabi_dsub>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	4640      	mov	r0, r8
 80071de:	4649      	mov	r1, r9
 80071e0:	f7f9 f86a 	bl	80002b8 <__aeabi_dsub>
 80071e4:	9a03      	ldr	r2, [sp, #12]
 80071e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b31      	cmp	r3, #49	; 0x31
 80071ee:	dc24      	bgt.n	800723a <__ieee754_rem_pio2+0x28a>
 80071f0:	e9ca 0100 	strd	r0, r1, [sl]
 80071f4:	4646      	mov	r6, r8
 80071f6:	464f      	mov	r7, r9
 80071f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80071fc:	4630      	mov	r0, r6
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 f858 	bl	80002b8 <__aeabi_dsub>
 8007208:	462b      	mov	r3, r5
 800720a:	4622      	mov	r2, r4
 800720c:	f7f9 f854 	bl	80002b8 <__aeabi_dsub>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007218:	f6bf af0a 	bge.w	8007030 <__ieee754_rem_pio2+0x80>
 800721c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007220:	f8ca 3004 	str.w	r3, [sl, #4]
 8007224:	f8ca 8000 	str.w	r8, [sl]
 8007228:	f8ca 0008 	str.w	r0, [sl, #8]
 800722c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007230:	f8ca 300c 	str.w	r3, [sl, #12]
 8007234:	f1cb 0b00 	rsb	fp, fp, #0
 8007238:	e6fa      	b.n	8007030 <__ieee754_rem_pio2+0x80>
 800723a:	a327      	add	r3, pc, #156	; (adr r3, 80072d8 <__ieee754_rem_pio2+0x328>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	ec51 0b18 	vmov	r0, r1, d8
 8007244:	f7f9 f9f0 	bl	8000628 <__aeabi_dmul>
 8007248:	4604      	mov	r4, r0
 800724a:	460d      	mov	r5, r1
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4640      	mov	r0, r8
 8007252:	4649      	mov	r1, r9
 8007254:	f7f9 f830 	bl	80002b8 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f7f9 f828 	bl	80002b8 <__aeabi_dsub>
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	f7f9 f824 	bl	80002b8 <__aeabi_dsub>
 8007270:	a31b      	add	r3, pc, #108	; (adr r3, 80072e0 <__ieee754_rem_pio2+0x330>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	ec51 0b18 	vmov	r0, r1, d8
 800727e:	f7f9 f9d3 	bl	8000628 <__aeabi_dmul>
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	f7f9 f817 	bl	80002b8 <__aeabi_dsub>
 800728a:	4604      	mov	r4, r0
 800728c:	460d      	mov	r5, r1
 800728e:	e75f      	b.n	8007150 <__ieee754_rem_pio2+0x1a0>
 8007290:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <__ieee754_rem_pio2+0x350>)
 8007292:	4598      	cmp	r8, r3
 8007294:	dd36      	ble.n	8007304 <__ieee754_rem_pio2+0x354>
 8007296:	ee10 2a10 	vmov	r2, s0
 800729a:	462b      	mov	r3, r5
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 f80a 	bl	80002b8 <__aeabi_dsub>
 80072a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072a8:	e9ca 0100 	strd	r0, r1, [sl]
 80072ac:	e694      	b.n	8006fd8 <__ieee754_rem_pio2+0x28>
 80072ae:	bf00      	nop
 80072b0:	54400000 	.word	0x54400000
 80072b4:	3ff921fb 	.word	0x3ff921fb
 80072b8:	1a626331 	.word	0x1a626331
 80072bc:	3dd0b461 	.word	0x3dd0b461
 80072c0:	1a600000 	.word	0x1a600000
 80072c4:	3dd0b461 	.word	0x3dd0b461
 80072c8:	2e037073 	.word	0x2e037073
 80072cc:	3ba3198a 	.word	0x3ba3198a
 80072d0:	6dc9c883 	.word	0x6dc9c883
 80072d4:	3fe45f30 	.word	0x3fe45f30
 80072d8:	2e000000 	.word	0x2e000000
 80072dc:	3ba3198a 	.word	0x3ba3198a
 80072e0:	252049c1 	.word	0x252049c1
 80072e4:	397b839a 	.word	0x397b839a
 80072e8:	3fe921fb 	.word	0x3fe921fb
 80072ec:	4002d97b 	.word	0x4002d97b
 80072f0:	3ff921fb 	.word	0x3ff921fb
 80072f4:	413921fb 	.word	0x413921fb
 80072f8:	3fe00000 	.word	0x3fe00000
 80072fc:	08008dc8 	.word	0x08008dc8
 8007300:	7fefffff 	.word	0x7fefffff
 8007304:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007308:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800730c:	ee10 0a10 	vmov	r0, s0
 8007310:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007314:	ee10 6a10 	vmov	r6, s0
 8007318:	460f      	mov	r7, r1
 800731a:	f7f9 fc35 	bl	8000b88 <__aeabi_d2iz>
 800731e:	f7f9 f919 	bl	8000554 <__aeabi_i2d>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800732e:	f7f8 ffc3 	bl	80002b8 <__aeabi_dsub>
 8007332:	4b22      	ldr	r3, [pc, #136]	; (80073bc <__ieee754_rem_pio2+0x40c>)
 8007334:	2200      	movs	r2, #0
 8007336:	f7f9 f977 	bl	8000628 <__aeabi_dmul>
 800733a:	460f      	mov	r7, r1
 800733c:	4606      	mov	r6, r0
 800733e:	f7f9 fc23 	bl	8000b88 <__aeabi_d2iz>
 8007342:	f7f9 f907 	bl	8000554 <__aeabi_i2d>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007352:	f7f8 ffb1 	bl	80002b8 <__aeabi_dsub>
 8007356:	4b19      	ldr	r3, [pc, #100]	; (80073bc <__ieee754_rem_pio2+0x40c>)
 8007358:	2200      	movs	r2, #0
 800735a:	f7f9 f965 	bl	8000628 <__aeabi_dmul>
 800735e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007362:	ad04      	add	r5, sp, #16
 8007364:	f04f 0803 	mov.w	r8, #3
 8007368:	46a9      	mov	r9, r5
 800736a:	2600      	movs	r6, #0
 800736c:	2700      	movs	r7, #0
 800736e:	4632      	mov	r2, r6
 8007370:	463b      	mov	r3, r7
 8007372:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007376:	46c3      	mov	fp, r8
 8007378:	3d08      	subs	r5, #8
 800737a:	f108 38ff 	add.w	r8, r8, #4294967295
 800737e:	f7f9 fbbb 	bl	8000af8 <__aeabi_dcmpeq>
 8007382:	2800      	cmp	r0, #0
 8007384:	d1f3      	bne.n	800736e <__ieee754_rem_pio2+0x3be>
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <__ieee754_rem_pio2+0x410>)
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	2302      	movs	r3, #2
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4622      	mov	r2, r4
 8007390:	465b      	mov	r3, fp
 8007392:	4651      	mov	r1, sl
 8007394:	4648      	mov	r0, r9
 8007396:	f000 f993 	bl	80076c0 <__kernel_rem_pio2>
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	4683      	mov	fp, r0
 80073a0:	f6bf ae46 	bge.w	8007030 <__ieee754_rem_pio2+0x80>
 80073a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80073a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	f8ca 3004 	str.w	r3, [sl, #4]
 80073b0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80073b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073b8:	e73a      	b.n	8007230 <__ieee754_rem_pio2+0x280>
 80073ba:	bf00      	nop
 80073bc:	41700000 	.word	0x41700000
 80073c0:	08008e48 	.word	0x08008e48

080073c4 <__ieee754_sqrt>:
 80073c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	ec55 4b10 	vmov	r4, r5, d0
 80073cc:	4e56      	ldr	r6, [pc, #344]	; (8007528 <__ieee754_sqrt+0x164>)
 80073ce:	43ae      	bics	r6, r5
 80073d0:	ee10 0a10 	vmov	r0, s0
 80073d4:	ee10 3a10 	vmov	r3, s0
 80073d8:	4629      	mov	r1, r5
 80073da:	462a      	mov	r2, r5
 80073dc:	d110      	bne.n	8007400 <__ieee754_sqrt+0x3c>
 80073de:	ee10 2a10 	vmov	r2, s0
 80073e2:	462b      	mov	r3, r5
 80073e4:	f7f9 f920 	bl	8000628 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f8 ff64 	bl	80002bc <__adddf3>
 80073f4:	4604      	mov	r4, r0
 80073f6:	460d      	mov	r5, r1
 80073f8:	ec45 4b10 	vmov	d0, r4, r5
 80073fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007400:	2d00      	cmp	r5, #0
 8007402:	dc10      	bgt.n	8007426 <__ieee754_sqrt+0x62>
 8007404:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007408:	4330      	orrs	r0, r6
 800740a:	d0f5      	beq.n	80073f8 <__ieee754_sqrt+0x34>
 800740c:	b15d      	cbz	r5, 8007426 <__ieee754_sqrt+0x62>
 800740e:	ee10 2a10 	vmov	r2, s0
 8007412:	462b      	mov	r3, r5
 8007414:	ee10 0a10 	vmov	r0, s0
 8007418:	f7f8 ff4e 	bl	80002b8 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	f7f9 fa2c 	bl	800087c <__aeabi_ddiv>
 8007424:	e7e6      	b.n	80073f4 <__ieee754_sqrt+0x30>
 8007426:	1509      	asrs	r1, r1, #20
 8007428:	d076      	beq.n	8007518 <__ieee754_sqrt+0x154>
 800742a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800742e:	07ce      	lsls	r6, r1, #31
 8007430:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007434:	bf5e      	ittt	pl
 8007436:	0fda      	lsrpl	r2, r3, #31
 8007438:	005b      	lslpl	r3, r3, #1
 800743a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800743e:	0fda      	lsrs	r2, r3, #31
 8007440:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007444:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007448:	2000      	movs	r0, #0
 800744a:	106d      	asrs	r5, r5, #1
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	f04f 0e16 	mov.w	lr, #22
 8007452:	4684      	mov	ip, r0
 8007454:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007458:	eb0c 0401 	add.w	r4, ip, r1
 800745c:	4294      	cmp	r4, r2
 800745e:	bfde      	ittt	le
 8007460:	1b12      	suble	r2, r2, r4
 8007462:	eb04 0c01 	addle.w	ip, r4, r1
 8007466:	1840      	addle	r0, r0, r1
 8007468:	0052      	lsls	r2, r2, #1
 800746a:	f1be 0e01 	subs.w	lr, lr, #1
 800746e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007472:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007476:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800747a:	d1ed      	bne.n	8007458 <__ieee754_sqrt+0x94>
 800747c:	4671      	mov	r1, lr
 800747e:	2720      	movs	r7, #32
 8007480:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007484:	4562      	cmp	r2, ip
 8007486:	eb04 060e 	add.w	r6, r4, lr
 800748a:	dc02      	bgt.n	8007492 <__ieee754_sqrt+0xce>
 800748c:	d113      	bne.n	80074b6 <__ieee754_sqrt+0xf2>
 800748e:	429e      	cmp	r6, r3
 8007490:	d811      	bhi.n	80074b6 <__ieee754_sqrt+0xf2>
 8007492:	2e00      	cmp	r6, #0
 8007494:	eb06 0e04 	add.w	lr, r6, r4
 8007498:	da43      	bge.n	8007522 <__ieee754_sqrt+0x15e>
 800749a:	f1be 0f00 	cmp.w	lr, #0
 800749e:	db40      	blt.n	8007522 <__ieee754_sqrt+0x15e>
 80074a0:	f10c 0801 	add.w	r8, ip, #1
 80074a4:	eba2 020c 	sub.w	r2, r2, ip
 80074a8:	429e      	cmp	r6, r3
 80074aa:	bf88      	it	hi
 80074ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80074b0:	1b9b      	subs	r3, r3, r6
 80074b2:	4421      	add	r1, r4
 80074b4:	46c4      	mov	ip, r8
 80074b6:	0052      	lsls	r2, r2, #1
 80074b8:	3f01      	subs	r7, #1
 80074ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80074be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80074c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074c6:	d1dd      	bne.n	8007484 <__ieee754_sqrt+0xc0>
 80074c8:	4313      	orrs	r3, r2
 80074ca:	d006      	beq.n	80074da <__ieee754_sqrt+0x116>
 80074cc:	1c4c      	adds	r4, r1, #1
 80074ce:	bf13      	iteet	ne
 80074d0:	3101      	addne	r1, #1
 80074d2:	3001      	addeq	r0, #1
 80074d4:	4639      	moveq	r1, r7
 80074d6:	f021 0101 	bicne.w	r1, r1, #1
 80074da:	1043      	asrs	r3, r0, #1
 80074dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074e0:	0849      	lsrs	r1, r1, #1
 80074e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80074e6:	07c2      	lsls	r2, r0, #31
 80074e8:	bf48      	it	mi
 80074ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80074ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80074f2:	460c      	mov	r4, r1
 80074f4:	463d      	mov	r5, r7
 80074f6:	e77f      	b.n	80073f8 <__ieee754_sqrt+0x34>
 80074f8:	0ada      	lsrs	r2, r3, #11
 80074fa:	3815      	subs	r0, #21
 80074fc:	055b      	lsls	r3, r3, #21
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d0fa      	beq.n	80074f8 <__ieee754_sqrt+0x134>
 8007502:	02d7      	lsls	r7, r2, #11
 8007504:	d50a      	bpl.n	800751c <__ieee754_sqrt+0x158>
 8007506:	f1c1 0420 	rsb	r4, r1, #32
 800750a:	fa23 f404 	lsr.w	r4, r3, r4
 800750e:	1e4d      	subs	r5, r1, #1
 8007510:	408b      	lsls	r3, r1
 8007512:	4322      	orrs	r2, r4
 8007514:	1b41      	subs	r1, r0, r5
 8007516:	e788      	b.n	800742a <__ieee754_sqrt+0x66>
 8007518:	4608      	mov	r0, r1
 800751a:	e7f0      	b.n	80074fe <__ieee754_sqrt+0x13a>
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	3101      	adds	r1, #1
 8007520:	e7ef      	b.n	8007502 <__ieee754_sqrt+0x13e>
 8007522:	46e0      	mov	r8, ip
 8007524:	e7be      	b.n	80074a4 <__ieee754_sqrt+0xe0>
 8007526:	bf00      	nop
 8007528:	7ff00000 	.word	0x7ff00000
 800752c:	00000000 	.word	0x00000000

08007530 <__kernel_cos>:
 8007530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	ec57 6b10 	vmov	r6, r7, d0
 8007538:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800753c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007540:	ed8d 1b00 	vstr	d1, [sp]
 8007544:	da07      	bge.n	8007556 <__kernel_cos+0x26>
 8007546:	ee10 0a10 	vmov	r0, s0
 800754a:	4639      	mov	r1, r7
 800754c:	f7f9 fb1c 	bl	8000b88 <__aeabi_d2iz>
 8007550:	2800      	cmp	r0, #0
 8007552:	f000 8088 	beq.w	8007666 <__kernel_cos+0x136>
 8007556:	4632      	mov	r2, r6
 8007558:	463b      	mov	r3, r7
 800755a:	4630      	mov	r0, r6
 800755c:	4639      	mov	r1, r7
 800755e:	f7f9 f863 	bl	8000628 <__aeabi_dmul>
 8007562:	4b51      	ldr	r3, [pc, #324]	; (80076a8 <__kernel_cos+0x178>)
 8007564:	2200      	movs	r2, #0
 8007566:	4604      	mov	r4, r0
 8007568:	460d      	mov	r5, r1
 800756a:	f7f9 f85d 	bl	8000628 <__aeabi_dmul>
 800756e:	a340      	add	r3, pc, #256	; (adr r3, 8007670 <__kernel_cos+0x140>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	4682      	mov	sl, r0
 8007576:	468b      	mov	fp, r1
 8007578:	4620      	mov	r0, r4
 800757a:	4629      	mov	r1, r5
 800757c:	f7f9 f854 	bl	8000628 <__aeabi_dmul>
 8007580:	a33d      	add	r3, pc, #244	; (adr r3, 8007678 <__kernel_cos+0x148>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fe99 	bl	80002bc <__adddf3>
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	f7f9 f84b 	bl	8000628 <__aeabi_dmul>
 8007592:	a33b      	add	r3, pc, #236	; (adr r3, 8007680 <__kernel_cos+0x150>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 fe8e 	bl	80002b8 <__aeabi_dsub>
 800759c:	4622      	mov	r2, r4
 800759e:	462b      	mov	r3, r5
 80075a0:	f7f9 f842 	bl	8000628 <__aeabi_dmul>
 80075a4:	a338      	add	r3, pc, #224	; (adr r3, 8007688 <__kernel_cos+0x158>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fe87 	bl	80002bc <__adddf3>
 80075ae:	4622      	mov	r2, r4
 80075b0:	462b      	mov	r3, r5
 80075b2:	f7f9 f839 	bl	8000628 <__aeabi_dmul>
 80075b6:	a336      	add	r3, pc, #216	; (adr r3, 8007690 <__kernel_cos+0x160>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe7c 	bl	80002b8 <__aeabi_dsub>
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f7f9 f830 	bl	8000628 <__aeabi_dmul>
 80075c8:	a333      	add	r3, pc, #204	; (adr r3, 8007698 <__kernel_cos+0x168>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 fe75 	bl	80002bc <__adddf3>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f9 f827 	bl	8000628 <__aeabi_dmul>
 80075da:	4622      	mov	r2, r4
 80075dc:	462b      	mov	r3, r5
 80075de:	f7f9 f823 	bl	8000628 <__aeabi_dmul>
 80075e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f9 f81b 	bl	8000628 <__aeabi_dmul>
 80075f2:	460b      	mov	r3, r1
 80075f4:	4602      	mov	r2, r0
 80075f6:	4629      	mov	r1, r5
 80075f8:	4620      	mov	r0, r4
 80075fa:	f7f8 fe5d 	bl	80002b8 <__aeabi_dsub>
 80075fe:	4b2b      	ldr	r3, [pc, #172]	; (80076ac <__kernel_cos+0x17c>)
 8007600:	4598      	cmp	r8, r3
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	dc10      	bgt.n	800762a <__kernel_cos+0xfa>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4650      	mov	r0, sl
 800760e:	4659      	mov	r1, fp
 8007610:	f7f8 fe52 	bl	80002b8 <__aeabi_dsub>
 8007614:	460b      	mov	r3, r1
 8007616:	4926      	ldr	r1, [pc, #152]	; (80076b0 <__kernel_cos+0x180>)
 8007618:	4602      	mov	r2, r0
 800761a:	2000      	movs	r0, #0
 800761c:	f7f8 fe4c 	bl	80002b8 <__aeabi_dsub>
 8007620:	ec41 0b10 	vmov	d0, r0, r1
 8007624:	b003      	add	sp, #12
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	4b22      	ldr	r3, [pc, #136]	; (80076b4 <__kernel_cos+0x184>)
 800762c:	4920      	ldr	r1, [pc, #128]	; (80076b0 <__kernel_cos+0x180>)
 800762e:	4598      	cmp	r8, r3
 8007630:	bfcc      	ite	gt
 8007632:	4d21      	ldrgt	r5, [pc, #132]	; (80076b8 <__kernel_cos+0x188>)
 8007634:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007638:	2400      	movs	r4, #0
 800763a:	4622      	mov	r2, r4
 800763c:	462b      	mov	r3, r5
 800763e:	2000      	movs	r0, #0
 8007640:	f7f8 fe3a 	bl	80002b8 <__aeabi_dsub>
 8007644:	4622      	mov	r2, r4
 8007646:	4680      	mov	r8, r0
 8007648:	4689      	mov	r9, r1
 800764a:	462b      	mov	r3, r5
 800764c:	4650      	mov	r0, sl
 800764e:	4659      	mov	r1, fp
 8007650:	f7f8 fe32 	bl	80002b8 <__aeabi_dsub>
 8007654:	4632      	mov	r2, r6
 8007656:	463b      	mov	r3, r7
 8007658:	f7f8 fe2e 	bl	80002b8 <__aeabi_dsub>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4640      	mov	r0, r8
 8007662:	4649      	mov	r1, r9
 8007664:	e7da      	b.n	800761c <__kernel_cos+0xec>
 8007666:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80076a0 <__kernel_cos+0x170>
 800766a:	e7db      	b.n	8007624 <__kernel_cos+0xf4>
 800766c:	f3af 8000 	nop.w
 8007670:	be8838d4 	.word	0xbe8838d4
 8007674:	bda8fae9 	.word	0xbda8fae9
 8007678:	bdb4b1c4 	.word	0xbdb4b1c4
 800767c:	3e21ee9e 	.word	0x3e21ee9e
 8007680:	809c52ad 	.word	0x809c52ad
 8007684:	3e927e4f 	.word	0x3e927e4f
 8007688:	19cb1590 	.word	0x19cb1590
 800768c:	3efa01a0 	.word	0x3efa01a0
 8007690:	16c15177 	.word	0x16c15177
 8007694:	3f56c16c 	.word	0x3f56c16c
 8007698:	5555554c 	.word	0x5555554c
 800769c:	3fa55555 	.word	0x3fa55555
 80076a0:	00000000 	.word	0x00000000
 80076a4:	3ff00000 	.word	0x3ff00000
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	3fd33332 	.word	0x3fd33332
 80076b0:	3ff00000 	.word	0x3ff00000
 80076b4:	3fe90000 	.word	0x3fe90000
 80076b8:	3fd20000 	.word	0x3fd20000
 80076bc:	00000000 	.word	0x00000000

080076c0 <__kernel_rem_pio2>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	ed2d 8b02 	vpush	{d8}
 80076c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80076cc:	f112 0f14 	cmn.w	r2, #20
 80076d0:	9308      	str	r3, [sp, #32]
 80076d2:	9101      	str	r1, [sp, #4]
 80076d4:	4bc6      	ldr	r3, [pc, #792]	; (80079f0 <__kernel_rem_pio2+0x330>)
 80076d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80076d8:	9009      	str	r0, [sp, #36]	; 0x24
 80076da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80076e6:	bfa8      	it	ge
 80076e8:	1ed4      	subge	r4, r2, #3
 80076ea:	9306      	str	r3, [sp, #24]
 80076ec:	bfb2      	itee	lt
 80076ee:	2400      	movlt	r4, #0
 80076f0:	2318      	movge	r3, #24
 80076f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80076f6:	f06f 0317 	mvn.w	r3, #23
 80076fa:	fb04 3303 	mla	r3, r4, r3, r3
 80076fe:	eb03 0a02 	add.w	sl, r3, r2
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	9a06      	ldr	r2, [sp, #24]
 8007706:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80079e0 <__kernel_rem_pio2+0x320>
 800770a:	eb03 0802 	add.w	r8, r3, r2
 800770e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007710:	1aa7      	subs	r7, r4, r2
 8007712:	ae20      	add	r6, sp, #128	; 0x80
 8007714:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007718:	2500      	movs	r5, #0
 800771a:	4545      	cmp	r5, r8
 800771c:	dd18      	ble.n	8007750 <__kernel_rem_pio2+0x90>
 800771e:	9b08      	ldr	r3, [sp, #32]
 8007720:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007724:	aa20      	add	r2, sp, #128	; 0x80
 8007726:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80079e0 <__kernel_rem_pio2+0x320>
 800772a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800772e:	f1c3 0301 	rsb	r3, r3, #1
 8007732:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007736:	9307      	str	r3, [sp, #28]
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	4443      	add	r3, r8
 800773e:	429a      	cmp	r2, r3
 8007740:	db2f      	blt.n	80077a2 <__kernel_rem_pio2+0xe2>
 8007742:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007746:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800774a:	462f      	mov	r7, r5
 800774c:	2600      	movs	r6, #0
 800774e:	e01b      	b.n	8007788 <__kernel_rem_pio2+0xc8>
 8007750:	42ef      	cmn	r7, r5
 8007752:	d407      	bmi.n	8007764 <__kernel_rem_pio2+0xa4>
 8007754:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007758:	f7f8 fefc 	bl	8000554 <__aeabi_i2d>
 800775c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007760:	3501      	adds	r5, #1
 8007762:	e7da      	b.n	800771a <__kernel_rem_pio2+0x5a>
 8007764:	ec51 0b18 	vmov	r0, r1, d8
 8007768:	e7f8      	b.n	800775c <__kernel_rem_pio2+0x9c>
 800776a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007772:	f7f8 ff59 	bl	8000628 <__aeabi_dmul>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777e:	f7f8 fd9d 	bl	80002bc <__adddf3>
 8007782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007786:	3601      	adds	r6, #1
 8007788:	9b06      	ldr	r3, [sp, #24]
 800778a:	429e      	cmp	r6, r3
 800778c:	f1a7 0708 	sub.w	r7, r7, #8
 8007790:	ddeb      	ble.n	800776a <__kernel_rem_pio2+0xaa>
 8007792:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007796:	3508      	adds	r5, #8
 8007798:	ecab 7b02 	vstmia	fp!, {d7}
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	e7ca      	b.n	8007738 <__kernel_rem_pio2+0x78>
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	aa0c      	add	r2, sp, #48	; 0x30
 80077a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ac:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80077ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077b2:	9c04      	ldr	r4, [sp, #16]
 80077b4:	930a      	str	r3, [sp, #40]	; 0x28
 80077b6:	ab98      	add	r3, sp, #608	; 0x260
 80077b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077bc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80077c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80077c4:	f8cd b008 	str.w	fp, [sp, #8]
 80077c8:	4625      	mov	r5, r4
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	dc78      	bgt.n	80078c0 <__kernel_rem_pio2+0x200>
 80077ce:	ec47 6b10 	vmov	d0, r6, r7
 80077d2:	4650      	mov	r0, sl
 80077d4:	f000 fc94 	bl	8008100 <scalbn>
 80077d8:	ec57 6b10 	vmov	r6, r7, d0
 80077dc:	2200      	movs	r2, #0
 80077de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80077e2:	ee10 0a10 	vmov	r0, s0
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 ff1e 	bl	8000628 <__aeabi_dmul>
 80077ec:	ec41 0b10 	vmov	d0, r0, r1
 80077f0:	f000 fb72 	bl	8007ed8 <floor>
 80077f4:	4b7f      	ldr	r3, [pc, #508]	; (80079f4 <__kernel_rem_pio2+0x334>)
 80077f6:	ec51 0b10 	vmov	r0, r1, d0
 80077fa:	2200      	movs	r2, #0
 80077fc:	f7f8 ff14 	bl	8000628 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f8 fd56 	bl	80002b8 <__aeabi_dsub>
 800780c:	460f      	mov	r7, r1
 800780e:	4606      	mov	r6, r0
 8007810:	f7f9 f9ba 	bl	8000b88 <__aeabi_d2iz>
 8007814:	9007      	str	r0, [sp, #28]
 8007816:	f7f8 fe9d 	bl	8000554 <__aeabi_i2d>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f8 fd49 	bl	80002b8 <__aeabi_dsub>
 8007826:	f1ba 0f00 	cmp.w	sl, #0
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	dd70      	ble.n	8007912 <__kernel_rem_pio2+0x252>
 8007830:	1e62      	subs	r2, r4, #1
 8007832:	ab0c      	add	r3, sp, #48	; 0x30
 8007834:	9d07      	ldr	r5, [sp, #28]
 8007836:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800783a:	f1ca 0118 	rsb	r1, sl, #24
 800783e:	fa40 f301 	asr.w	r3, r0, r1
 8007842:	441d      	add	r5, r3
 8007844:	408b      	lsls	r3, r1
 8007846:	1ac0      	subs	r0, r0, r3
 8007848:	ab0c      	add	r3, sp, #48	; 0x30
 800784a:	9507      	str	r5, [sp, #28]
 800784c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007850:	f1ca 0317 	rsb	r3, sl, #23
 8007854:	fa40 f303 	asr.w	r3, r0, r3
 8007858:	9302      	str	r3, [sp, #8]
 800785a:	9b02      	ldr	r3, [sp, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd66      	ble.n	800792e <__kernel_rem_pio2+0x26e>
 8007860:	9b07      	ldr	r3, [sp, #28]
 8007862:	2200      	movs	r2, #0
 8007864:	3301      	adds	r3, #1
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	4615      	mov	r5, r2
 800786a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800786e:	4294      	cmp	r4, r2
 8007870:	f300 8099 	bgt.w	80079a6 <__kernel_rem_pio2+0x2e6>
 8007874:	f1ba 0f00 	cmp.w	sl, #0
 8007878:	dd07      	ble.n	800788a <__kernel_rem_pio2+0x1ca>
 800787a:	f1ba 0f01 	cmp.w	sl, #1
 800787e:	f000 80a5 	beq.w	80079cc <__kernel_rem_pio2+0x30c>
 8007882:	f1ba 0f02 	cmp.w	sl, #2
 8007886:	f000 80c1 	beq.w	8007a0c <__kernel_rem_pio2+0x34c>
 800788a:	9b02      	ldr	r3, [sp, #8]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d14e      	bne.n	800792e <__kernel_rem_pio2+0x26e>
 8007890:	4632      	mov	r2, r6
 8007892:	463b      	mov	r3, r7
 8007894:	4958      	ldr	r1, [pc, #352]	; (80079f8 <__kernel_rem_pio2+0x338>)
 8007896:	2000      	movs	r0, #0
 8007898:	f7f8 fd0e 	bl	80002b8 <__aeabi_dsub>
 800789c:	4606      	mov	r6, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	d044      	beq.n	800792e <__kernel_rem_pio2+0x26e>
 80078a4:	4650      	mov	r0, sl
 80078a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80079e8 <__kernel_rem_pio2+0x328>
 80078aa:	f000 fc29 	bl	8008100 <scalbn>
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	ec53 2b10 	vmov	r2, r3, d0
 80078b6:	f7f8 fcff 	bl	80002b8 <__aeabi_dsub>
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	e036      	b.n	800792e <__kernel_rem_pio2+0x26e>
 80078c0:	4b4e      	ldr	r3, [pc, #312]	; (80079fc <__kernel_rem_pio2+0x33c>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	4630      	mov	r0, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	f7f8 feae 	bl	8000628 <__aeabi_dmul>
 80078cc:	f7f9 f95c 	bl	8000b88 <__aeabi_d2iz>
 80078d0:	f7f8 fe40 	bl	8000554 <__aeabi_i2d>
 80078d4:	4b4a      	ldr	r3, [pc, #296]	; (8007a00 <__kernel_rem_pio2+0x340>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	4680      	mov	r8, r0
 80078da:	4689      	mov	r9, r1
 80078dc:	f7f8 fea4 	bl	8000628 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	f7f8 fce6 	bl	80002b8 <__aeabi_dsub>
 80078ec:	f7f9 f94c 	bl	8000b88 <__aeabi_d2iz>
 80078f0:	9b02      	ldr	r3, [sp, #8]
 80078f2:	f843 0b04 	str.w	r0, [r3], #4
 80078f6:	3d01      	subs	r5, #1
 80078f8:	9302      	str	r3, [sp, #8]
 80078fa:	ab70      	add	r3, sp, #448	; 0x1c0
 80078fc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	f7f8 fcd8 	bl	80002bc <__adddf3>
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	e75b      	b.n	80077ca <__kernel_rem_pio2+0x10a>
 8007912:	d105      	bne.n	8007920 <__kernel_rem_pio2+0x260>
 8007914:	1e63      	subs	r3, r4, #1
 8007916:	aa0c      	add	r2, sp, #48	; 0x30
 8007918:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800791c:	15c3      	asrs	r3, r0, #23
 800791e:	e79b      	b.n	8007858 <__kernel_rem_pio2+0x198>
 8007920:	4b38      	ldr	r3, [pc, #224]	; (8007a04 <__kernel_rem_pio2+0x344>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f9 f906 	bl	8000b34 <__aeabi_dcmpge>
 8007928:	2800      	cmp	r0, #0
 800792a:	d139      	bne.n	80079a0 <__kernel_rem_pio2+0x2e0>
 800792c:	9002      	str	r0, [sp, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	4630      	mov	r0, r6
 8007934:	4639      	mov	r1, r7
 8007936:	f7f9 f8df 	bl	8000af8 <__aeabi_dcmpeq>
 800793a:	2800      	cmp	r0, #0
 800793c:	f000 80b4 	beq.w	8007aa8 <__kernel_rem_pio2+0x3e8>
 8007940:	f104 3bff 	add.w	fp, r4, #4294967295
 8007944:	465b      	mov	r3, fp
 8007946:	2200      	movs	r2, #0
 8007948:	9904      	ldr	r1, [sp, #16]
 800794a:	428b      	cmp	r3, r1
 800794c:	da65      	bge.n	8007a1a <__kernel_rem_pio2+0x35a>
 800794e:	2a00      	cmp	r2, #0
 8007950:	d07b      	beq.n	8007a4a <__kernel_rem_pio2+0x38a>
 8007952:	ab0c      	add	r3, sp, #48	; 0x30
 8007954:	f1aa 0a18 	sub.w	sl, sl, #24
 8007958:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80a0 	beq.w	8007aa2 <__kernel_rem_pio2+0x3e2>
 8007962:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80079e8 <__kernel_rem_pio2+0x328>
 8007966:	4650      	mov	r0, sl
 8007968:	f000 fbca 	bl	8008100 <scalbn>
 800796c:	4f23      	ldr	r7, [pc, #140]	; (80079fc <__kernel_rem_pio2+0x33c>)
 800796e:	ec55 4b10 	vmov	r4, r5, d0
 8007972:	46d8      	mov	r8, fp
 8007974:	2600      	movs	r6, #0
 8007976:	f1b8 0f00 	cmp.w	r8, #0
 800797a:	f280 80cf 	bge.w	8007b1c <__kernel_rem_pio2+0x45c>
 800797e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80079e0 <__kernel_rem_pio2+0x320>
 8007982:	465f      	mov	r7, fp
 8007984:	f04f 0800 	mov.w	r8, #0
 8007988:	2f00      	cmp	r7, #0
 800798a:	f2c0 80fd 	blt.w	8007b88 <__kernel_rem_pio2+0x4c8>
 800798e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007990:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007a08 <__kernel_rem_pio2+0x348>
 8007994:	ec55 4b18 	vmov	r4, r5, d8
 8007998:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800799c:	2600      	movs	r6, #0
 800799e:	e0e5      	b.n	8007b6c <__kernel_rem_pio2+0x4ac>
 80079a0:	2302      	movs	r3, #2
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	e75c      	b.n	8007860 <__kernel_rem_pio2+0x1a0>
 80079a6:	f8db 3000 	ldr.w	r3, [fp]
 80079aa:	b955      	cbnz	r5, 80079c2 <__kernel_rem_pio2+0x302>
 80079ac:	b123      	cbz	r3, 80079b8 <__kernel_rem_pio2+0x2f8>
 80079ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80079b2:	f8cb 3000 	str.w	r3, [fp]
 80079b6:	2301      	movs	r3, #1
 80079b8:	3201      	adds	r2, #1
 80079ba:	f10b 0b04 	add.w	fp, fp, #4
 80079be:	461d      	mov	r5, r3
 80079c0:	e755      	b.n	800786e <__kernel_rem_pio2+0x1ae>
 80079c2:	1acb      	subs	r3, r1, r3
 80079c4:	f8cb 3000 	str.w	r3, [fp]
 80079c8:	462b      	mov	r3, r5
 80079ca:	e7f5      	b.n	80079b8 <__kernel_rem_pio2+0x2f8>
 80079cc:	1e62      	subs	r2, r4, #1
 80079ce:	ab0c      	add	r3, sp, #48	; 0x30
 80079d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80079d8:	a90c      	add	r1, sp, #48	; 0x30
 80079da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80079de:	e754      	b.n	800788a <__kernel_rem_pio2+0x1ca>
	...
 80079ec:	3ff00000 	.word	0x3ff00000
 80079f0:	08008f90 	.word	0x08008f90
 80079f4:	40200000 	.word	0x40200000
 80079f8:	3ff00000 	.word	0x3ff00000
 80079fc:	3e700000 	.word	0x3e700000
 8007a00:	41700000 	.word	0x41700000
 8007a04:	3fe00000 	.word	0x3fe00000
 8007a08:	08008f50 	.word	0x08008f50
 8007a0c:	1e62      	subs	r2, r4, #1
 8007a0e:	ab0c      	add	r3, sp, #48	; 0x30
 8007a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a18:	e7de      	b.n	80079d8 <__kernel_rem_pio2+0x318>
 8007a1a:	a90c      	add	r1, sp, #48	; 0x30
 8007a1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	430a      	orrs	r2, r1
 8007a24:	e790      	b.n	8007948 <__kernel_rem_pio2+0x288>
 8007a26:	3301      	adds	r3, #1
 8007a28:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d0fa      	beq.n	8007a26 <__kernel_rem_pio2+0x366>
 8007a30:	9a08      	ldr	r2, [sp, #32]
 8007a32:	18e3      	adds	r3, r4, r3
 8007a34:	18a6      	adds	r6, r4, r2
 8007a36:	aa20      	add	r2, sp, #128	; 0x80
 8007a38:	1c65      	adds	r5, r4, #1
 8007a3a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	9b02      	ldr	r3, [sp, #8]
 8007a42:	42ab      	cmp	r3, r5
 8007a44:	da04      	bge.n	8007a50 <__kernel_rem_pio2+0x390>
 8007a46:	461c      	mov	r4, r3
 8007a48:	e6b5      	b.n	80077b6 <__kernel_rem_pio2+0xf6>
 8007a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7eb      	b.n	8007a28 <__kernel_rem_pio2+0x368>
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a56:	f7f8 fd7d 	bl	8000554 <__aeabi_i2d>
 8007a5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	46b3      	mov	fp, r6
 8007a62:	461c      	mov	r4, r3
 8007a64:	2700      	movs	r7, #0
 8007a66:	f04f 0800 	mov.w	r8, #0
 8007a6a:	f04f 0900 	mov.w	r9, #0
 8007a6e:	9b06      	ldr	r3, [sp, #24]
 8007a70:	429f      	cmp	r7, r3
 8007a72:	dd06      	ble.n	8007a82 <__kernel_rem_pio2+0x3c2>
 8007a74:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a7a:	e9c3 8900 	strd	r8, r9, [r3]
 8007a7e:	3501      	adds	r5, #1
 8007a80:	e7de      	b.n	8007a40 <__kernel_rem_pio2+0x380>
 8007a82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007a86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007a8a:	f7f8 fdcd 	bl	8000628 <__aeabi_dmul>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fc11 	bl	80002bc <__adddf3>
 8007a9a:	3701      	adds	r7, #1
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	e7e5      	b.n	8007a6e <__kernel_rem_pio2+0x3ae>
 8007aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007aa6:	e754      	b.n	8007952 <__kernel_rem_pio2+0x292>
 8007aa8:	ec47 6b10 	vmov	d0, r6, r7
 8007aac:	f1ca 0000 	rsb	r0, sl, #0
 8007ab0:	f000 fb26 	bl	8008100 <scalbn>
 8007ab4:	ec57 6b10 	vmov	r6, r7, d0
 8007ab8:	4b9f      	ldr	r3, [pc, #636]	; (8007d38 <__kernel_rem_pio2+0x678>)
 8007aba:	ee10 0a10 	vmov	r0, s0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	f7f9 f837 	bl	8000b34 <__aeabi_dcmpge>
 8007ac6:	b300      	cbz	r0, 8007b0a <__kernel_rem_pio2+0x44a>
 8007ac8:	4b9c      	ldr	r3, [pc, #624]	; (8007d3c <__kernel_rem_pio2+0x67c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f8 fdaa 	bl	8000628 <__aeabi_dmul>
 8007ad4:	f7f9 f858 	bl	8000b88 <__aeabi_d2iz>
 8007ad8:	4605      	mov	r5, r0
 8007ada:	f7f8 fd3b 	bl	8000554 <__aeabi_i2d>
 8007ade:	4b96      	ldr	r3, [pc, #600]	; (8007d38 <__kernel_rem_pio2+0x678>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fda1 	bl	8000628 <__aeabi_dmul>
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4602      	mov	r2, r0
 8007aea:	4639      	mov	r1, r7
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7f8 fbe3 	bl	80002b8 <__aeabi_dsub>
 8007af2:	f7f9 f849 	bl	8000b88 <__aeabi_d2iz>
 8007af6:	f104 0b01 	add.w	fp, r4, #1
 8007afa:	ab0c      	add	r3, sp, #48	; 0x30
 8007afc:	f10a 0a18 	add.w	sl, sl, #24
 8007b00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b04:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007b08:	e72b      	b.n	8007962 <__kernel_rem_pio2+0x2a2>
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	f7f9 f83b 	bl	8000b88 <__aeabi_d2iz>
 8007b12:	ab0c      	add	r3, sp, #48	; 0x30
 8007b14:	46a3      	mov	fp, r4
 8007b16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b1a:	e722      	b.n	8007962 <__kernel_rem_pio2+0x2a2>
 8007b1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b1e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007b22:	ab0c      	add	r3, sp, #48	; 0x30
 8007b24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b28:	f7f8 fd14 	bl	8000554 <__aeabi_i2d>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	f7f8 fd7a 	bl	8000628 <__aeabi_dmul>
 8007b34:	4632      	mov	r2, r6
 8007b36:	e9c9 0100 	strd	r0, r1, [r9]
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7f8 fd72 	bl	8000628 <__aeabi_dmul>
 8007b44:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b48:	4604      	mov	r4, r0
 8007b4a:	460d      	mov	r5, r1
 8007b4c:	e713      	b.n	8007976 <__kernel_rem_pio2+0x2b6>
 8007b4e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007b52:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007b56:	f7f8 fd67 	bl	8000628 <__aeabi_dmul>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fbab 	bl	80002bc <__adddf3>
 8007b66:	3601      	adds	r6, #1
 8007b68:	4604      	mov	r4, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	429e      	cmp	r6, r3
 8007b70:	dc01      	bgt.n	8007b76 <__kernel_rem_pio2+0x4b6>
 8007b72:	45b0      	cmp	r8, r6
 8007b74:	daeb      	bge.n	8007b4e <__kernel_rem_pio2+0x48e>
 8007b76:	ab48      	add	r3, sp, #288	; 0x120
 8007b78:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b7c:	e9c3 4500 	strd	r4, r5, [r3]
 8007b80:	3f01      	subs	r7, #1
 8007b82:	f108 0801 	add.w	r8, r8, #1
 8007b86:	e6ff      	b.n	8007988 <__kernel_rem_pio2+0x2c8>
 8007b88:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	dc0b      	bgt.n	8007ba6 <__kernel_rem_pio2+0x4e6>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dc6e      	bgt.n	8007c70 <__kernel_rem_pio2+0x5b0>
 8007b92:	d045      	beq.n	8007c20 <__kernel_rem_pio2+0x560>
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	f003 0007 	and.w	r0, r3, #7
 8007b9a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007b9e:	ecbd 8b02 	vpop	{d8}
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d1f3      	bne.n	8007b94 <__kernel_rem_pio2+0x4d4>
 8007bac:	ab48      	add	r3, sp, #288	; 0x120
 8007bae:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007bb2:	46d0      	mov	r8, sl
 8007bb4:	46d9      	mov	r9, fp
 8007bb6:	f1b9 0f00 	cmp.w	r9, #0
 8007bba:	f1a8 0808 	sub.w	r8, r8, #8
 8007bbe:	dc64      	bgt.n	8007c8a <__kernel_rem_pio2+0x5ca>
 8007bc0:	465c      	mov	r4, fp
 8007bc2:	2c01      	cmp	r4, #1
 8007bc4:	f1aa 0a08 	sub.w	sl, sl, #8
 8007bc8:	dc7e      	bgt.n	8007cc8 <__kernel_rem_pio2+0x608>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	f1bb 0f01 	cmp.w	fp, #1
 8007bd2:	f300 8097 	bgt.w	8007d04 <__kernel_rem_pio2+0x644>
 8007bd6:	9b02      	ldr	r3, [sp, #8]
 8007bd8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007bdc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8099 	bne.w	8007d18 <__kernel_rem_pio2+0x658>
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	e9c3 5600 	strd	r5, r6, [r3]
 8007bec:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007bf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007bf4:	e7ce      	b.n	8007b94 <__kernel_rem_pio2+0x4d4>
 8007bf6:	ab48      	add	r3, sp, #288	; 0x120
 8007bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fb5c 	bl	80002bc <__adddf3>
 8007c04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c08:	f1bb 0f00 	cmp.w	fp, #0
 8007c0c:	daf3      	bge.n	8007bf6 <__kernel_rem_pio2+0x536>
 8007c0e:	9b02      	ldr	r3, [sp, #8]
 8007c10:	b113      	cbz	r3, 8007c18 <__kernel_rem_pio2+0x558>
 8007c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c16:	4619      	mov	r1, r3
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	e9c3 0100 	strd	r0, r1, [r3]
 8007c1e:	e7b9      	b.n	8007b94 <__kernel_rem_pio2+0x4d4>
 8007c20:	2000      	movs	r0, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	e7f0      	b.n	8007c08 <__kernel_rem_pio2+0x548>
 8007c26:	ab48      	add	r3, sp, #288	; 0x120
 8007c28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb44 	bl	80002bc <__adddf3>
 8007c34:	3c01      	subs	r4, #1
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	daf5      	bge.n	8007c26 <__kernel_rem_pio2+0x566>
 8007c3a:	9b02      	ldr	r3, [sp, #8]
 8007c3c:	b1e3      	cbz	r3, 8007c78 <__kernel_rem_pio2+0x5b8>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c44:	9c01      	ldr	r4, [sp, #4]
 8007c46:	e9c4 2300 	strd	r2, r3, [r4]
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007c52:	f7f8 fb31 	bl	80002b8 <__aeabi_dsub>
 8007c56:	ad4a      	add	r5, sp, #296	; 0x128
 8007c58:	2401      	movs	r4, #1
 8007c5a:	45a3      	cmp	fp, r4
 8007c5c:	da0f      	bge.n	8007c7e <__kernel_rem_pio2+0x5be>
 8007c5e:	9b02      	ldr	r3, [sp, #8]
 8007c60:	b113      	cbz	r3, 8007c68 <__kernel_rem_pio2+0x5a8>
 8007c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c66:	4619      	mov	r1, r3
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c6e:	e791      	b.n	8007b94 <__kernel_rem_pio2+0x4d4>
 8007c70:	465c      	mov	r4, fp
 8007c72:	2000      	movs	r0, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	e7de      	b.n	8007c36 <__kernel_rem_pio2+0x576>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e7e2      	b.n	8007c44 <__kernel_rem_pio2+0x584>
 8007c7e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007c82:	f7f8 fb1b 	bl	80002bc <__adddf3>
 8007c86:	3401      	adds	r4, #1
 8007c88:	e7e7      	b.n	8007c5a <__kernel_rem_pio2+0x59a>
 8007c8a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007c8e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007c92:	4620      	mov	r0, r4
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 fb0f 	bl	80002bc <__adddf3>
 8007c9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 fb05 	bl	80002b8 <__aeabi_dsub>
 8007cae:	4632      	mov	r2, r6
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	f7f8 fb03 	bl	80002bc <__adddf3>
 8007cb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007cba:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007cbe:	ed88 7b00 	vstr	d7, [r8]
 8007cc2:	f109 39ff 	add.w	r9, r9, #4294967295
 8007cc6:	e776      	b.n	8007bb6 <__kernel_rem_pio2+0x4f6>
 8007cc8:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ccc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4632      	mov	r2, r6
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	f7f8 faf0 	bl	80002bc <__adddf3>
 8007cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	f7f8 fae6 	bl	80002b8 <__aeabi_dsub>
 8007cec:	4632      	mov	r2, r6
 8007cee:	463b      	mov	r3, r7
 8007cf0:	f7f8 fae4 	bl	80002bc <__adddf3>
 8007cf4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007cf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cfc:	ed8a 7b00 	vstr	d7, [sl]
 8007d00:	3c01      	subs	r4, #1
 8007d02:	e75e      	b.n	8007bc2 <__kernel_rem_pio2+0x502>
 8007d04:	ab48      	add	r3, sp, #288	; 0x120
 8007d06:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f7f8 fad5 	bl	80002bc <__adddf3>
 8007d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d16:	e75a      	b.n	8007bce <__kernel_rem_pio2+0x50e>
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	9a01      	ldr	r2, [sp, #4]
 8007d1c:	601d      	str	r5, [r3, #0]
 8007d1e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007d22:	605c      	str	r4, [r3, #4]
 8007d24:	609f      	str	r7, [r3, #8]
 8007d26:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007d2a:	60d3      	str	r3, [r2, #12]
 8007d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d30:	6110      	str	r0, [r2, #16]
 8007d32:	6153      	str	r3, [r2, #20]
 8007d34:	e72e      	b.n	8007b94 <__kernel_rem_pio2+0x4d4>
 8007d36:	bf00      	nop
 8007d38:	41700000 	.word	0x41700000
 8007d3c:	3e700000 	.word	0x3e700000

08007d40 <__kernel_sin>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	ed2d 8b04 	vpush	{d8-d9}
 8007d48:	eeb0 8a41 	vmov.f32	s16, s2
 8007d4c:	eef0 8a61 	vmov.f32	s17, s3
 8007d50:	ec55 4b10 	vmov	r4, r5, d0
 8007d54:	b083      	sub	sp, #12
 8007d56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007d5e:	9001      	str	r0, [sp, #4]
 8007d60:	da06      	bge.n	8007d70 <__kernel_sin+0x30>
 8007d62:	ee10 0a10 	vmov	r0, s0
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 ff0e 	bl	8000b88 <__aeabi_d2iz>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d051      	beq.n	8007e14 <__kernel_sin+0xd4>
 8007d70:	4622      	mov	r2, r4
 8007d72:	462b      	mov	r3, r5
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fc56 	bl	8000628 <__aeabi_dmul>
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	468b      	mov	fp, r1
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	f7f8 fc4e 	bl	8000628 <__aeabi_dmul>
 8007d8c:	a341      	add	r3, pc, #260	; (adr r3, 8007e94 <__kernel_sin+0x154>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	4680      	mov	r8, r0
 8007d94:	4689      	mov	r9, r1
 8007d96:	4650      	mov	r0, sl
 8007d98:	4659      	mov	r1, fp
 8007d9a:	f7f8 fc45 	bl	8000628 <__aeabi_dmul>
 8007d9e:	a33f      	add	r3, pc, #252	; (adr r3, 8007e9c <__kernel_sin+0x15c>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fa88 	bl	80002b8 <__aeabi_dsub>
 8007da8:	4652      	mov	r2, sl
 8007daa:	465b      	mov	r3, fp
 8007dac:	f7f8 fc3c 	bl	8000628 <__aeabi_dmul>
 8007db0:	a33c      	add	r3, pc, #240	; (adr r3, 8007ea4 <__kernel_sin+0x164>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa81 	bl	80002bc <__adddf3>
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	f7f8 fc33 	bl	8000628 <__aeabi_dmul>
 8007dc2:	a33a      	add	r3, pc, #232	; (adr r3, 8007eac <__kernel_sin+0x16c>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fa76 	bl	80002b8 <__aeabi_dsub>
 8007dcc:	4652      	mov	r2, sl
 8007dce:	465b      	mov	r3, fp
 8007dd0:	f7f8 fc2a 	bl	8000628 <__aeabi_dmul>
 8007dd4:	a337      	add	r3, pc, #220	; (adr r3, 8007eb4 <__kernel_sin+0x174>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fa6f 	bl	80002bc <__adddf3>
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	4606      	mov	r6, r0
 8007de2:	460f      	mov	r7, r1
 8007de4:	b9eb      	cbnz	r3, 8007e22 <__kernel_sin+0xe2>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4650      	mov	r0, sl
 8007dec:	4659      	mov	r1, fp
 8007dee:	f7f8 fc1b 	bl	8000628 <__aeabi_dmul>
 8007df2:	a325      	add	r3, pc, #148	; (adr r3, 8007e88 <__kernel_sin+0x148>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f7f8 fa5e 	bl	80002b8 <__aeabi_dsub>
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	f7f8 fc12 	bl	8000628 <__aeabi_dmul>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7f8 fa56 	bl	80002bc <__adddf3>
 8007e10:	4604      	mov	r4, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	ec45 4b10 	vmov	d0, r4, r5
 8007e18:	b003      	add	sp, #12
 8007e1a:	ecbd 8b04 	vpop	{d8-d9}
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <__kernel_sin+0x150>)
 8007e24:	ec51 0b18 	vmov	r0, r1, d8
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f7f8 fbfd 	bl	8000628 <__aeabi_dmul>
 8007e2e:	4632      	mov	r2, r6
 8007e30:	ec41 0b19 	vmov	d9, r0, r1
 8007e34:	463b      	mov	r3, r7
 8007e36:	4640      	mov	r0, r8
 8007e38:	4649      	mov	r1, r9
 8007e3a:	f7f8 fbf5 	bl	8000628 <__aeabi_dmul>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	ec51 0b19 	vmov	r0, r1, d9
 8007e46:	f7f8 fa37 	bl	80002b8 <__aeabi_dsub>
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	465b      	mov	r3, fp
 8007e4e:	f7f8 fbeb 	bl	8000628 <__aeabi_dmul>
 8007e52:	ec53 2b18 	vmov	r2, r3, d8
 8007e56:	f7f8 fa2f 	bl	80002b8 <__aeabi_dsub>
 8007e5a:	a30b      	add	r3, pc, #44	; (adr r3, 8007e88 <__kernel_sin+0x148>)
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	4640      	mov	r0, r8
 8007e66:	4649      	mov	r1, r9
 8007e68:	f7f8 fbde 	bl	8000628 <__aeabi_dmul>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fa22 	bl	80002bc <__adddf3>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 fa1a 	bl	80002b8 <__aeabi_dsub>
 8007e84:	e7c4      	b.n	8007e10 <__kernel_sin+0xd0>
 8007e86:	bf00      	nop
 8007e88:	55555549 	.word	0x55555549
 8007e8c:	3fc55555 	.word	0x3fc55555
 8007e90:	3fe00000 	.word	0x3fe00000
 8007e94:	5acfd57c 	.word	0x5acfd57c
 8007e98:	3de5d93a 	.word	0x3de5d93a
 8007e9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ea0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ea4:	57b1fe7d 	.word	0x57b1fe7d
 8007ea8:	3ec71de3 	.word	0x3ec71de3
 8007eac:	19c161d5 	.word	0x19c161d5
 8007eb0:	3f2a01a0 	.word	0x3f2a01a0
 8007eb4:	1110f8a6 	.word	0x1110f8a6
 8007eb8:	3f811111 	.word	0x3f811111

08007ebc <finite>:
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	ed8d 0b00 	vstr	d0, [sp]
 8007ec2:	9801      	ldr	r0, [sp, #4]
 8007ec4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007ec8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007ecc:	0fc0      	lsrs	r0, r0, #31
 8007ece:	b002      	add	sp, #8
 8007ed0:	4770      	bx	lr
 8007ed2:	0000      	movs	r0, r0
 8007ed4:	0000      	movs	r0, r0
	...

08007ed8 <floor>:
 8007ed8:	ec51 0b10 	vmov	r0, r1, d0
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007ee4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007ee8:	2e13      	cmp	r6, #19
 8007eea:	ee10 5a10 	vmov	r5, s0
 8007eee:	ee10 8a10 	vmov	r8, s0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	dc32      	bgt.n	8007f5c <floor+0x84>
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	da14      	bge.n	8007f24 <floor+0x4c>
 8007efa:	a333      	add	r3, pc, #204	; (adr r3, 8007fc8 <floor+0xf0>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 f9dc 	bl	80002bc <__adddf3>
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	f7f8 fe1e 	bl	8000b48 <__aeabi_dcmpgt>
 8007f0c:	b138      	cbz	r0, 8007f1e <floor+0x46>
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	da57      	bge.n	8007fc2 <floor+0xea>
 8007f12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f16:	431d      	orrs	r5, r3
 8007f18:	d001      	beq.n	8007f1e <floor+0x46>
 8007f1a:	4c2d      	ldr	r4, [pc, #180]	; (8007fd0 <floor+0xf8>)
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	e025      	b.n	8007f70 <floor+0x98>
 8007f24:	4f2b      	ldr	r7, [pc, #172]	; (8007fd4 <floor+0xfc>)
 8007f26:	4137      	asrs	r7, r6
 8007f28:	ea01 0307 	and.w	r3, r1, r7
 8007f2c:	4303      	orrs	r3, r0
 8007f2e:	d01f      	beq.n	8007f70 <floor+0x98>
 8007f30:	a325      	add	r3, pc, #148	; (adr r3, 8007fc8 <floor+0xf0>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 f9c1 	bl	80002bc <__adddf3>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f7f8 fe03 	bl	8000b48 <__aeabi_dcmpgt>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0eb      	beq.n	8007f1e <floor+0x46>
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	bfbe      	ittt	lt
 8007f4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f52:	19a4      	addlt	r4, r4, r6
 8007f54:	ea24 0407 	bic.w	r4, r4, r7
 8007f58:	2500      	movs	r5, #0
 8007f5a:	e7e0      	b.n	8007f1e <floor+0x46>
 8007f5c:	2e33      	cmp	r6, #51	; 0x33
 8007f5e:	dd0b      	ble.n	8007f78 <floor+0xa0>
 8007f60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f64:	d104      	bne.n	8007f70 <floor+0x98>
 8007f66:	ee10 2a10 	vmov	r2, s0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	f7f8 f9a6 	bl	80002bc <__adddf3>
 8007f70:	ec41 0b10 	vmov	d0, r0, r1
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f80:	fa23 f707 	lsr.w	r7, r3, r7
 8007f84:	4207      	tst	r7, r0
 8007f86:	d0f3      	beq.n	8007f70 <floor+0x98>
 8007f88:	a30f      	add	r3, pc, #60	; (adr r3, 8007fc8 <floor+0xf0>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 f995 	bl	80002bc <__adddf3>
 8007f92:	2200      	movs	r2, #0
 8007f94:	2300      	movs	r3, #0
 8007f96:	f7f8 fdd7 	bl	8000b48 <__aeabi_dcmpgt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d0bf      	beq.n	8007f1e <floor+0x46>
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	da02      	bge.n	8007fa8 <floor+0xd0>
 8007fa2:	2e14      	cmp	r6, #20
 8007fa4:	d103      	bne.n	8007fae <floor+0xd6>
 8007fa6:	3401      	adds	r4, #1
 8007fa8:	ea25 0507 	bic.w	r5, r5, r7
 8007fac:	e7b7      	b.n	8007f1e <floor+0x46>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007fb4:	fa03 f606 	lsl.w	r6, r3, r6
 8007fb8:	4435      	add	r5, r6
 8007fba:	4545      	cmp	r5, r8
 8007fbc:	bf38      	it	cc
 8007fbe:	18e4      	addcc	r4, r4, r3
 8007fc0:	e7f2      	b.n	8007fa8 <floor+0xd0>
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	462c      	mov	r4, r5
 8007fc6:	e7aa      	b.n	8007f1e <floor+0x46>
 8007fc8:	8800759c 	.word	0x8800759c
 8007fcc:	7e37e43c 	.word	0x7e37e43c
 8007fd0:	bff00000 	.word	0xbff00000
 8007fd4:	000fffff 	.word	0x000fffff

08007fd8 <nan>:
 8007fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007fe0 <nan+0x8>
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	7ff80000 	.word	0x7ff80000

08007fe8 <rint>:
 8007fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fea:	ec51 0b10 	vmov	r0, r1, d0
 8007fee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ff2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007ff6:	2e13      	cmp	r6, #19
 8007ff8:	ee10 4a10 	vmov	r4, s0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008002:	dc58      	bgt.n	80080b6 <rint+0xce>
 8008004:	2e00      	cmp	r6, #0
 8008006:	da2b      	bge.n	8008060 <rint+0x78>
 8008008:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800800c:	4302      	orrs	r2, r0
 800800e:	d023      	beq.n	8008058 <rint+0x70>
 8008010:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008014:	4302      	orrs	r2, r0
 8008016:	4254      	negs	r4, r2
 8008018:	4314      	orrs	r4, r2
 800801a:	0c4b      	lsrs	r3, r1, #17
 800801c:	0b24      	lsrs	r4, r4, #12
 800801e:	045b      	lsls	r3, r3, #17
 8008020:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008024:	ea44 0103 	orr.w	r1, r4, r3
 8008028:	4b32      	ldr	r3, [pc, #200]	; (80080f4 <rint+0x10c>)
 800802a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800802e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	f7f8 f93f 	bl	80002bc <__adddf3>
 800803e:	e9cd 0100 	strd	r0, r1, [sp]
 8008042:	463b      	mov	r3, r7
 8008044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008048:	4632      	mov	r2, r6
 800804a:	f7f8 f935 	bl	80002b8 <__aeabi_dsub>
 800804e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008052:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008056:	4639      	mov	r1, r7
 8008058:	ec41 0b10 	vmov	d0, r0, r1
 800805c:	b003      	add	sp, #12
 800805e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008060:	4a25      	ldr	r2, [pc, #148]	; (80080f8 <rint+0x110>)
 8008062:	4132      	asrs	r2, r6
 8008064:	ea01 0702 	and.w	r7, r1, r2
 8008068:	4307      	orrs	r7, r0
 800806a:	d0f5      	beq.n	8008058 <rint+0x70>
 800806c:	0851      	lsrs	r1, r2, #1
 800806e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008072:	4314      	orrs	r4, r2
 8008074:	d00c      	beq.n	8008090 <rint+0xa8>
 8008076:	ea23 0201 	bic.w	r2, r3, r1
 800807a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800807e:	2e13      	cmp	r6, #19
 8008080:	fa43 f606 	asr.w	r6, r3, r6
 8008084:	bf0c      	ite	eq
 8008086:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800808a:	2400      	movne	r4, #0
 800808c:	ea42 0306 	orr.w	r3, r2, r6
 8008090:	4918      	ldr	r1, [pc, #96]	; (80080f4 <rint+0x10c>)
 8008092:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008096:	4622      	mov	r2, r4
 8008098:	e9d5 4500 	ldrd	r4, r5, [r5]
 800809c:	4620      	mov	r0, r4
 800809e:	4629      	mov	r1, r5
 80080a0:	f7f8 f90c 	bl	80002bc <__adddf3>
 80080a4:	e9cd 0100 	strd	r0, r1, [sp]
 80080a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080ac:	4622      	mov	r2, r4
 80080ae:	462b      	mov	r3, r5
 80080b0:	f7f8 f902 	bl	80002b8 <__aeabi_dsub>
 80080b4:	e7d0      	b.n	8008058 <rint+0x70>
 80080b6:	2e33      	cmp	r6, #51	; 0x33
 80080b8:	dd07      	ble.n	80080ca <rint+0xe2>
 80080ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80080be:	d1cb      	bne.n	8008058 <rint+0x70>
 80080c0:	ee10 2a10 	vmov	r2, s0
 80080c4:	f7f8 f8fa 	bl	80002bc <__adddf3>
 80080c8:	e7c6      	b.n	8008058 <rint+0x70>
 80080ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80080ce:	f04f 36ff 	mov.w	r6, #4294967295
 80080d2:	40d6      	lsrs	r6, r2
 80080d4:	4230      	tst	r0, r6
 80080d6:	d0bf      	beq.n	8008058 <rint+0x70>
 80080d8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80080dc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80080e0:	bf1f      	itttt	ne
 80080e2:	ea24 0101 	bicne.w	r1, r4, r1
 80080e6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80080ea:	fa44 f202 	asrne.w	r2, r4, r2
 80080ee:	ea41 0402 	orrne.w	r4, r1, r2
 80080f2:	e7cd      	b.n	8008090 <rint+0xa8>
 80080f4:	08008fa0 	.word	0x08008fa0
 80080f8:	000fffff 	.word	0x000fffff
 80080fc:	00000000 	.word	0x00000000

08008100 <scalbn>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	ec55 4b10 	vmov	r4, r5, d0
 8008106:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800810a:	4606      	mov	r6, r0
 800810c:	462b      	mov	r3, r5
 800810e:	b99a      	cbnz	r2, 8008138 <scalbn+0x38>
 8008110:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008114:	4323      	orrs	r3, r4
 8008116:	d036      	beq.n	8008186 <scalbn+0x86>
 8008118:	4b39      	ldr	r3, [pc, #228]	; (8008200 <scalbn+0x100>)
 800811a:	4629      	mov	r1, r5
 800811c:	ee10 0a10 	vmov	r0, s0
 8008120:	2200      	movs	r2, #0
 8008122:	f7f8 fa81 	bl	8000628 <__aeabi_dmul>
 8008126:	4b37      	ldr	r3, [pc, #220]	; (8008204 <scalbn+0x104>)
 8008128:	429e      	cmp	r6, r3
 800812a:	4604      	mov	r4, r0
 800812c:	460d      	mov	r5, r1
 800812e:	da10      	bge.n	8008152 <scalbn+0x52>
 8008130:	a32b      	add	r3, pc, #172	; (adr r3, 80081e0 <scalbn+0xe0>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	e03a      	b.n	80081ae <scalbn+0xae>
 8008138:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800813c:	428a      	cmp	r2, r1
 800813e:	d10c      	bne.n	800815a <scalbn+0x5a>
 8008140:	ee10 2a10 	vmov	r2, s0
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 f8b8 	bl	80002bc <__adddf3>
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	e019      	b.n	8008186 <scalbn+0x86>
 8008152:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008156:	460b      	mov	r3, r1
 8008158:	3a36      	subs	r2, #54	; 0x36
 800815a:	4432      	add	r2, r6
 800815c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008160:	428a      	cmp	r2, r1
 8008162:	dd08      	ble.n	8008176 <scalbn+0x76>
 8008164:	2d00      	cmp	r5, #0
 8008166:	a120      	add	r1, pc, #128	; (adr r1, 80081e8 <scalbn+0xe8>)
 8008168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800816c:	da1c      	bge.n	80081a8 <scalbn+0xa8>
 800816e:	a120      	add	r1, pc, #128	; (adr r1, 80081f0 <scalbn+0xf0>)
 8008170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008174:	e018      	b.n	80081a8 <scalbn+0xa8>
 8008176:	2a00      	cmp	r2, #0
 8008178:	dd08      	ble.n	800818c <scalbn+0x8c>
 800817a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800817e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008182:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008186:	ec45 4b10 	vmov	d0, r4, r5
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008190:	da19      	bge.n	80081c6 <scalbn+0xc6>
 8008192:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008196:	429e      	cmp	r6, r3
 8008198:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800819c:	dd0a      	ble.n	80081b4 <scalbn+0xb4>
 800819e:	a112      	add	r1, pc, #72	; (adr r1, 80081e8 <scalbn+0xe8>)
 80081a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e2      	bne.n	800816e <scalbn+0x6e>
 80081a8:	a30f      	add	r3, pc, #60	; (adr r3, 80081e8 <scalbn+0xe8>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 fa3b 	bl	8000628 <__aeabi_dmul>
 80081b2:	e7cb      	b.n	800814c <scalbn+0x4c>
 80081b4:	a10a      	add	r1, pc, #40	; (adr r1, 80081e0 <scalbn+0xe0>)
 80081b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0b8      	beq.n	8008130 <scalbn+0x30>
 80081be:	a10e      	add	r1, pc, #56	; (adr r1, 80081f8 <scalbn+0xf8>)
 80081c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c4:	e7b4      	b.n	8008130 <scalbn+0x30>
 80081c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081ca:	3236      	adds	r2, #54	; 0x36
 80081cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80081d4:	4620      	mov	r0, r4
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <scalbn+0x108>)
 80081d8:	2200      	movs	r2, #0
 80081da:	e7e8      	b.n	80081ae <scalbn+0xae>
 80081dc:	f3af 8000 	nop.w
 80081e0:	c2f8f359 	.word	0xc2f8f359
 80081e4:	01a56e1f 	.word	0x01a56e1f
 80081e8:	8800759c 	.word	0x8800759c
 80081ec:	7e37e43c 	.word	0x7e37e43c
 80081f0:	8800759c 	.word	0x8800759c
 80081f4:	fe37e43c 	.word	0xfe37e43c
 80081f8:	c2f8f359 	.word	0xc2f8f359
 80081fc:	81a56e1f 	.word	0x81a56e1f
 8008200:	43500000 	.word	0x43500000
 8008204:	ffff3cb0 	.word	0xffff3cb0
 8008208:	3c900000 	.word	0x3c900000

0800820c <__errno>:
 800820c:	4b01      	ldr	r3, [pc, #4]	; (8008214 <__errno+0x8>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	2000000c 	.word	0x2000000c

08008218 <__libc_init_array>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4d0d      	ldr	r5, [pc, #52]	; (8008250 <__libc_init_array+0x38>)
 800821c:	4c0d      	ldr	r4, [pc, #52]	; (8008254 <__libc_init_array+0x3c>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	2600      	movs	r6, #0
 8008224:	42a6      	cmp	r6, r4
 8008226:	d109      	bne.n	800823c <__libc_init_array+0x24>
 8008228:	4d0b      	ldr	r5, [pc, #44]	; (8008258 <__libc_init_array+0x40>)
 800822a:	4c0c      	ldr	r4, [pc, #48]	; (800825c <__libc_init_array+0x44>)
 800822c:	f000 fc4e 	bl	8008acc <_init>
 8008230:	1b64      	subs	r4, r4, r5
 8008232:	10a4      	asrs	r4, r4, #2
 8008234:	2600      	movs	r6, #0
 8008236:	42a6      	cmp	r6, r4
 8008238:	d105      	bne.n	8008246 <__libc_init_array+0x2e>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008240:	4798      	blx	r3
 8008242:	3601      	adds	r6, #1
 8008244:	e7ee      	b.n	8008224 <__libc_init_array+0xc>
 8008246:	f855 3b04 	ldr.w	r3, [r5], #4
 800824a:	4798      	blx	r3
 800824c:	3601      	adds	r6, #1
 800824e:	e7f2      	b.n	8008236 <__libc_init_array+0x1e>
 8008250:	08008fec 	.word	0x08008fec
 8008254:	08008fec 	.word	0x08008fec
 8008258:	08008fec 	.word	0x08008fec
 800825c:	08008ff0 	.word	0x08008ff0

08008260 <memset>:
 8008260:	4402      	add	r2, r0
 8008262:	4603      	mov	r3, r0
 8008264:	4293      	cmp	r3, r2
 8008266:	d100      	bne.n	800826a <memset+0xa>
 8008268:	4770      	bx	lr
 800826a:	f803 1b01 	strb.w	r1, [r3], #1
 800826e:	e7f9      	b.n	8008264 <memset+0x4>

08008270 <siprintf>:
 8008270:	b40e      	push	{r1, r2, r3}
 8008272:	b500      	push	{lr}
 8008274:	b09c      	sub	sp, #112	; 0x70
 8008276:	ab1d      	add	r3, sp, #116	; 0x74
 8008278:	9002      	str	r0, [sp, #8]
 800827a:	9006      	str	r0, [sp, #24]
 800827c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008280:	4809      	ldr	r0, [pc, #36]	; (80082a8 <siprintf+0x38>)
 8008282:	9107      	str	r1, [sp, #28]
 8008284:	9104      	str	r1, [sp, #16]
 8008286:	4909      	ldr	r1, [pc, #36]	; (80082ac <siprintf+0x3c>)
 8008288:	f853 2b04 	ldr.w	r2, [r3], #4
 800828c:	9105      	str	r1, [sp, #20]
 800828e:	6800      	ldr	r0, [r0, #0]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	a902      	add	r1, sp, #8
 8008294:	f000 f868 	bl	8008368 <_svfiprintf_r>
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	b01c      	add	sp, #112	; 0x70
 80082a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a4:	b003      	add	sp, #12
 80082a6:	4770      	bx	lr
 80082a8:	2000000c 	.word	0x2000000c
 80082ac:	ffff0208 	.word	0xffff0208

080082b0 <__ssputs_r>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	688e      	ldr	r6, [r1, #8]
 80082b6:	429e      	cmp	r6, r3
 80082b8:	4682      	mov	sl, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4690      	mov	r8, r2
 80082be:	461f      	mov	r7, r3
 80082c0:	d838      	bhi.n	8008334 <__ssputs_r+0x84>
 80082c2:	898a      	ldrh	r2, [r1, #12]
 80082c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082c8:	d032      	beq.n	8008330 <__ssputs_r+0x80>
 80082ca:	6825      	ldr	r5, [r4, #0]
 80082cc:	6909      	ldr	r1, [r1, #16]
 80082ce:	eba5 0901 	sub.w	r9, r5, r1
 80082d2:	6965      	ldr	r5, [r4, #20]
 80082d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082dc:	3301      	adds	r3, #1
 80082de:	444b      	add	r3, r9
 80082e0:	106d      	asrs	r5, r5, #1
 80082e2:	429d      	cmp	r5, r3
 80082e4:	bf38      	it	cc
 80082e6:	461d      	movcc	r5, r3
 80082e8:	0553      	lsls	r3, r2, #21
 80082ea:	d531      	bpl.n	8008350 <__ssputs_r+0xa0>
 80082ec:	4629      	mov	r1, r5
 80082ee:	f000 fb47 	bl	8008980 <_malloc_r>
 80082f2:	4606      	mov	r6, r0
 80082f4:	b950      	cbnz	r0, 800830c <__ssputs_r+0x5c>
 80082f6:	230c      	movs	r3, #12
 80082f8:	f8ca 3000 	str.w	r3, [sl]
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830c:	6921      	ldr	r1, [r4, #16]
 800830e:	464a      	mov	r2, r9
 8008310:	f000 fabe 	bl	8008890 <memcpy>
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800831a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	6126      	str	r6, [r4, #16]
 8008322:	6165      	str	r5, [r4, #20]
 8008324:	444e      	add	r6, r9
 8008326:	eba5 0509 	sub.w	r5, r5, r9
 800832a:	6026      	str	r6, [r4, #0]
 800832c:	60a5      	str	r5, [r4, #8]
 800832e:	463e      	mov	r6, r7
 8008330:	42be      	cmp	r6, r7
 8008332:	d900      	bls.n	8008336 <__ssputs_r+0x86>
 8008334:	463e      	mov	r6, r7
 8008336:	4632      	mov	r2, r6
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	4641      	mov	r1, r8
 800833c:	f000 fab6 	bl	80088ac <memmove>
 8008340:	68a3      	ldr	r3, [r4, #8]
 8008342:	6822      	ldr	r2, [r4, #0]
 8008344:	1b9b      	subs	r3, r3, r6
 8008346:	4432      	add	r2, r6
 8008348:	60a3      	str	r3, [r4, #8]
 800834a:	6022      	str	r2, [r4, #0]
 800834c:	2000      	movs	r0, #0
 800834e:	e7db      	b.n	8008308 <__ssputs_r+0x58>
 8008350:	462a      	mov	r2, r5
 8008352:	f000 fb6f 	bl	8008a34 <_realloc_r>
 8008356:	4606      	mov	r6, r0
 8008358:	2800      	cmp	r0, #0
 800835a:	d1e1      	bne.n	8008320 <__ssputs_r+0x70>
 800835c:	6921      	ldr	r1, [r4, #16]
 800835e:	4650      	mov	r0, sl
 8008360:	f000 fabe 	bl	80088e0 <_free_r>
 8008364:	e7c7      	b.n	80082f6 <__ssputs_r+0x46>
	...

08008368 <_svfiprintf_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	4698      	mov	r8, r3
 800836e:	898b      	ldrh	r3, [r1, #12]
 8008370:	061b      	lsls	r3, r3, #24
 8008372:	b09d      	sub	sp, #116	; 0x74
 8008374:	4607      	mov	r7, r0
 8008376:	460d      	mov	r5, r1
 8008378:	4614      	mov	r4, r2
 800837a:	d50e      	bpl.n	800839a <_svfiprintf_r+0x32>
 800837c:	690b      	ldr	r3, [r1, #16]
 800837e:	b963      	cbnz	r3, 800839a <_svfiprintf_r+0x32>
 8008380:	2140      	movs	r1, #64	; 0x40
 8008382:	f000 fafd 	bl	8008980 <_malloc_r>
 8008386:	6028      	str	r0, [r5, #0]
 8008388:	6128      	str	r0, [r5, #16]
 800838a:	b920      	cbnz	r0, 8008396 <_svfiprintf_r+0x2e>
 800838c:	230c      	movs	r3, #12
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	e0d1      	b.n	800853a <_svfiprintf_r+0x1d2>
 8008396:	2340      	movs	r3, #64	; 0x40
 8008398:	616b      	str	r3, [r5, #20]
 800839a:	2300      	movs	r3, #0
 800839c:	9309      	str	r3, [sp, #36]	; 0x24
 800839e:	2320      	movs	r3, #32
 80083a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083a8:	2330      	movs	r3, #48	; 0x30
 80083aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008554 <_svfiprintf_r+0x1ec>
 80083ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083b2:	f04f 0901 	mov.w	r9, #1
 80083b6:	4623      	mov	r3, r4
 80083b8:	469a      	mov	sl, r3
 80083ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083be:	b10a      	cbz	r2, 80083c4 <_svfiprintf_r+0x5c>
 80083c0:	2a25      	cmp	r2, #37	; 0x25
 80083c2:	d1f9      	bne.n	80083b8 <_svfiprintf_r+0x50>
 80083c4:	ebba 0b04 	subs.w	fp, sl, r4
 80083c8:	d00b      	beq.n	80083e2 <_svfiprintf_r+0x7a>
 80083ca:	465b      	mov	r3, fp
 80083cc:	4622      	mov	r2, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff ff6d 	bl	80082b0 <__ssputs_r>
 80083d6:	3001      	adds	r0, #1
 80083d8:	f000 80aa 	beq.w	8008530 <_svfiprintf_r+0x1c8>
 80083dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083de:	445a      	add	r2, fp
 80083e0:	9209      	str	r2, [sp, #36]	; 0x24
 80083e2:	f89a 3000 	ldrb.w	r3, [sl]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 80a2 	beq.w	8008530 <_svfiprintf_r+0x1c8>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f04f 32ff 	mov.w	r2, #4294967295
 80083f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083f6:	f10a 0a01 	add.w	sl, sl, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	9307      	str	r3, [sp, #28]
 80083fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008402:	931a      	str	r3, [sp, #104]	; 0x68
 8008404:	4654      	mov	r4, sl
 8008406:	2205      	movs	r2, #5
 8008408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840c:	4851      	ldr	r0, [pc, #324]	; (8008554 <_svfiprintf_r+0x1ec>)
 800840e:	f7f7 feff 	bl	8000210 <memchr>
 8008412:	9a04      	ldr	r2, [sp, #16]
 8008414:	b9d8      	cbnz	r0, 800844e <_svfiprintf_r+0xe6>
 8008416:	06d0      	lsls	r0, r2, #27
 8008418:	bf44      	itt	mi
 800841a:	2320      	movmi	r3, #32
 800841c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008420:	0711      	lsls	r1, r2, #28
 8008422:	bf44      	itt	mi
 8008424:	232b      	movmi	r3, #43	; 0x2b
 8008426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800842a:	f89a 3000 	ldrb.w	r3, [sl]
 800842e:	2b2a      	cmp	r3, #42	; 0x2a
 8008430:	d015      	beq.n	800845e <_svfiprintf_r+0xf6>
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	4654      	mov	r4, sl
 8008436:	2000      	movs	r0, #0
 8008438:	f04f 0c0a 	mov.w	ip, #10
 800843c:	4621      	mov	r1, r4
 800843e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008442:	3b30      	subs	r3, #48	; 0x30
 8008444:	2b09      	cmp	r3, #9
 8008446:	d94e      	bls.n	80084e6 <_svfiprintf_r+0x17e>
 8008448:	b1b0      	cbz	r0, 8008478 <_svfiprintf_r+0x110>
 800844a:	9207      	str	r2, [sp, #28]
 800844c:	e014      	b.n	8008478 <_svfiprintf_r+0x110>
 800844e:	eba0 0308 	sub.w	r3, r0, r8
 8008452:	fa09 f303 	lsl.w	r3, r9, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	46a2      	mov	sl, r4
 800845c:	e7d2      	b.n	8008404 <_svfiprintf_r+0x9c>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	1d19      	adds	r1, r3, #4
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	9103      	str	r1, [sp, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	bfbb      	ittet	lt
 800846a:	425b      	neglt	r3, r3
 800846c:	f042 0202 	orrlt.w	r2, r2, #2
 8008470:	9307      	strge	r3, [sp, #28]
 8008472:	9307      	strlt	r3, [sp, #28]
 8008474:	bfb8      	it	lt
 8008476:	9204      	strlt	r2, [sp, #16]
 8008478:	7823      	ldrb	r3, [r4, #0]
 800847a:	2b2e      	cmp	r3, #46	; 0x2e
 800847c:	d10c      	bne.n	8008498 <_svfiprintf_r+0x130>
 800847e:	7863      	ldrb	r3, [r4, #1]
 8008480:	2b2a      	cmp	r3, #42	; 0x2a
 8008482:	d135      	bne.n	80084f0 <_svfiprintf_r+0x188>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	1d1a      	adds	r2, r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	9203      	str	r2, [sp, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfb8      	it	lt
 8008490:	f04f 33ff 	movlt.w	r3, #4294967295
 8008494:	3402      	adds	r4, #2
 8008496:	9305      	str	r3, [sp, #20]
 8008498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008564 <_svfiprintf_r+0x1fc>
 800849c:	7821      	ldrb	r1, [r4, #0]
 800849e:	2203      	movs	r2, #3
 80084a0:	4650      	mov	r0, sl
 80084a2:	f7f7 feb5 	bl	8000210 <memchr>
 80084a6:	b140      	cbz	r0, 80084ba <_svfiprintf_r+0x152>
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	eba0 000a 	sub.w	r0, r0, sl
 80084ae:	fa03 f000 	lsl.w	r0, r3, r0
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	4303      	orrs	r3, r0
 80084b6:	3401      	adds	r4, #1
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084be:	4826      	ldr	r0, [pc, #152]	; (8008558 <_svfiprintf_r+0x1f0>)
 80084c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084c4:	2206      	movs	r2, #6
 80084c6:	f7f7 fea3 	bl	8000210 <memchr>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d038      	beq.n	8008540 <_svfiprintf_r+0x1d8>
 80084ce:	4b23      	ldr	r3, [pc, #140]	; (800855c <_svfiprintf_r+0x1f4>)
 80084d0:	bb1b      	cbnz	r3, 800851a <_svfiprintf_r+0x1b2>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	3307      	adds	r3, #7
 80084d6:	f023 0307 	bic.w	r3, r3, #7
 80084da:	3308      	adds	r3, #8
 80084dc:	9303      	str	r3, [sp, #12]
 80084de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e0:	4433      	add	r3, r6
 80084e2:	9309      	str	r3, [sp, #36]	; 0x24
 80084e4:	e767      	b.n	80083b6 <_svfiprintf_r+0x4e>
 80084e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ea:	460c      	mov	r4, r1
 80084ec:	2001      	movs	r0, #1
 80084ee:	e7a5      	b.n	800843c <_svfiprintf_r+0xd4>
 80084f0:	2300      	movs	r3, #0
 80084f2:	3401      	adds	r4, #1
 80084f4:	9305      	str	r3, [sp, #20]
 80084f6:	4619      	mov	r1, r3
 80084f8:	f04f 0c0a 	mov.w	ip, #10
 80084fc:	4620      	mov	r0, r4
 80084fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008502:	3a30      	subs	r2, #48	; 0x30
 8008504:	2a09      	cmp	r2, #9
 8008506:	d903      	bls.n	8008510 <_svfiprintf_r+0x1a8>
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0c5      	beq.n	8008498 <_svfiprintf_r+0x130>
 800850c:	9105      	str	r1, [sp, #20]
 800850e:	e7c3      	b.n	8008498 <_svfiprintf_r+0x130>
 8008510:	fb0c 2101 	mla	r1, ip, r1, r2
 8008514:	4604      	mov	r4, r0
 8008516:	2301      	movs	r3, #1
 8008518:	e7f0      	b.n	80084fc <_svfiprintf_r+0x194>
 800851a:	ab03      	add	r3, sp, #12
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	462a      	mov	r2, r5
 8008520:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <_svfiprintf_r+0x1f8>)
 8008522:	a904      	add	r1, sp, #16
 8008524:	4638      	mov	r0, r7
 8008526:	f3af 8000 	nop.w
 800852a:	1c42      	adds	r2, r0, #1
 800852c:	4606      	mov	r6, r0
 800852e:	d1d6      	bne.n	80084de <_svfiprintf_r+0x176>
 8008530:	89ab      	ldrh	r3, [r5, #12]
 8008532:	065b      	lsls	r3, r3, #25
 8008534:	f53f af2c 	bmi.w	8008390 <_svfiprintf_r+0x28>
 8008538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800853a:	b01d      	add	sp, #116	; 0x74
 800853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008540:	ab03      	add	r3, sp, #12
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	462a      	mov	r2, r5
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <_svfiprintf_r+0x1f8>)
 8008548:	a904      	add	r1, sp, #16
 800854a:	4638      	mov	r0, r7
 800854c:	f000 f87a 	bl	8008644 <_printf_i>
 8008550:	e7eb      	b.n	800852a <_svfiprintf_r+0x1c2>
 8008552:	bf00      	nop
 8008554:	08008fb0 	.word	0x08008fb0
 8008558:	08008fba 	.word	0x08008fba
 800855c:	00000000 	.word	0x00000000
 8008560:	080082b1 	.word	0x080082b1
 8008564:	08008fb6 	.word	0x08008fb6

08008568 <_printf_common>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	4616      	mov	r6, r2
 800856e:	4699      	mov	r9, r3
 8008570:	688a      	ldr	r2, [r1, #8]
 8008572:	690b      	ldr	r3, [r1, #16]
 8008574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008578:	4293      	cmp	r3, r2
 800857a:	bfb8      	it	lt
 800857c:	4613      	movlt	r3, r2
 800857e:	6033      	str	r3, [r6, #0]
 8008580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008584:	4607      	mov	r7, r0
 8008586:	460c      	mov	r4, r1
 8008588:	b10a      	cbz	r2, 800858e <_printf_common+0x26>
 800858a:	3301      	adds	r3, #1
 800858c:	6033      	str	r3, [r6, #0]
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	0699      	lsls	r1, r3, #26
 8008592:	bf42      	ittt	mi
 8008594:	6833      	ldrmi	r3, [r6, #0]
 8008596:	3302      	addmi	r3, #2
 8008598:	6033      	strmi	r3, [r6, #0]
 800859a:	6825      	ldr	r5, [r4, #0]
 800859c:	f015 0506 	ands.w	r5, r5, #6
 80085a0:	d106      	bne.n	80085b0 <_printf_common+0x48>
 80085a2:	f104 0a19 	add.w	sl, r4, #25
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	6832      	ldr	r2, [r6, #0]
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc26      	bgt.n	80085fe <_printf_common+0x96>
 80085b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085b4:	1e13      	subs	r3, r2, #0
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	0692      	lsls	r2, r2, #26
 80085be:	d42b      	bmi.n	8008618 <_printf_common+0xb0>
 80085c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c4:	4649      	mov	r1, r9
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c0      	blx	r8
 80085ca:	3001      	adds	r0, #1
 80085cc:	d01e      	beq.n	800860c <_printf_common+0xa4>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	68e5      	ldr	r5, [r4, #12]
 80085d2:	6832      	ldr	r2, [r6, #0]
 80085d4:	f003 0306 	and.w	r3, r3, #6
 80085d8:	2b04      	cmp	r3, #4
 80085da:	bf08      	it	eq
 80085dc:	1aad      	subeq	r5, r5, r2
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	bf0c      	ite	eq
 80085e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e8:	2500      	movne	r5, #0
 80085ea:	4293      	cmp	r3, r2
 80085ec:	bfc4      	itt	gt
 80085ee:	1a9b      	subgt	r3, r3, r2
 80085f0:	18ed      	addgt	r5, r5, r3
 80085f2:	2600      	movs	r6, #0
 80085f4:	341a      	adds	r4, #26
 80085f6:	42b5      	cmp	r5, r6
 80085f8:	d11a      	bne.n	8008630 <_printf_common+0xc8>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e008      	b.n	8008610 <_printf_common+0xa8>
 80085fe:	2301      	movs	r3, #1
 8008600:	4652      	mov	r2, sl
 8008602:	4649      	mov	r1, r9
 8008604:	4638      	mov	r0, r7
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d103      	bne.n	8008614 <_printf_common+0xac>
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008614:	3501      	adds	r5, #1
 8008616:	e7c6      	b.n	80085a6 <_printf_common+0x3e>
 8008618:	18e1      	adds	r1, r4, r3
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	2030      	movs	r0, #48	; 0x30
 800861e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008622:	4422      	add	r2, r4
 8008624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800862c:	3302      	adds	r3, #2
 800862e:	e7c7      	b.n	80085c0 <_printf_common+0x58>
 8008630:	2301      	movs	r3, #1
 8008632:	4622      	mov	r2, r4
 8008634:	4649      	mov	r1, r9
 8008636:	4638      	mov	r0, r7
 8008638:	47c0      	blx	r8
 800863a:	3001      	adds	r0, #1
 800863c:	d0e6      	beq.n	800860c <_printf_common+0xa4>
 800863e:	3601      	adds	r6, #1
 8008640:	e7d9      	b.n	80085f6 <_printf_common+0x8e>
	...

08008644 <_printf_i>:
 8008644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	4691      	mov	r9, r2
 800864c:	7e27      	ldrb	r7, [r4, #24]
 800864e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008650:	2f78      	cmp	r7, #120	; 0x78
 8008652:	4680      	mov	r8, r0
 8008654:	469a      	mov	sl, r3
 8008656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800865a:	d807      	bhi.n	800866c <_printf_i+0x28>
 800865c:	2f62      	cmp	r7, #98	; 0x62
 800865e:	d80a      	bhi.n	8008676 <_printf_i+0x32>
 8008660:	2f00      	cmp	r7, #0
 8008662:	f000 80d8 	beq.w	8008816 <_printf_i+0x1d2>
 8008666:	2f58      	cmp	r7, #88	; 0x58
 8008668:	f000 80a3 	beq.w	80087b2 <_printf_i+0x16e>
 800866c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008674:	e03a      	b.n	80086ec <_printf_i+0xa8>
 8008676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800867a:	2b15      	cmp	r3, #21
 800867c:	d8f6      	bhi.n	800866c <_printf_i+0x28>
 800867e:	a001      	add	r0, pc, #4	; (adr r0, 8008684 <_printf_i+0x40>)
 8008680:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008684:	080086dd 	.word	0x080086dd
 8008688:	080086f1 	.word	0x080086f1
 800868c:	0800866d 	.word	0x0800866d
 8008690:	0800866d 	.word	0x0800866d
 8008694:	0800866d 	.word	0x0800866d
 8008698:	0800866d 	.word	0x0800866d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800866d 	.word	0x0800866d
 80086a4:	0800866d 	.word	0x0800866d
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	080087fd 	.word	0x080087fd
 80086b4:	08008721 	.word	0x08008721
 80086b8:	080087df 	.word	0x080087df
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	0800881f 	.word	0x0800881f
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	08008721 	.word	0x08008721
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087e7 	.word	0x080087e7
 80086dc:	680b      	ldr	r3, [r1, #0]
 80086de:	1d1a      	adds	r2, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	600a      	str	r2, [r1, #0]
 80086e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ec:	2301      	movs	r3, #1
 80086ee:	e0a3      	b.n	8008838 <_printf_i+0x1f4>
 80086f0:	6825      	ldr	r5, [r4, #0]
 80086f2:	6808      	ldr	r0, [r1, #0]
 80086f4:	062e      	lsls	r6, r5, #24
 80086f6:	f100 0304 	add.w	r3, r0, #4
 80086fa:	d50a      	bpl.n	8008712 <_printf_i+0xce>
 80086fc:	6805      	ldr	r5, [r0, #0]
 80086fe:	600b      	str	r3, [r1, #0]
 8008700:	2d00      	cmp	r5, #0
 8008702:	da03      	bge.n	800870c <_printf_i+0xc8>
 8008704:	232d      	movs	r3, #45	; 0x2d
 8008706:	426d      	negs	r5, r5
 8008708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800870c:	485e      	ldr	r0, [pc, #376]	; (8008888 <_printf_i+0x244>)
 800870e:	230a      	movs	r3, #10
 8008710:	e019      	b.n	8008746 <_printf_i+0x102>
 8008712:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008716:	6805      	ldr	r5, [r0, #0]
 8008718:	600b      	str	r3, [r1, #0]
 800871a:	bf18      	it	ne
 800871c:	b22d      	sxthne	r5, r5
 800871e:	e7ef      	b.n	8008700 <_printf_i+0xbc>
 8008720:	680b      	ldr	r3, [r1, #0]
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	1d18      	adds	r0, r3, #4
 8008726:	6008      	str	r0, [r1, #0]
 8008728:	0628      	lsls	r0, r5, #24
 800872a:	d501      	bpl.n	8008730 <_printf_i+0xec>
 800872c:	681d      	ldr	r5, [r3, #0]
 800872e:	e002      	b.n	8008736 <_printf_i+0xf2>
 8008730:	0669      	lsls	r1, r5, #25
 8008732:	d5fb      	bpl.n	800872c <_printf_i+0xe8>
 8008734:	881d      	ldrh	r5, [r3, #0]
 8008736:	4854      	ldr	r0, [pc, #336]	; (8008888 <_printf_i+0x244>)
 8008738:	2f6f      	cmp	r7, #111	; 0x6f
 800873a:	bf0c      	ite	eq
 800873c:	2308      	moveq	r3, #8
 800873e:	230a      	movne	r3, #10
 8008740:	2100      	movs	r1, #0
 8008742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008746:	6866      	ldr	r6, [r4, #4]
 8008748:	60a6      	str	r6, [r4, #8]
 800874a:	2e00      	cmp	r6, #0
 800874c:	bfa2      	ittt	ge
 800874e:	6821      	ldrge	r1, [r4, #0]
 8008750:	f021 0104 	bicge.w	r1, r1, #4
 8008754:	6021      	strge	r1, [r4, #0]
 8008756:	b90d      	cbnz	r5, 800875c <_printf_i+0x118>
 8008758:	2e00      	cmp	r6, #0
 800875a:	d04d      	beq.n	80087f8 <_printf_i+0x1b4>
 800875c:	4616      	mov	r6, r2
 800875e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008762:	fb03 5711 	mls	r7, r3, r1, r5
 8008766:	5dc7      	ldrb	r7, [r0, r7]
 8008768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800876c:	462f      	mov	r7, r5
 800876e:	42bb      	cmp	r3, r7
 8008770:	460d      	mov	r5, r1
 8008772:	d9f4      	bls.n	800875e <_printf_i+0x11a>
 8008774:	2b08      	cmp	r3, #8
 8008776:	d10b      	bne.n	8008790 <_printf_i+0x14c>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	07df      	lsls	r7, r3, #31
 800877c:	d508      	bpl.n	8008790 <_printf_i+0x14c>
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	6861      	ldr	r1, [r4, #4]
 8008782:	4299      	cmp	r1, r3
 8008784:	bfde      	ittt	le
 8008786:	2330      	movle	r3, #48	; 0x30
 8008788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800878c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008790:	1b92      	subs	r2, r2, r6
 8008792:	6122      	str	r2, [r4, #16]
 8008794:	f8cd a000 	str.w	sl, [sp]
 8008798:	464b      	mov	r3, r9
 800879a:	aa03      	add	r2, sp, #12
 800879c:	4621      	mov	r1, r4
 800879e:	4640      	mov	r0, r8
 80087a0:	f7ff fee2 	bl	8008568 <_printf_common>
 80087a4:	3001      	adds	r0, #1
 80087a6:	d14c      	bne.n	8008842 <_printf_i+0x1fe>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	b004      	add	sp, #16
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	4835      	ldr	r0, [pc, #212]	; (8008888 <_printf_i+0x244>)
 80087b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	680e      	ldr	r6, [r1, #0]
 80087bc:	061f      	lsls	r7, r3, #24
 80087be:	f856 5b04 	ldr.w	r5, [r6], #4
 80087c2:	600e      	str	r6, [r1, #0]
 80087c4:	d514      	bpl.n	80087f0 <_printf_i+0x1ac>
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	bf44      	itt	mi
 80087ca:	f043 0320 	orrmi.w	r3, r3, #32
 80087ce:	6023      	strmi	r3, [r4, #0]
 80087d0:	b91d      	cbnz	r5, 80087da <_printf_i+0x196>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f023 0320 	bic.w	r3, r3, #32
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	2310      	movs	r3, #16
 80087dc:	e7b0      	b.n	8008740 <_printf_i+0xfc>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	f043 0320 	orr.w	r3, r3, #32
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	2378      	movs	r3, #120	; 0x78
 80087e8:	4828      	ldr	r0, [pc, #160]	; (800888c <_printf_i+0x248>)
 80087ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087ee:	e7e3      	b.n	80087b8 <_printf_i+0x174>
 80087f0:	065e      	lsls	r6, r3, #25
 80087f2:	bf48      	it	mi
 80087f4:	b2ad      	uxthmi	r5, r5
 80087f6:	e7e6      	b.n	80087c6 <_printf_i+0x182>
 80087f8:	4616      	mov	r6, r2
 80087fa:	e7bb      	b.n	8008774 <_printf_i+0x130>
 80087fc:	680b      	ldr	r3, [r1, #0]
 80087fe:	6826      	ldr	r6, [r4, #0]
 8008800:	6960      	ldr	r0, [r4, #20]
 8008802:	1d1d      	adds	r5, r3, #4
 8008804:	600d      	str	r5, [r1, #0]
 8008806:	0635      	lsls	r5, r6, #24
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	d501      	bpl.n	8008810 <_printf_i+0x1cc>
 800880c:	6018      	str	r0, [r3, #0]
 800880e:	e002      	b.n	8008816 <_printf_i+0x1d2>
 8008810:	0671      	lsls	r1, r6, #25
 8008812:	d5fb      	bpl.n	800880c <_printf_i+0x1c8>
 8008814:	8018      	strh	r0, [r3, #0]
 8008816:	2300      	movs	r3, #0
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	4616      	mov	r6, r2
 800881c:	e7ba      	b.n	8008794 <_printf_i+0x150>
 800881e:	680b      	ldr	r3, [r1, #0]
 8008820:	1d1a      	adds	r2, r3, #4
 8008822:	600a      	str	r2, [r1, #0]
 8008824:	681e      	ldr	r6, [r3, #0]
 8008826:	6862      	ldr	r2, [r4, #4]
 8008828:	2100      	movs	r1, #0
 800882a:	4630      	mov	r0, r6
 800882c:	f7f7 fcf0 	bl	8000210 <memchr>
 8008830:	b108      	cbz	r0, 8008836 <_printf_i+0x1f2>
 8008832:	1b80      	subs	r0, r0, r6
 8008834:	6060      	str	r0, [r4, #4]
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	2300      	movs	r3, #0
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008840:	e7a8      	b.n	8008794 <_printf_i+0x150>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	4632      	mov	r2, r6
 8008846:	4649      	mov	r1, r9
 8008848:	4640      	mov	r0, r8
 800884a:	47d0      	blx	sl
 800884c:	3001      	adds	r0, #1
 800884e:	d0ab      	beq.n	80087a8 <_printf_i+0x164>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	079b      	lsls	r3, r3, #30
 8008854:	d413      	bmi.n	800887e <_printf_i+0x23a>
 8008856:	68e0      	ldr	r0, [r4, #12]
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	4298      	cmp	r0, r3
 800885c:	bfb8      	it	lt
 800885e:	4618      	movlt	r0, r3
 8008860:	e7a4      	b.n	80087ac <_printf_i+0x168>
 8008862:	2301      	movs	r3, #1
 8008864:	4632      	mov	r2, r6
 8008866:	4649      	mov	r1, r9
 8008868:	4640      	mov	r0, r8
 800886a:	47d0      	blx	sl
 800886c:	3001      	adds	r0, #1
 800886e:	d09b      	beq.n	80087a8 <_printf_i+0x164>
 8008870:	3501      	adds	r5, #1
 8008872:	68e3      	ldr	r3, [r4, #12]
 8008874:	9903      	ldr	r1, [sp, #12]
 8008876:	1a5b      	subs	r3, r3, r1
 8008878:	42ab      	cmp	r3, r5
 800887a:	dcf2      	bgt.n	8008862 <_printf_i+0x21e>
 800887c:	e7eb      	b.n	8008856 <_printf_i+0x212>
 800887e:	2500      	movs	r5, #0
 8008880:	f104 0619 	add.w	r6, r4, #25
 8008884:	e7f5      	b.n	8008872 <_printf_i+0x22e>
 8008886:	bf00      	nop
 8008888:	08008fc1 	.word	0x08008fc1
 800888c:	08008fd2 	.word	0x08008fd2

08008890 <memcpy>:
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	f100 33ff 	add.w	r3, r0, #4294967295
 8008898:	d100      	bne.n	800889c <memcpy+0xc>
 800889a:	4770      	bx	lr
 800889c:	b510      	push	{r4, lr}
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a6:	4291      	cmp	r1, r2
 80088a8:	d1f9      	bne.n	800889e <memcpy+0xe>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <memmove>:
 80088ac:	4288      	cmp	r0, r1
 80088ae:	b510      	push	{r4, lr}
 80088b0:	eb01 0402 	add.w	r4, r1, r2
 80088b4:	d902      	bls.n	80088bc <memmove+0x10>
 80088b6:	4284      	cmp	r4, r0
 80088b8:	4623      	mov	r3, r4
 80088ba:	d807      	bhi.n	80088cc <memmove+0x20>
 80088bc:	1e43      	subs	r3, r0, #1
 80088be:	42a1      	cmp	r1, r4
 80088c0:	d008      	beq.n	80088d4 <memmove+0x28>
 80088c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ca:	e7f8      	b.n	80088be <memmove+0x12>
 80088cc:	4402      	add	r2, r0
 80088ce:	4601      	mov	r1, r0
 80088d0:	428a      	cmp	r2, r1
 80088d2:	d100      	bne.n	80088d6 <memmove+0x2a>
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088de:	e7f7      	b.n	80088d0 <memmove+0x24>

080088e0 <_free_r>:
 80088e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e2:	2900      	cmp	r1, #0
 80088e4:	d048      	beq.n	8008978 <_free_r+0x98>
 80088e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ea:	9001      	str	r0, [sp, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f1a1 0404 	sub.w	r4, r1, #4
 80088f2:	bfb8      	it	lt
 80088f4:	18e4      	addlt	r4, r4, r3
 80088f6:	f000 f8d3 	bl	8008aa0 <__malloc_lock>
 80088fa:	4a20      	ldr	r2, [pc, #128]	; (800897c <_free_r+0x9c>)
 80088fc:	9801      	ldr	r0, [sp, #4]
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	4615      	mov	r5, r2
 8008902:	b933      	cbnz	r3, 8008912 <_free_r+0x32>
 8008904:	6063      	str	r3, [r4, #4]
 8008906:	6014      	str	r4, [r2, #0]
 8008908:	b003      	add	sp, #12
 800890a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800890e:	f000 b8cd 	b.w	8008aac <__malloc_unlock>
 8008912:	42a3      	cmp	r3, r4
 8008914:	d90b      	bls.n	800892e <_free_r+0x4e>
 8008916:	6821      	ldr	r1, [r4, #0]
 8008918:	1862      	adds	r2, r4, r1
 800891a:	4293      	cmp	r3, r2
 800891c:	bf04      	itt	eq
 800891e:	681a      	ldreq	r2, [r3, #0]
 8008920:	685b      	ldreq	r3, [r3, #4]
 8008922:	6063      	str	r3, [r4, #4]
 8008924:	bf04      	itt	eq
 8008926:	1852      	addeq	r2, r2, r1
 8008928:	6022      	streq	r2, [r4, #0]
 800892a:	602c      	str	r4, [r5, #0]
 800892c:	e7ec      	b.n	8008908 <_free_r+0x28>
 800892e:	461a      	mov	r2, r3
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b10b      	cbz	r3, 8008938 <_free_r+0x58>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d9fa      	bls.n	800892e <_free_r+0x4e>
 8008938:	6811      	ldr	r1, [r2, #0]
 800893a:	1855      	adds	r5, r2, r1
 800893c:	42a5      	cmp	r5, r4
 800893e:	d10b      	bne.n	8008958 <_free_r+0x78>
 8008940:	6824      	ldr	r4, [r4, #0]
 8008942:	4421      	add	r1, r4
 8008944:	1854      	adds	r4, r2, r1
 8008946:	42a3      	cmp	r3, r4
 8008948:	6011      	str	r1, [r2, #0]
 800894a:	d1dd      	bne.n	8008908 <_free_r+0x28>
 800894c:	681c      	ldr	r4, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	4421      	add	r1, r4
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	e7d7      	b.n	8008908 <_free_r+0x28>
 8008958:	d902      	bls.n	8008960 <_free_r+0x80>
 800895a:	230c      	movs	r3, #12
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	e7d3      	b.n	8008908 <_free_r+0x28>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf04      	itt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	6063      	str	r3, [r4, #4]
 800896e:	bf04      	itt	eq
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	6054      	str	r4, [r2, #4]
 8008976:	e7c7      	b.n	8008908 <_free_r+0x28>
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	20000098 	.word	0x20000098

08008980 <_malloc_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	1ccd      	adds	r5, r1, #3
 8008984:	f025 0503 	bic.w	r5, r5, #3
 8008988:	3508      	adds	r5, #8
 800898a:	2d0c      	cmp	r5, #12
 800898c:	bf38      	it	cc
 800898e:	250c      	movcc	r5, #12
 8008990:	2d00      	cmp	r5, #0
 8008992:	4606      	mov	r6, r0
 8008994:	db01      	blt.n	800899a <_malloc_r+0x1a>
 8008996:	42a9      	cmp	r1, r5
 8008998:	d903      	bls.n	80089a2 <_malloc_r+0x22>
 800899a:	230c      	movs	r3, #12
 800899c:	6033      	str	r3, [r6, #0]
 800899e:	2000      	movs	r0, #0
 80089a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a2:	f000 f87d 	bl	8008aa0 <__malloc_lock>
 80089a6:	4921      	ldr	r1, [pc, #132]	; (8008a2c <_malloc_r+0xac>)
 80089a8:	680a      	ldr	r2, [r1, #0]
 80089aa:	4614      	mov	r4, r2
 80089ac:	b99c      	cbnz	r4, 80089d6 <_malloc_r+0x56>
 80089ae:	4f20      	ldr	r7, [pc, #128]	; (8008a30 <_malloc_r+0xb0>)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	b923      	cbnz	r3, 80089be <_malloc_r+0x3e>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 f862 	bl	8008a80 <_sbrk_r>
 80089bc:	6038      	str	r0, [r7, #0]
 80089be:	4629      	mov	r1, r5
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f85d 	bl	8008a80 <_sbrk_r>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	d123      	bne.n	8008a12 <_malloc_r+0x92>
 80089ca:	230c      	movs	r3, #12
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 f86c 	bl	8008aac <__malloc_unlock>
 80089d4:	e7e3      	b.n	800899e <_malloc_r+0x1e>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	1b5b      	subs	r3, r3, r5
 80089da:	d417      	bmi.n	8008a0c <_malloc_r+0x8c>
 80089dc:	2b0b      	cmp	r3, #11
 80089de:	d903      	bls.n	80089e8 <_malloc_r+0x68>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	441c      	add	r4, r3
 80089e4:	6025      	str	r5, [r4, #0]
 80089e6:	e004      	b.n	80089f2 <_malloc_r+0x72>
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	bf0c      	ite	eq
 80089ee:	600b      	streq	r3, [r1, #0]
 80089f0:	6053      	strne	r3, [r2, #4]
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f85a 	bl	8008aac <__malloc_unlock>
 80089f8:	f104 000b 	add.w	r0, r4, #11
 80089fc:	1d23      	adds	r3, r4, #4
 80089fe:	f020 0007 	bic.w	r0, r0, #7
 8008a02:	1ac2      	subs	r2, r0, r3
 8008a04:	d0cc      	beq.n	80089a0 <_malloc_r+0x20>
 8008a06:	1a1b      	subs	r3, r3, r0
 8008a08:	50a3      	str	r3, [r4, r2]
 8008a0a:	e7c9      	b.n	80089a0 <_malloc_r+0x20>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	6864      	ldr	r4, [r4, #4]
 8008a10:	e7cc      	b.n	80089ac <_malloc_r+0x2c>
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d0e3      	beq.n	80089e4 <_malloc_r+0x64>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f000 f82e 	bl	8008a80 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d1dd      	bne.n	80089e4 <_malloc_r+0x64>
 8008a28:	e7cf      	b.n	80089ca <_malloc_r+0x4a>
 8008a2a:	bf00      	nop
 8008a2c:	20000098 	.word	0x20000098
 8008a30:	2000009c 	.word	0x2000009c

08008a34 <_realloc_r>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	4607      	mov	r7, r0
 8008a38:	4614      	mov	r4, r2
 8008a3a:	460e      	mov	r6, r1
 8008a3c:	b921      	cbnz	r1, 8008a48 <_realloc_r+0x14>
 8008a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a42:	4611      	mov	r1, r2
 8008a44:	f7ff bf9c 	b.w	8008980 <_malloc_r>
 8008a48:	b922      	cbnz	r2, 8008a54 <_realloc_r+0x20>
 8008a4a:	f7ff ff49 	bl	80088e0 <_free_r>
 8008a4e:	4625      	mov	r5, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	f000 f830 	bl	8008ab8 <_malloc_usable_size_r>
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d20f      	bcs.n	8008a7c <_realloc_r+0x48>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f7ff ff8e 	bl	8008980 <_malloc_r>
 8008a64:	4605      	mov	r5, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d0f2      	beq.n	8008a50 <_realloc_r+0x1c>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	f7ff ff0f 	bl	8008890 <memcpy>
 8008a72:	4631      	mov	r1, r6
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ff33 	bl	80088e0 <_free_r>
 8008a7a:	e7e9      	b.n	8008a50 <_realloc_r+0x1c>
 8008a7c:	4635      	mov	r5, r6
 8008a7e:	e7e7      	b.n	8008a50 <_realloc_r+0x1c>

08008a80 <_sbrk_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d06      	ldr	r5, [pc, #24]	; (8008a9c <_sbrk_r+0x1c>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f9 fe58 	bl	8002740 <_sbrk>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_sbrk_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_sbrk_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	200006e4 	.word	0x200006e4

08008aa0 <__malloc_lock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__malloc_lock+0x8>)
 8008aa2:	f000 b811 	b.w	8008ac8 <__retarget_lock_acquire_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	200006ec 	.word	0x200006ec

08008aac <__malloc_unlock>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__malloc_unlock+0x8>)
 8008aae:	f000 b80c 	b.w	8008aca <__retarget_lock_release_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	200006ec 	.word	0x200006ec

08008ab8 <_malloc_usable_size_r>:
 8008ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abc:	1f18      	subs	r0, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfbc      	itt	lt
 8008ac2:	580b      	ldrlt	r3, [r1, r0]
 8008ac4:	18c0      	addlt	r0, r0, r3
 8008ac6:	4770      	bx	lr

08008ac8 <__retarget_lock_acquire_recursive>:
 8008ac8:	4770      	bx	lr

08008aca <__retarget_lock_release_recursive>:
 8008aca:	4770      	bx	lr

08008acc <_init>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr

08008ad8 <_fini>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	bf00      	nop
 8008adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ade:	bc08      	pop	{r3}
 8008ae0:	469e      	mov	lr, r3
 8008ae2:	4770      	bx	lr
